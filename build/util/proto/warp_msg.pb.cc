// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/proto/warp_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "util/proto/warp_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

namespace {

const ::google::protobuf::Descriptor* ClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMsg_reflection_ = NULL;
struct ClientMsgOneofInstance {
  const ::hotbox::ClientHandshake* handshake_msg_;
  const ::hotbox::GenericRequest* generic_req_;
  const ::hotbox::CreateDBReq* create_db_req_;
  const ::hotbox::ReadFileReq* read_file_req_;
  const ::hotbox::DBServerShutdownReq* db_server_shutdown_req_;
  const ::hotbox::CreateSessionReq* create_session_req_;
  const ::hotbox::CloseSessionReq* close_session_req_;
}* ClientMsg_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMsg_reflection_ = NULL;
struct ServerMsgOneofInstance {
  const ::hotbox::ServerHandshake* handshake_msg_;
  const ::hotbox::GenericReply* generic_reply_;
  const ::hotbox::CreateSessionReply* create_session_reply_;
}* ServerMsg_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ServerHandshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerHandshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHandshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHandshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadFileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadFileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBServerShutdownReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBServerShutdownReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseSessionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseSessionReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_util_2fproto_2fwarp_5fmsg_2eproto() {
  protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "util/proto/warp_msg.proto");
  GOOGLE_CHECK(file != NULL);
  ClientMsg_descriptor_ = file->message_type(0);
  static const int ClientMsg_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, handshake_msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, generic_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, create_db_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, read_file_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, db_server_shutdown_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, create_session_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ClientMsg_default_oneof_instance_, close_session_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, msg_),
  };
  ClientMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientMsg_descriptor_,
      ClientMsg::default_instance_,
      ClientMsg_offsets_,
      -1,
      -1,
      -1,
      ClientMsg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _oneof_case_[0]),
      sizeof(ClientMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _is_default_instance_));
  ServerMsg_descriptor_ = file->message_type(1);
  static const int ServerMsg_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMsg_default_oneof_instance_, handshake_msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMsg_default_oneof_instance_, generic_reply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServerMsg_default_oneof_instance_, create_session_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, msg_),
  };
  ServerMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerMsg_descriptor_,
      ServerMsg::default_instance_,
      ServerMsg_offsets_,
      -1,
      -1,
      -1,
      ServerMsg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _oneof_case_[0]),
      sizeof(ServerMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMsg, _is_default_instance_));
  ServerHandshake_descriptor_ = file->message_type(2);
  static const int ServerHandshake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHandshake, client_id_),
  };
  ServerHandshake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerHandshake_descriptor_,
      ServerHandshake::default_instance_,
      ServerHandshake_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerHandshake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHandshake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerHandshake, _is_default_instance_));
  ClientHandshake_descriptor_ = file->message_type(3);
  static const int ClientHandshake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandshake, dummy_),
  };
  ClientHandshake_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientHandshake_descriptor_,
      ClientHandshake::default_instance_,
      ClientHandshake_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientHandshake),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandshake, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHandshake, _is_default_instance_));
  GenericRequest_descriptor_ = file->message_type(4);
  static const int GenericRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, req_),
  };
  GenericRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericRequest_descriptor_,
      GenericRequest::default_instance_,
      GenericRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GenericRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericRequest, _is_default_instance_));
  GenericReply_descriptor_ = file->message_type(5);
  static const int GenericReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericReply, msg_),
  };
  GenericReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericReply_descriptor_,
      GenericReply::default_instance_,
      GenericReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GenericReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericReply, _is_default_instance_));
  CreateDBReq_descriptor_ = file->message_type(6);
  static const int CreateDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDBReq, db_config_),
  };
  CreateDBReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateDBReq_descriptor_,
      CreateDBReq::default_instance_,
      CreateDBReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateDBReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDBReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDBReq, _is_default_instance_));
  ReadFileReq_descriptor_ = file->message_type(7);
  static const int ReadFileReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, file_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, parser_config_),
  };
  ReadFileReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadFileReq_descriptor_,
      ReadFileReq::default_instance_,
      ReadFileReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadFileReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFileReq, _is_default_instance_));
  DBServerShutdownReq_descriptor_ = file->message_type(8);
  static const int DBServerShutdownReq_offsets_[1] = {
  };
  DBServerShutdownReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBServerShutdownReq_descriptor_,
      DBServerShutdownReq::default_instance_,
      DBServerShutdownReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBServerShutdownReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerShutdownReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerShutdownReq, _is_default_instance_));
  CreateSessionReq_descriptor_ = file->message_type(9);
  static const int CreateSessionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReq, session_options_),
  };
  CreateSessionReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionReq_descriptor_,
      CreateSessionReq::default_instance_,
      CreateSessionReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateSessionReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReq, _is_default_instance_));
  CreateSessionReply_descriptor_ = file->message_type(10);
  static const int CreateSessionReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, session_proto_),
  };
  CreateSessionReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionReply_descriptor_,
      CreateSessionReply::default_instance_,
      CreateSessionReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateSessionReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, _is_default_instance_));
  CloseSessionReq_descriptor_ = file->message_type(11);
  static const int CloseSessionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionReq, session_id_),
  };
  CloseSessionReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseSessionReq_descriptor_,
      CloseSessionReq::default_instance_,
      CloseSessionReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseSessionReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseSessionReq, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_util_2fproto_2fwarp_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientMsg_descriptor_, &ClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerMsg_descriptor_, &ServerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerHandshake_descriptor_, &ServerHandshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientHandshake_descriptor_, &ClientHandshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericRequest_descriptor_, &GenericRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericReply_descriptor_, &GenericReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateDBReq_descriptor_, &CreateDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadFileReq_descriptor_, &ReadFileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBServerShutdownReq_descriptor_, &DBServerShutdownReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionReq_descriptor_, &CreateSessionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionReply_descriptor_, &CreateSessionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseSessionReq_descriptor_, &CloseSessionReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_util_2fproto_2fwarp_5fmsg_2eproto() {
  delete ClientMsg::default_instance_;
  delete ClientMsg_default_oneof_instance_;
  delete ClientMsg_reflection_;
  delete ServerMsg::default_instance_;
  delete ServerMsg_default_oneof_instance_;
  delete ServerMsg_reflection_;
  delete ServerHandshake::default_instance_;
  delete ServerHandshake_reflection_;
  delete ClientHandshake::default_instance_;
  delete ClientHandshake_reflection_;
  delete GenericRequest::default_instance_;
  delete GenericRequest_reflection_;
  delete GenericReply::default_instance_;
  delete GenericReply_reflection_;
  delete CreateDBReq::default_instance_;
  delete CreateDBReq_reflection_;
  delete ReadFileReq::default_instance_;
  delete ReadFileReq_reflection_;
  delete DBServerShutdownReq::default_instance_;
  delete DBServerShutdownReq_reflection_;
  delete CreateSessionReq::default_instance_;
  delete CreateSessionReq_reflection_;
  delete CreateSessionReply::default_instance_;
  delete CreateSessionReply_reflection_;
  delete CloseSessionReq::default_instance_;
  delete CloseSessionReq_reflection_;
}

void protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hotbox::protobuf_AddDesc_util_2fproto_2futil_2eproto();
  ::hotbox::protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  ::hotbox::protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031util/proto/warp_msg.proto\022\006hotbox\032\025uti"
    "l/proto/util.proto\032\021db/proto/db.proto\032\037p"
    "arse/proto/parser_config.proto\"\374\002\n\tClien"
    "tMsg\0220\n\rhandshake_msg\030\001 \001(\0132\027.hotbox.Cli"
    "entHandshakeH\000\022-\n\013generic_req\030\002 \001(\0132\026.ho"
    "tbox.GenericRequestH\000\022,\n\rcreate_db_req\030\003"
    " \001(\0132\023.hotbox.CreateDBReqH\000\022,\n\rread_file"
    "_req\030\004 \001(\0132\023.hotbox.ReadFileReqH\000\022=\n\026db_"
    "server_shutdown_req\030\005 \001(\0132\033.hotbox.DBSer"
    "verShutdownReqH\000\0226\n\022create_session_req\030\006"
    " \001(\0132\030.hotbox.CreateSessionReqH\000\0224\n\021clos"
    "e_session_req\030\007 \001(\0132\027.hotbox.CloseSessio"
    "nReqH\000B\005\n\003msg\"\257\001\n\tServerMsg\0220\n\rhandshake"
    "_msg\030\001 \001(\0132\027.hotbox.ServerHandshakeH\000\022-\n"
    "\rgeneric_reply\030\002 \001(\0132\024.hotbox.GenericRep"
    "lyH\000\022:\n\024create_session_reply\030\003 \001(\0132\032.hot"
    "box.CreateSessionReplyH\000B\005\n\003msg\"$\n\017Serve"
    "rHandshake\022\021\n\tclient_id\030\001 \001(\005\" \n\017ClientH"
    "andshake\022\r\n\005dummy\030\001 \001(\010\"\035\n\016GenericReques"
    "t\022\013\n\003req\030\001 \001(\t\"\033\n\014GenericReply\022\013\n\003msg\030\001 "
    "\001(\t\"2\n\013CreateDBReq\022#\n\tdb_config\030\001 \001(\0132\020."
    "hotbox.DBConfig\"\227\001\n\013ReadFileReq\022\017\n\007db_na"
    "me\030\001 \001(\t\022\021\n\tfile_path\030\002 \001(\t\022\'\n\013file_form"
    "at\030\003 \001(\0162\022.hotbox.FileFormat\022\016\n\006header\030\004"
    " \001(\005\022+\n\rparser_config\030\005 \001(\0132\024.hotbox.Par"
    "serConfig\"\025\n\023DBServerShutdownReq\"H\n\020Crea"
    "teSessionReq\0224\n\017session_options\030\001 \001(\0132\033."
    "hotbox.SessionOptionsProto\"w\n\022CreateSess"
    "ionReply\022\013\n\003msg\030\001 \001(\t\022\'\n\013status_code\030\002 \001"
    "(\0162\022.hotbox.StatusCode\022+\n\rsession_proto\030"
    "\003 \001(\0132\024.hotbox.SessionProto\"%\n\017CloseSess"
    "ionReq\022\022\n\nsession_id\030\001 \001(\tb\006proto3", 1274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "util/proto/warp_msg.proto", &protobuf_RegisterTypes);
  ClientMsg::default_instance_ = new ClientMsg();
  ClientMsg_default_oneof_instance_ = new ClientMsgOneofInstance();
  ServerMsg::default_instance_ = new ServerMsg();
  ServerMsg_default_oneof_instance_ = new ServerMsgOneofInstance();
  ServerHandshake::default_instance_ = new ServerHandshake();
  ClientHandshake::default_instance_ = new ClientHandshake();
  GenericRequest::default_instance_ = new GenericRequest();
  GenericReply::default_instance_ = new GenericReply();
  CreateDBReq::default_instance_ = new CreateDBReq();
  ReadFileReq::default_instance_ = new ReadFileReq();
  DBServerShutdownReq::default_instance_ = new DBServerShutdownReq();
  CreateSessionReq::default_instance_ = new CreateSessionReq();
  CreateSessionReply::default_instance_ = new CreateSessionReply();
  CloseSessionReq::default_instance_ = new CloseSessionReq();
  ClientMsg::default_instance_->InitAsDefaultInstance();
  ServerMsg::default_instance_->InitAsDefaultInstance();
  ServerHandshake::default_instance_->InitAsDefaultInstance();
  ClientHandshake::default_instance_->InitAsDefaultInstance();
  GenericRequest::default_instance_->InitAsDefaultInstance();
  GenericReply::default_instance_->InitAsDefaultInstance();
  CreateDBReq::default_instance_->InitAsDefaultInstance();
  ReadFileReq::default_instance_->InitAsDefaultInstance();
  DBServerShutdownReq::default_instance_->InitAsDefaultInstance();
  CreateSessionReq::default_instance_->InitAsDefaultInstance();
  CreateSessionReply::default_instance_->InitAsDefaultInstance();
  CloseSessionReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_util_2fproto_2fwarp_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_util_2fproto_2fwarp_5fmsg_2eproto {
  StaticDescriptorInitializer_util_2fproto_2fwarp_5fmsg_2eproto() {
    protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  }
} static_descriptor_initializer_util_2fproto_2fwarp_5fmsg_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ClientMsg::kHandshakeMsgFieldNumber;
const int ClientMsg::kGenericReqFieldNumber;
const int ClientMsg::kCreateDbReqFieldNumber;
const int ClientMsg::kReadFileReqFieldNumber;
const int ClientMsg::kDbServerShutdownReqFieldNumber;
const int ClientMsg::kCreateSessionReqFieldNumber;
const int ClientMsg::kCloseSessionReqFieldNumber;
#endif  // !_MSC_VER

ClientMsg::ClientMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ClientMsg)
}

void ClientMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ClientMsg_default_oneof_instance_->handshake_msg_ = const_cast< ::hotbox::ClientHandshake*>(&::hotbox::ClientHandshake::default_instance());
  ClientMsg_default_oneof_instance_->generic_req_ = const_cast< ::hotbox::GenericRequest*>(&::hotbox::GenericRequest::default_instance());
  ClientMsg_default_oneof_instance_->create_db_req_ = const_cast< ::hotbox::CreateDBReq*>(&::hotbox::CreateDBReq::default_instance());
  ClientMsg_default_oneof_instance_->read_file_req_ = const_cast< ::hotbox::ReadFileReq*>(&::hotbox::ReadFileReq::default_instance());
  ClientMsg_default_oneof_instance_->db_server_shutdown_req_ = const_cast< ::hotbox::DBServerShutdownReq*>(&::hotbox::DBServerShutdownReq::default_instance());
  ClientMsg_default_oneof_instance_->create_session_req_ = const_cast< ::hotbox::CreateSessionReq*>(&::hotbox::CreateSessionReq::default_instance());
  ClientMsg_default_oneof_instance_->close_session_req_ = const_cast< ::hotbox::CloseSessionReq*>(&::hotbox::CloseSessionReq::default_instance());
}

ClientMsg::ClientMsg(const ClientMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ClientMsg)
}

void ClientMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_msg();
}

ClientMsg::~ClientMsg() {
  // @@protoc_insertion_point(destructor:hotbox.ClientMsg)
  SharedDtor();
}

void ClientMsg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void ClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMsg_descriptor_;
}

const ClientMsg& ClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

ClientMsg* ClientMsg::default_instance_ = NULL;

ClientMsg* ClientMsg::New(::google::protobuf::Arena* arena) const {
  ClientMsg* n = new ClientMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientMsg::clear_msg() {
  switch(msg_case()) {
    case kHandshakeMsg: {
      delete msg_.handshake_msg_;
      break;
    }
    case kGenericReq: {
      delete msg_.generic_req_;
      break;
    }
    case kCreateDbReq: {
      delete msg_.create_db_req_;
      break;
    }
    case kReadFileReq: {
      delete msg_.read_file_req_;
      break;
    }
    case kDbServerShutdownReq: {
      delete msg_.db_server_shutdown_req_;
      break;
    }
    case kCreateSessionReq: {
      delete msg_.create_session_req_;
      break;
    }
    case kCloseSessionReq: {
      delete msg_.close_session_req_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ClientMsg::Clear() {
  clear_msg();
}

bool ClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.ClientHandshake handshake_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_generic_req;
        break;
      }

      // optional .hotbox.GenericRequest generic_req = 2;
      case 2: {
        if (tag == 18) {
         parse_generic_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_db_req;
        break;
      }

      // optional .hotbox.CreateDBReq create_db_req = 3;
      case 3: {
        if (tag == 26) {
         parse_create_db_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_db_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_read_file_req;
        break;
      }

      // optional .hotbox.ReadFileReq read_file_req = 4;
      case 4: {
        if (tag == 34) {
         parse_read_file_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_file_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_db_server_shutdown_req;
        break;
      }

      // optional .hotbox.DBServerShutdownReq db_server_shutdown_req = 5;
      case 5: {
        if (tag == 42) {
         parse_db_server_shutdown_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_server_shutdown_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_create_session_req;
        break;
      }

      // optional .hotbox.CreateSessionReq create_session_req = 6;
      case 6: {
        if (tag == 50) {
         parse_create_session_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_session_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_close_session_req;
        break;
      }

      // optional .hotbox.CloseSessionReq close_session_req = 7;
      case 7: {
        if (tag == 58) {
         parse_close_session_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_session_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ClientMsg)
  return false;
#undef DO_
}

void ClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ClientMsg)
  // optional .hotbox.ClientHandshake handshake_msg = 1;
  if (has_handshake_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.handshake_msg_, output);
  }

  // optional .hotbox.GenericRequest generic_req = 2;
  if (has_generic_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.generic_req_, output);
  }

  // optional .hotbox.CreateDBReq create_db_req = 3;
  if (has_create_db_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.create_db_req_, output);
  }

  // optional .hotbox.ReadFileReq read_file_req = 4;
  if (has_read_file_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.read_file_req_, output);
  }

  // optional .hotbox.DBServerShutdownReq db_server_shutdown_req = 5;
  if (has_db_server_shutdown_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.db_server_shutdown_req_, output);
  }

  // optional .hotbox.CreateSessionReq create_session_req = 6;
  if (has_create_session_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.create_session_req_, output);
  }

  // optional .hotbox.CloseSessionReq close_session_req = 7;
  if (has_close_session_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *msg_.close_session_req_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ClientMsg)
}

::google::protobuf::uint8* ClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ClientMsg)
  // optional .hotbox.ClientHandshake handshake_msg = 1;
  if (has_handshake_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *msg_.handshake_msg_, target);
  }

  // optional .hotbox.GenericRequest generic_req = 2;
  if (has_generic_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *msg_.generic_req_, target);
  }

  // optional .hotbox.CreateDBReq create_db_req = 3;
  if (has_create_db_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *msg_.create_db_req_, target);
  }

  // optional .hotbox.ReadFileReq read_file_req = 4;
  if (has_read_file_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *msg_.read_file_req_, target);
  }

  // optional .hotbox.DBServerShutdownReq db_server_shutdown_req = 5;
  if (has_db_server_shutdown_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *msg_.db_server_shutdown_req_, target);
  }

  // optional .hotbox.CreateSessionReq create_session_req = 6;
  if (has_create_session_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *msg_.create_session_req_, target);
  }

  // optional .hotbox.CloseSessionReq close_session_req = 7;
  if (has_close_session_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *msg_.close_session_req_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ClientMsg)
  return target;
}

int ClientMsg::ByteSize() const {
  int total_size = 0;

  switch (msg_case()) {
    // optional .hotbox.ClientHandshake handshake_msg = 1;
    case kHandshakeMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.handshake_msg_);
      break;
    }
    // optional .hotbox.GenericRequest generic_req = 2;
    case kGenericReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.generic_req_);
      break;
    }
    // optional .hotbox.CreateDBReq create_db_req = 3;
    case kCreateDbReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.create_db_req_);
      break;
    }
    // optional .hotbox.ReadFileReq read_file_req = 4;
    case kReadFileReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.read_file_req_);
      break;
    }
    // optional .hotbox.DBServerShutdownReq db_server_shutdown_req = 5;
    case kDbServerShutdownReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.db_server_shutdown_req_);
      break;
    }
    // optional .hotbox.CreateSessionReq create_session_req = 6;
    case kCreateSessionReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.create_session_req_);
      break;
    }
    // optional .hotbox.CloseSessionReq close_session_req = 7;
    case kCloseSessionReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.close_session_req_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMsg::MergeFrom(const ClientMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.msg_case()) {
    case kHandshakeMsg: {
      mutable_handshake_msg()->::hotbox::ClientHandshake::MergeFrom(from.handshake_msg());
      break;
    }
    case kGenericReq: {
      mutable_generic_req()->::hotbox::GenericRequest::MergeFrom(from.generic_req());
      break;
    }
    case kCreateDbReq: {
      mutable_create_db_req()->::hotbox::CreateDBReq::MergeFrom(from.create_db_req());
      break;
    }
    case kReadFileReq: {
      mutable_read_file_req()->::hotbox::ReadFileReq::MergeFrom(from.read_file_req());
      break;
    }
    case kDbServerShutdownReq: {
      mutable_db_server_shutdown_req()->::hotbox::DBServerShutdownReq::MergeFrom(from.db_server_shutdown_req());
      break;
    }
    case kCreateSessionReq: {
      mutable_create_session_req()->::hotbox::CreateSessionReq::MergeFrom(from.create_session_req());
      break;
    }
    case kCloseSessionReq: {
      mutable_close_session_req()->::hotbox::CloseSessionReq::MergeFrom(from.close_session_req());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsg::CopyFrom(const ClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsg::IsInitialized() const {

  return true;
}

void ClientMsg::Swap(ClientMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMsg::InternalSwap(ClientMsg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMsg_descriptor_;
  metadata.reflection = ClientMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientMsg

// optional .hotbox.ClientHandshake handshake_msg = 1;
bool ClientMsg::has_handshake_msg() const {
  return msg_case() == kHandshakeMsg;
}
void ClientMsg::set_has_handshake_msg() {
  _oneof_case_[0] = kHandshakeMsg;
}
void ClientMsg::clear_handshake_msg() {
  if (has_handshake_msg()) {
    delete msg_.handshake_msg_;
    clear_has_msg();
  }
}
 const ::hotbox::ClientHandshake& ClientMsg::handshake_msg() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.handshake_msg)
  return has_handshake_msg()
      ? *msg_.handshake_msg_
      : ::hotbox::ClientHandshake::default_instance();
}
::hotbox::ClientHandshake* ClientMsg::mutable_handshake_msg() {
  if (!has_handshake_msg()) {
    clear_msg();
    set_has_handshake_msg();
    msg_.handshake_msg_ = new ::hotbox::ClientHandshake;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.handshake_msg)
  return msg_.handshake_msg_;
}
::hotbox::ClientHandshake* ClientMsg::release_handshake_msg() {
  if (has_handshake_msg()) {
    clear_has_msg();
    ::hotbox::ClientHandshake* temp = msg_.handshake_msg_;
    msg_.handshake_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_handshake_msg(::hotbox::ClientHandshake* handshake_msg) {
  clear_msg();
  if (handshake_msg) {
    set_has_handshake_msg();
    msg_.handshake_msg_ = handshake_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.handshake_msg)
}

// optional .hotbox.GenericRequest generic_req = 2;
bool ClientMsg::has_generic_req() const {
  return msg_case() == kGenericReq;
}
void ClientMsg::set_has_generic_req() {
  _oneof_case_[0] = kGenericReq;
}
void ClientMsg::clear_generic_req() {
  if (has_generic_req()) {
    delete msg_.generic_req_;
    clear_has_msg();
  }
}
 const ::hotbox::GenericRequest& ClientMsg::generic_req() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.generic_req)
  return has_generic_req()
      ? *msg_.generic_req_
      : ::hotbox::GenericRequest::default_instance();
}
::hotbox::GenericRequest* ClientMsg::mutable_generic_req() {
  if (!has_generic_req()) {
    clear_msg();
    set_has_generic_req();
    msg_.generic_req_ = new ::hotbox::GenericRequest;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.generic_req)
  return msg_.generic_req_;
}
::hotbox::GenericRequest* ClientMsg::release_generic_req() {
  if (has_generic_req()) {
    clear_has_msg();
    ::hotbox::GenericRequest* temp = msg_.generic_req_;
    msg_.generic_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_generic_req(::hotbox::GenericRequest* generic_req) {
  clear_msg();
  if (generic_req) {
    set_has_generic_req();
    msg_.generic_req_ = generic_req;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.generic_req)
}

// optional .hotbox.CreateDBReq create_db_req = 3;
bool ClientMsg::has_create_db_req() const {
  return msg_case() == kCreateDbReq;
}
void ClientMsg::set_has_create_db_req() {
  _oneof_case_[0] = kCreateDbReq;
}
void ClientMsg::clear_create_db_req() {
  if (has_create_db_req()) {
    delete msg_.create_db_req_;
    clear_has_msg();
  }
}
 const ::hotbox::CreateDBReq& ClientMsg::create_db_req() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.create_db_req)
  return has_create_db_req()
      ? *msg_.create_db_req_
      : ::hotbox::CreateDBReq::default_instance();
}
::hotbox::CreateDBReq* ClientMsg::mutable_create_db_req() {
  if (!has_create_db_req()) {
    clear_msg();
    set_has_create_db_req();
    msg_.create_db_req_ = new ::hotbox::CreateDBReq;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.create_db_req)
  return msg_.create_db_req_;
}
::hotbox::CreateDBReq* ClientMsg::release_create_db_req() {
  if (has_create_db_req()) {
    clear_has_msg();
    ::hotbox::CreateDBReq* temp = msg_.create_db_req_;
    msg_.create_db_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_create_db_req(::hotbox::CreateDBReq* create_db_req) {
  clear_msg();
  if (create_db_req) {
    set_has_create_db_req();
    msg_.create_db_req_ = create_db_req;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.create_db_req)
}

// optional .hotbox.ReadFileReq read_file_req = 4;
bool ClientMsg::has_read_file_req() const {
  return msg_case() == kReadFileReq;
}
void ClientMsg::set_has_read_file_req() {
  _oneof_case_[0] = kReadFileReq;
}
void ClientMsg::clear_read_file_req() {
  if (has_read_file_req()) {
    delete msg_.read_file_req_;
    clear_has_msg();
  }
}
 const ::hotbox::ReadFileReq& ClientMsg::read_file_req() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.read_file_req)
  return has_read_file_req()
      ? *msg_.read_file_req_
      : ::hotbox::ReadFileReq::default_instance();
}
::hotbox::ReadFileReq* ClientMsg::mutable_read_file_req() {
  if (!has_read_file_req()) {
    clear_msg();
    set_has_read_file_req();
    msg_.read_file_req_ = new ::hotbox::ReadFileReq;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.read_file_req)
  return msg_.read_file_req_;
}
::hotbox::ReadFileReq* ClientMsg::release_read_file_req() {
  if (has_read_file_req()) {
    clear_has_msg();
    ::hotbox::ReadFileReq* temp = msg_.read_file_req_;
    msg_.read_file_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_read_file_req(::hotbox::ReadFileReq* read_file_req) {
  clear_msg();
  if (read_file_req) {
    set_has_read_file_req();
    msg_.read_file_req_ = read_file_req;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.read_file_req)
}

// optional .hotbox.DBServerShutdownReq db_server_shutdown_req = 5;
bool ClientMsg::has_db_server_shutdown_req() const {
  return msg_case() == kDbServerShutdownReq;
}
void ClientMsg::set_has_db_server_shutdown_req() {
  _oneof_case_[0] = kDbServerShutdownReq;
}
void ClientMsg::clear_db_server_shutdown_req() {
  if (has_db_server_shutdown_req()) {
    delete msg_.db_server_shutdown_req_;
    clear_has_msg();
  }
}
 const ::hotbox::DBServerShutdownReq& ClientMsg::db_server_shutdown_req() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.db_server_shutdown_req)
  return has_db_server_shutdown_req()
      ? *msg_.db_server_shutdown_req_
      : ::hotbox::DBServerShutdownReq::default_instance();
}
::hotbox::DBServerShutdownReq* ClientMsg::mutable_db_server_shutdown_req() {
  if (!has_db_server_shutdown_req()) {
    clear_msg();
    set_has_db_server_shutdown_req();
    msg_.db_server_shutdown_req_ = new ::hotbox::DBServerShutdownReq;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.db_server_shutdown_req)
  return msg_.db_server_shutdown_req_;
}
::hotbox::DBServerShutdownReq* ClientMsg::release_db_server_shutdown_req() {
  if (has_db_server_shutdown_req()) {
    clear_has_msg();
    ::hotbox::DBServerShutdownReq* temp = msg_.db_server_shutdown_req_;
    msg_.db_server_shutdown_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_db_server_shutdown_req(::hotbox::DBServerShutdownReq* db_server_shutdown_req) {
  clear_msg();
  if (db_server_shutdown_req) {
    set_has_db_server_shutdown_req();
    msg_.db_server_shutdown_req_ = db_server_shutdown_req;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.db_server_shutdown_req)
}

// optional .hotbox.CreateSessionReq create_session_req = 6;
bool ClientMsg::has_create_session_req() const {
  return msg_case() == kCreateSessionReq;
}
void ClientMsg::set_has_create_session_req() {
  _oneof_case_[0] = kCreateSessionReq;
}
void ClientMsg::clear_create_session_req() {
  if (has_create_session_req()) {
    delete msg_.create_session_req_;
    clear_has_msg();
  }
}
 const ::hotbox::CreateSessionReq& ClientMsg::create_session_req() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.create_session_req)
  return has_create_session_req()
      ? *msg_.create_session_req_
      : ::hotbox::CreateSessionReq::default_instance();
}
::hotbox::CreateSessionReq* ClientMsg::mutable_create_session_req() {
  if (!has_create_session_req()) {
    clear_msg();
    set_has_create_session_req();
    msg_.create_session_req_ = new ::hotbox::CreateSessionReq;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.create_session_req)
  return msg_.create_session_req_;
}
::hotbox::CreateSessionReq* ClientMsg::release_create_session_req() {
  if (has_create_session_req()) {
    clear_has_msg();
    ::hotbox::CreateSessionReq* temp = msg_.create_session_req_;
    msg_.create_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_create_session_req(::hotbox::CreateSessionReq* create_session_req) {
  clear_msg();
  if (create_session_req) {
    set_has_create_session_req();
    msg_.create_session_req_ = create_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.create_session_req)
}

// optional .hotbox.CloseSessionReq close_session_req = 7;
bool ClientMsg::has_close_session_req() const {
  return msg_case() == kCloseSessionReq;
}
void ClientMsg::set_has_close_session_req() {
  _oneof_case_[0] = kCloseSessionReq;
}
void ClientMsg::clear_close_session_req() {
  if (has_close_session_req()) {
    delete msg_.close_session_req_;
    clear_has_msg();
  }
}
 const ::hotbox::CloseSessionReq& ClientMsg::close_session_req() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientMsg.close_session_req)
  return has_close_session_req()
      ? *msg_.close_session_req_
      : ::hotbox::CloseSessionReq::default_instance();
}
::hotbox::CloseSessionReq* ClientMsg::mutable_close_session_req() {
  if (!has_close_session_req()) {
    clear_msg();
    set_has_close_session_req();
    msg_.close_session_req_ = new ::hotbox::CloseSessionReq;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ClientMsg.close_session_req)
  return msg_.close_session_req_;
}
::hotbox::CloseSessionReq* ClientMsg::release_close_session_req() {
  if (has_close_session_req()) {
    clear_has_msg();
    ::hotbox::CloseSessionReq* temp = msg_.close_session_req_;
    msg_.close_session_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClientMsg::set_allocated_close_session_req(::hotbox::CloseSessionReq* close_session_req) {
  clear_msg();
  if (close_session_req) {
    set_has_close_session_req();
    msg_.close_session_req_ = close_session_req;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ClientMsg.close_session_req)
}

bool ClientMsg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void ClientMsg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
ClientMsg::MsgCase ClientMsg::msg_case() const {
  return ClientMsg::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerMsg::kHandshakeMsgFieldNumber;
const int ServerMsg::kGenericReplyFieldNumber;
const int ServerMsg::kCreateSessionReplyFieldNumber;
#endif  // !_MSC_VER

ServerMsg::ServerMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ServerMsg)
}

void ServerMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ServerMsg_default_oneof_instance_->handshake_msg_ = const_cast< ::hotbox::ServerHandshake*>(&::hotbox::ServerHandshake::default_instance());
  ServerMsg_default_oneof_instance_->generic_reply_ = const_cast< ::hotbox::GenericReply*>(&::hotbox::GenericReply::default_instance());
  ServerMsg_default_oneof_instance_->create_session_reply_ = const_cast< ::hotbox::CreateSessionReply*>(&::hotbox::CreateSessionReply::default_instance());
}

ServerMsg::ServerMsg(const ServerMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ServerMsg)
}

void ServerMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_msg();
}

ServerMsg::~ServerMsg() {
  // @@protoc_insertion_point(destructor:hotbox.ServerMsg)
  SharedDtor();
}

void ServerMsg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void ServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMsg_descriptor_;
}

const ServerMsg& ServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

ServerMsg* ServerMsg::default_instance_ = NULL;

ServerMsg* ServerMsg::New(::google::protobuf::Arena* arena) const {
  ServerMsg* n = new ServerMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerMsg::clear_msg() {
  switch(msg_case()) {
    case kHandshakeMsg: {
      delete msg_.handshake_msg_;
      break;
    }
    case kGenericReply: {
      delete msg_.generic_reply_;
      break;
    }
    case kCreateSessionReply: {
      delete msg_.create_session_reply_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ServerMsg::Clear() {
  clear_msg();
}

bool ServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.ServerHandshake handshake_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handshake_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_generic_reply;
        break;
      }

      // optional .hotbox.GenericReply generic_reply = 2;
      case 2: {
        if (tag == 18) {
         parse_generic_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_session_reply;
        break;
      }

      // optional .hotbox.CreateSessionReply create_session_reply = 3;
      case 3: {
        if (tag == 26) {
         parse_create_session_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_session_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ServerMsg)
  return false;
#undef DO_
}

void ServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ServerMsg)
  // optional .hotbox.ServerHandshake handshake_msg = 1;
  if (has_handshake_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.handshake_msg_, output);
  }

  // optional .hotbox.GenericReply generic_reply = 2;
  if (has_generic_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.generic_reply_, output);
  }

  // optional .hotbox.CreateSessionReply create_session_reply = 3;
  if (has_create_session_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.create_session_reply_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ServerMsg)
}

::google::protobuf::uint8* ServerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ServerMsg)
  // optional .hotbox.ServerHandshake handshake_msg = 1;
  if (has_handshake_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *msg_.handshake_msg_, target);
  }

  // optional .hotbox.GenericReply generic_reply = 2;
  if (has_generic_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *msg_.generic_reply_, target);
  }

  // optional .hotbox.CreateSessionReply create_session_reply = 3;
  if (has_create_session_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *msg_.create_session_reply_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ServerMsg)
  return target;
}

int ServerMsg::ByteSize() const {
  int total_size = 0;

  switch (msg_case()) {
    // optional .hotbox.ServerHandshake handshake_msg = 1;
    case kHandshakeMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.handshake_msg_);
      break;
    }
    // optional .hotbox.GenericReply generic_reply = 2;
    case kGenericReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.generic_reply_);
      break;
    }
    // optional .hotbox.CreateSessionReply create_session_reply = 3;
    case kCreateSessionReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.create_session_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMsg::MergeFrom(const ServerMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.msg_case()) {
    case kHandshakeMsg: {
      mutable_handshake_msg()->::hotbox::ServerHandshake::MergeFrom(from.handshake_msg());
      break;
    }
    case kGenericReply: {
      mutable_generic_reply()->::hotbox::GenericReply::MergeFrom(from.generic_reply());
      break;
    }
    case kCreateSessionReply: {
      mutable_create_session_reply()->::hotbox::CreateSessionReply::MergeFrom(from.create_session_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMsg::CopyFrom(const ServerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsg::IsInitialized() const {

  return true;
}

void ServerMsg::Swap(ServerMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMsg::InternalSwap(ServerMsg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMsg_descriptor_;
  metadata.reflection = ServerMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerMsg

// optional .hotbox.ServerHandshake handshake_msg = 1;
bool ServerMsg::has_handshake_msg() const {
  return msg_case() == kHandshakeMsg;
}
void ServerMsg::set_has_handshake_msg() {
  _oneof_case_[0] = kHandshakeMsg;
}
void ServerMsg::clear_handshake_msg() {
  if (has_handshake_msg()) {
    delete msg_.handshake_msg_;
    clear_has_msg();
  }
}
 const ::hotbox::ServerHandshake& ServerMsg::handshake_msg() const {
  // @@protoc_insertion_point(field_get:hotbox.ServerMsg.handshake_msg)
  return has_handshake_msg()
      ? *msg_.handshake_msg_
      : ::hotbox::ServerHandshake::default_instance();
}
::hotbox::ServerHandshake* ServerMsg::mutable_handshake_msg() {
  if (!has_handshake_msg()) {
    clear_msg();
    set_has_handshake_msg();
    msg_.handshake_msg_ = new ::hotbox::ServerHandshake;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ServerMsg.handshake_msg)
  return msg_.handshake_msg_;
}
::hotbox::ServerHandshake* ServerMsg::release_handshake_msg() {
  if (has_handshake_msg()) {
    clear_has_msg();
    ::hotbox::ServerHandshake* temp = msg_.handshake_msg_;
    msg_.handshake_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerMsg::set_allocated_handshake_msg(::hotbox::ServerHandshake* handshake_msg) {
  clear_msg();
  if (handshake_msg) {
    set_has_handshake_msg();
    msg_.handshake_msg_ = handshake_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ServerMsg.handshake_msg)
}

// optional .hotbox.GenericReply generic_reply = 2;
bool ServerMsg::has_generic_reply() const {
  return msg_case() == kGenericReply;
}
void ServerMsg::set_has_generic_reply() {
  _oneof_case_[0] = kGenericReply;
}
void ServerMsg::clear_generic_reply() {
  if (has_generic_reply()) {
    delete msg_.generic_reply_;
    clear_has_msg();
  }
}
 const ::hotbox::GenericReply& ServerMsg::generic_reply() const {
  // @@protoc_insertion_point(field_get:hotbox.ServerMsg.generic_reply)
  return has_generic_reply()
      ? *msg_.generic_reply_
      : ::hotbox::GenericReply::default_instance();
}
::hotbox::GenericReply* ServerMsg::mutable_generic_reply() {
  if (!has_generic_reply()) {
    clear_msg();
    set_has_generic_reply();
    msg_.generic_reply_ = new ::hotbox::GenericReply;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ServerMsg.generic_reply)
  return msg_.generic_reply_;
}
::hotbox::GenericReply* ServerMsg::release_generic_reply() {
  if (has_generic_reply()) {
    clear_has_msg();
    ::hotbox::GenericReply* temp = msg_.generic_reply_;
    msg_.generic_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerMsg::set_allocated_generic_reply(::hotbox::GenericReply* generic_reply) {
  clear_msg();
  if (generic_reply) {
    set_has_generic_reply();
    msg_.generic_reply_ = generic_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ServerMsg.generic_reply)
}

// optional .hotbox.CreateSessionReply create_session_reply = 3;
bool ServerMsg::has_create_session_reply() const {
  return msg_case() == kCreateSessionReply;
}
void ServerMsg::set_has_create_session_reply() {
  _oneof_case_[0] = kCreateSessionReply;
}
void ServerMsg::clear_create_session_reply() {
  if (has_create_session_reply()) {
    delete msg_.create_session_reply_;
    clear_has_msg();
  }
}
 const ::hotbox::CreateSessionReply& ServerMsg::create_session_reply() const {
  // @@protoc_insertion_point(field_get:hotbox.ServerMsg.create_session_reply)
  return has_create_session_reply()
      ? *msg_.create_session_reply_
      : ::hotbox::CreateSessionReply::default_instance();
}
::hotbox::CreateSessionReply* ServerMsg::mutable_create_session_reply() {
  if (!has_create_session_reply()) {
    clear_msg();
    set_has_create_session_reply();
    msg_.create_session_reply_ = new ::hotbox::CreateSessionReply;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ServerMsg.create_session_reply)
  return msg_.create_session_reply_;
}
::hotbox::CreateSessionReply* ServerMsg::release_create_session_reply() {
  if (has_create_session_reply()) {
    clear_has_msg();
    ::hotbox::CreateSessionReply* temp = msg_.create_session_reply_;
    msg_.create_session_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServerMsg::set_allocated_create_session_reply(::hotbox::CreateSessionReply* create_session_reply) {
  clear_msg();
  if (create_session_reply) {
    set_has_create_session_reply();
    msg_.create_session_reply_ = create_session_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ServerMsg.create_session_reply)
}

bool ServerMsg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void ServerMsg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
ServerMsg::MsgCase ServerMsg::msg_case() const {
  return ServerMsg::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerHandshake::kClientIdFieldNumber;
#endif  // !_MSC_VER

ServerHandshake::ServerHandshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ServerHandshake)
}

void ServerHandshake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServerHandshake::ServerHandshake(const ServerHandshake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ServerHandshake)
}

void ServerHandshake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  client_id_ = 0;
}

ServerHandshake::~ServerHandshake() {
  // @@protoc_insertion_point(destructor:hotbox.ServerHandshake)
  SharedDtor();
}

void ServerHandshake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerHandshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerHandshake_descriptor_;
}

const ServerHandshake& ServerHandshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

ServerHandshake* ServerHandshake::default_instance_ = NULL;

ServerHandshake* ServerHandshake::New(::google::protobuf::Arena* arena) const {
  ServerHandshake* n = new ServerHandshake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerHandshake::Clear() {
  client_id_ = 0;
}

bool ServerHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ServerHandshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ServerHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ServerHandshake)
  return false;
#undef DO_
}

void ServerHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ServerHandshake)
  // optional int32 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ServerHandshake)
}

::google::protobuf::uint8* ServerHandshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ServerHandshake)
  // optional int32 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ServerHandshake)
  return target;
}

int ServerHandshake::ByteSize() const {
  int total_size = 0;

  // optional int32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerHandshake::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerHandshake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerHandshake>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerHandshake::MergeFrom(const ServerHandshake& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
}

void ServerHandshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHandshake::CopyFrom(const ServerHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHandshake::IsInitialized() const {

  return true;
}

void ServerHandshake::Swap(ServerHandshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerHandshake::InternalSwap(ServerHandshake* other) {
  std::swap(client_id_, other->client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerHandshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerHandshake_descriptor_;
  metadata.reflection = ServerHandshake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerHandshake

// optional int32 client_id = 1;
void ServerHandshake::clear_client_id() {
  client_id_ = 0;
}
 ::google::protobuf::int32 ServerHandshake::client_id() const {
  // @@protoc_insertion_point(field_get:hotbox.ServerHandshake.client_id)
  return client_id_;
}
 void ServerHandshake::set_client_id(::google::protobuf::int32 value) {
  
  client_id_ = value;
  // @@protoc_insertion_point(field_set:hotbox.ServerHandshake.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ClientHandshake::kDummyFieldNumber;
#endif  // !_MSC_VER

ClientHandshake::ClientHandshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ClientHandshake)
}

void ClientHandshake::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClientHandshake::ClientHandshake(const ClientHandshake& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ClientHandshake)
}

void ClientHandshake::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dummy_ = false;
}

ClientHandshake::~ClientHandshake() {
  // @@protoc_insertion_point(destructor:hotbox.ClientHandshake)
  SharedDtor();
}

void ClientHandshake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHandshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHandshake_descriptor_;
}

const ClientHandshake& ClientHandshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

ClientHandshake* ClientHandshake::default_instance_ = NULL;

ClientHandshake* ClientHandshake::New(::google::protobuf::Arena* arena) const {
  ClientHandshake* n = new ClientHandshake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientHandshake::Clear() {
  dummy_ = false;
}

bool ClientHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ClientHandshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dummy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dummy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ClientHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ClientHandshake)
  return false;
#undef DO_
}

void ClientHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ClientHandshake)
  // optional bool dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ClientHandshake)
}

::google::protobuf::uint8* ClientHandshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ClientHandshake)
  // optional bool dummy = 1;
  if (this->dummy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dummy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ClientHandshake)
  return target;
}

int ClientHandshake::ByteSize() const {
  int total_size = 0;

  // optional bool dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHandshake::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientHandshake* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientHandshake>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHandshake::MergeFrom(const ClientHandshake& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void ClientHandshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHandshake::CopyFrom(const ClientHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHandshake::IsInitialized() const {

  return true;
}

void ClientHandshake::Swap(ClientHandshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientHandshake::InternalSwap(ClientHandshake* other) {
  std::swap(dummy_, other->dummy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientHandshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHandshake_descriptor_;
  metadata.reflection = ClientHandshake_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientHandshake

// optional bool dummy = 1;
void ClientHandshake::clear_dummy() {
  dummy_ = false;
}
 bool ClientHandshake::dummy() const {
  // @@protoc_insertion_point(field_get:hotbox.ClientHandshake.dummy)
  return dummy_;
}
 void ClientHandshake::set_dummy(bool value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:hotbox.ClientHandshake.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GenericRequest::kReqFieldNumber;
#endif  // !_MSC_VER

GenericRequest::GenericRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.GenericRequest)
}

void GenericRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GenericRequest::GenericRequest(const GenericRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.GenericRequest)
}

void GenericRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GenericRequest::~GenericRequest() {
  // @@protoc_insertion_point(destructor:hotbox.GenericRequest)
  SharedDtor();
}

void GenericRequest::SharedDtor() {
  req_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GenericRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericRequest_descriptor_;
}

const GenericRequest& GenericRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

GenericRequest* GenericRequest::default_instance_ = NULL;

GenericRequest* GenericRequest::New(::google::protobuf::Arena* arena) const {
  GenericRequest* n = new GenericRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericRequest::Clear() {
  req_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GenericRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.GenericRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->req().data(), this->req().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.GenericRequest.req"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.GenericRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.GenericRequest)
  return false;
#undef DO_
}

void GenericRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.GenericRequest)
  // optional string req = 1;
  if (this->req().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req().data(), this->req().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.GenericRequest.req");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->req(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.GenericRequest)
}

::google::protobuf::uint8* GenericRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.GenericRequest)
  // optional string req = 1;
  if (this->req().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req().data(), this->req().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.GenericRequest.req");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.GenericRequest)
  return target;
}

int GenericRequest::ByteSize() const {
  int total_size = 0;

  // optional string req = 1;
  if (this->req().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->req());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GenericRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.req().size() > 0) {

    req_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_);
  }
}

void GenericRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {

  return true;
}

void GenericRequest::Swap(GenericRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericRequest::InternalSwap(GenericRequest* other) {
  req_.Swap(&other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericRequest_descriptor_;
  metadata.reflection = GenericRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericRequest

// optional string req = 1;
void GenericRequest::clear_req() {
  req_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GenericRequest::req() const {
  // @@protoc_insertion_point(field_get:hotbox.GenericRequest.req)
  return req_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericRequest::set_req(const ::std::string& value) {
  
  req_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.GenericRequest.req)
}
 void GenericRequest::set_req(const char* value) {
  
  req_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.GenericRequest.req)
}
 void GenericRequest::set_req(const char* value, size_t size) {
  
  req_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.GenericRequest.req)
}
 ::std::string* GenericRequest::mutable_req() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.GenericRequest.req)
  return req_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GenericRequest::release_req() {
  
  return req_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericRequest::set_allocated_req(::std::string* req) {
  if (req != NULL) {
    
  } else {
    
  }
  req_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req);
  // @@protoc_insertion_point(field_set_allocated:hotbox.GenericRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GenericReply::kMsgFieldNumber;
#endif  // !_MSC_VER

GenericReply::GenericReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.GenericReply)
}

void GenericReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GenericReply::GenericReply(const GenericReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.GenericReply)
}

void GenericReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GenericReply::~GenericReply() {
  // @@protoc_insertion_point(destructor:hotbox.GenericReply)
  SharedDtor();
}

void GenericReply::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GenericReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericReply_descriptor_;
}

const GenericReply& GenericReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

GenericReply* GenericReply::default_instance_ = NULL;

GenericReply* GenericReply::New(::google::protobuf::Arena* arena) const {
  GenericReply* n = new GenericReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericReply::Clear() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GenericReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.GenericReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.GenericReply.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.GenericReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.GenericReply)
  return false;
#undef DO_
}

void GenericReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.GenericReply)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.GenericReply.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.GenericReply)
}

::google::protobuf::uint8* GenericReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.GenericReply)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.GenericReply.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.GenericReply)
  return target;
}

int GenericReply::ByteSize() const {
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GenericReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericReply::MergeFrom(const GenericReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GenericReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericReply::CopyFrom(const GenericReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericReply::IsInitialized() const {

  return true;
}

void GenericReply::Swap(GenericReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericReply::InternalSwap(GenericReply* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericReply_descriptor_;
  metadata.reflection = GenericReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericReply

// optional string msg = 1;
void GenericReply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GenericReply::msg() const {
  // @@protoc_insertion_point(field_get:hotbox.GenericReply.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericReply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.GenericReply.msg)
}
 void GenericReply::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.GenericReply.msg)
}
 void GenericReply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.GenericReply.msg)
}
 ::std::string* GenericReply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.GenericReply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GenericReply::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericReply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hotbox.GenericReply.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CreateDBReq::kDbConfigFieldNumber;
#endif  // !_MSC_VER

CreateDBReq::CreateDBReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.CreateDBReq)
}

void CreateDBReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  db_config_ = const_cast< ::hotbox::DBConfig*>(&::hotbox::DBConfig::default_instance());
}

CreateDBReq::CreateDBReq(const CreateDBReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.CreateDBReq)
}

void CreateDBReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  db_config_ = NULL;
}

CreateDBReq::~CreateDBReq() {
  // @@protoc_insertion_point(destructor:hotbox.CreateDBReq)
  SharedDtor();
}

void CreateDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete db_config_;
  }
}

void CreateDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDBReq_descriptor_;
}

const CreateDBReq& CreateDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

CreateDBReq* CreateDBReq::default_instance_ = NULL;

CreateDBReq* CreateDBReq::New(::google::protobuf::Arena* arena) const {
  CreateDBReq* n = new CreateDBReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDBReq::Clear() {
  if (GetArenaNoVirtual() == NULL && db_config_ != NULL) delete db_config_;
  db_config_ = NULL;
}

bool CreateDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.CreateDBReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.DBConfig db_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.CreateDBReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.CreateDBReq)
  return false;
#undef DO_
}

void CreateDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.CreateDBReq)
  // optional .hotbox.DBConfig db_config = 1;
  if (this->has_db_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->db_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.CreateDBReq)
}

::google::protobuf::uint8* CreateDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.CreateDBReq)
  // optional .hotbox.DBConfig db_config = 1;
  if (this->has_db_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->db_config_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.CreateDBReq)
  return target;
}

int CreateDBReq::ByteSize() const {
  int total_size = 0;

  // optional .hotbox.DBConfig db_config = 1;
  if (this->has_db_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->db_config_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateDBReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDBReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDBReq::MergeFrom(const CreateDBReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_db_config()) {
    mutable_db_config()->::hotbox::DBConfig::MergeFrom(from.db_config());
  }
}

void CreateDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDBReq::CopyFrom(const CreateDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDBReq::IsInitialized() const {

  return true;
}

void CreateDBReq::Swap(CreateDBReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDBReq::InternalSwap(CreateDBReq* other) {
  std::swap(db_config_, other->db_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDBReq_descriptor_;
  metadata.reflection = CreateDBReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDBReq

// optional .hotbox.DBConfig db_config = 1;
bool CreateDBReq::has_db_config() const {
  return !_is_default_instance_ && db_config_ != NULL;
}
void CreateDBReq::clear_db_config() {
  if (GetArenaNoVirtual() == NULL && db_config_ != NULL) delete db_config_;
  db_config_ = NULL;
}
const ::hotbox::DBConfig& CreateDBReq::db_config() const {
  // @@protoc_insertion_point(field_get:hotbox.CreateDBReq.db_config)
  return db_config_ != NULL ? *db_config_ : *default_instance_->db_config_;
}
::hotbox::DBConfig* CreateDBReq::mutable_db_config() {
  
  if (db_config_ == NULL) {
    db_config_ = new ::hotbox::DBConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.CreateDBReq.db_config)
  return db_config_;
}
::hotbox::DBConfig* CreateDBReq::release_db_config() {
  
  ::hotbox::DBConfig* temp = db_config_;
  db_config_ = NULL;
  return temp;
}
void CreateDBReq::set_allocated_db_config(::hotbox::DBConfig* db_config) {
  delete db_config_;
  db_config_ = db_config;
  if (db_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.CreateDBReq.db_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ReadFileReq::kDbNameFieldNumber;
const int ReadFileReq::kFilePathFieldNumber;
const int ReadFileReq::kFileFormatFieldNumber;
const int ReadFileReq::kHeaderFieldNumber;
const int ReadFileReq::kParserConfigFieldNumber;
#endif  // !_MSC_VER

ReadFileReq::ReadFileReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ReadFileReq)
}

void ReadFileReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  parser_config_ = const_cast< ::hotbox::ParserConfig*>(&::hotbox::ParserConfig::default_instance());
}

ReadFileReq::ReadFileReq(const ReadFileReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ReadFileReq)
}

void ReadFileReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_ = 0;
  header_ = 0;
  parser_config_ = NULL;
}

ReadFileReq::~ReadFileReq() {
  // @@protoc_insertion_point(destructor:hotbox.ReadFileReq)
  SharedDtor();
}

void ReadFileReq::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete parser_config_;
  }
}

void ReadFileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadFileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadFileReq_descriptor_;
}

const ReadFileReq& ReadFileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

ReadFileReq* ReadFileReq::default_instance_ = NULL;

ReadFileReq* ReadFileReq::New(::google::protobuf::Arena* arena) const {
  ReadFileReq* n = new ReadFileReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadFileReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReadFileReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(file_format_, header_);
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && parser_config_ != NULL) delete parser_config_;
  parser_config_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ReadFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ReadFileReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.ReadFileReq.db_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_path;
        break;
      }

      // optional string file_path = 2;
      case 2: {
        if (tag == 18) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.ReadFileReq.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_format;
        break;
      }

      // optional .hotbox.FileFormat file_format = 3;
      case 3: {
        if (tag == 24) {
         parse_file_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_file_format(static_cast< ::hotbox::FileFormat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_header;
        break;
      }

      // optional int32 header = 4;
      case 4: {
        if (tag == 32) {
         parse_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_parser_config;
        break;
      }

      // optional .hotbox.ParserConfig parser_config = 5;
      case 5: {
        if (tag == 42) {
         parse_parser_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parser_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ReadFileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ReadFileReq)
  return false;
#undef DO_
}

void ReadFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ReadFileReq)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.ReadFileReq.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // optional string file_path = 2;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.ReadFileReq.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  // optional .hotbox.FileFormat file_format = 3;
  if (this->file_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->file_format(), output);
  }

  // optional int32 header = 4;
  if (this->header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->header(), output);
  }

  // optional .hotbox.ParserConfig parser_config = 5;
  if (this->has_parser_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->parser_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ReadFileReq)
}

::google::protobuf::uint8* ReadFileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ReadFileReq)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.ReadFileReq.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // optional string file_path = 2;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.ReadFileReq.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }

  // optional .hotbox.FileFormat file_format = 3;
  if (this->file_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->file_format(), target);
  }

  // optional int32 header = 4;
  if (this->header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->header(), target);
  }

  // optional .hotbox.ParserConfig parser_config = 5;
  if (this->has_parser_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->parser_config_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ReadFileReq)
  return target;
}

int ReadFileReq::ByteSize() const {
  int total_size = 0;

  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // optional string file_path = 2;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // optional .hotbox.FileFormat file_format = 3;
  if (this->file_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_format());
  }

  // optional int32 header = 4;
  if (this->header() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->header());
  }

  // optional .hotbox.ParserConfig parser_config = 5;
  if (this->has_parser_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parser_config_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadFileReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadFileReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadFileReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadFileReq::MergeFrom(const ReadFileReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.file_format() != 0) {
    set_file_format(from.file_format());
  }
  if (from.header() != 0) {
    set_header(from.header());
  }
  if (from.has_parser_config()) {
    mutable_parser_config()->::hotbox::ParserConfig::MergeFrom(from.parser_config());
  }
}

void ReadFileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadFileReq::CopyFrom(const ReadFileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFileReq::IsInitialized() const {

  return true;
}

void ReadFileReq::Swap(ReadFileReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadFileReq::InternalSwap(ReadFileReq* other) {
  db_name_.Swap(&other->db_name_);
  file_path_.Swap(&other->file_path_);
  std::swap(file_format_, other->file_format_);
  std::swap(header_, other->header_);
  std::swap(parser_config_, other->parser_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadFileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadFileReq_descriptor_;
  metadata.reflection = ReadFileReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadFileReq

// optional string db_name = 1;
void ReadFileReq::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadFileReq::db_name() const {
  // @@protoc_insertion_point(field_get:hotbox.ReadFileReq.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadFileReq::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.ReadFileReq.db_name)
}
 void ReadFileReq::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.ReadFileReq.db_name)
}
 void ReadFileReq::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.ReadFileReq.db_name)
}
 ::std::string* ReadFileReq::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.ReadFileReq.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadFileReq::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadFileReq::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.ReadFileReq.db_name)
}

// optional string file_path = 2;
void ReadFileReq::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadFileReq::file_path() const {
  // @@protoc_insertion_point(field_get:hotbox.ReadFileReq.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadFileReq::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.ReadFileReq.file_path)
}
 void ReadFileReq::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.ReadFileReq.file_path)
}
 void ReadFileReq::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.ReadFileReq.file_path)
}
 ::std::string* ReadFileReq::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.ReadFileReq.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadFileReq::release_file_path() {
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadFileReq::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:hotbox.ReadFileReq.file_path)
}

// optional .hotbox.FileFormat file_format = 3;
void ReadFileReq::clear_file_format() {
  file_format_ = 0;
}
 ::hotbox::FileFormat ReadFileReq::file_format() const {
  // @@protoc_insertion_point(field_get:hotbox.ReadFileReq.file_format)
  return static_cast< ::hotbox::FileFormat >(file_format_);
}
 void ReadFileReq::set_file_format(::hotbox::FileFormat value) {
  
  file_format_ = value;
  // @@protoc_insertion_point(field_set:hotbox.ReadFileReq.file_format)
}

// optional int32 header = 4;
void ReadFileReq::clear_header() {
  header_ = 0;
}
 ::google::protobuf::int32 ReadFileReq::header() const {
  // @@protoc_insertion_point(field_get:hotbox.ReadFileReq.header)
  return header_;
}
 void ReadFileReq::set_header(::google::protobuf::int32 value) {
  
  header_ = value;
  // @@protoc_insertion_point(field_set:hotbox.ReadFileReq.header)
}

// optional .hotbox.ParserConfig parser_config = 5;
bool ReadFileReq::has_parser_config() const {
  return !_is_default_instance_ && parser_config_ != NULL;
}
void ReadFileReq::clear_parser_config() {
  if (GetArenaNoVirtual() == NULL && parser_config_ != NULL) delete parser_config_;
  parser_config_ = NULL;
}
const ::hotbox::ParserConfig& ReadFileReq::parser_config() const {
  // @@protoc_insertion_point(field_get:hotbox.ReadFileReq.parser_config)
  return parser_config_ != NULL ? *parser_config_ : *default_instance_->parser_config_;
}
::hotbox::ParserConfig* ReadFileReq::mutable_parser_config() {
  
  if (parser_config_ == NULL) {
    parser_config_ = new ::hotbox::ParserConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ReadFileReq.parser_config)
  return parser_config_;
}
::hotbox::ParserConfig* ReadFileReq::release_parser_config() {
  
  ::hotbox::ParserConfig* temp = parser_config_;
  parser_config_ = NULL;
  return temp;
}
void ReadFileReq::set_allocated_parser_config(::hotbox::ParserConfig* parser_config) {
  delete parser_config_;
  parser_config_ = parser_config;
  if (parser_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ReadFileReq.parser_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DBServerShutdownReq::DBServerShutdownReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBServerShutdownReq)
}

void DBServerShutdownReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DBServerShutdownReq::DBServerShutdownReq(const DBServerShutdownReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBServerShutdownReq)
}

void DBServerShutdownReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DBServerShutdownReq::~DBServerShutdownReq() {
  // @@protoc_insertion_point(destructor:hotbox.DBServerShutdownReq)
  SharedDtor();
}

void DBServerShutdownReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBServerShutdownReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBServerShutdownReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBServerShutdownReq_descriptor_;
}

const DBServerShutdownReq& DBServerShutdownReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

DBServerShutdownReq* DBServerShutdownReq::default_instance_ = NULL;

DBServerShutdownReq* DBServerShutdownReq::New(::google::protobuf::Arena* arena) const {
  DBServerShutdownReq* n = new DBServerShutdownReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBServerShutdownReq::Clear() {
}

bool DBServerShutdownReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBServerShutdownReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBServerShutdownReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBServerShutdownReq)
  return false;
#undef DO_
}

void DBServerShutdownReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBServerShutdownReq)
  // @@protoc_insertion_point(serialize_end:hotbox.DBServerShutdownReq)
}

::google::protobuf::uint8* DBServerShutdownReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBServerShutdownReq)
  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBServerShutdownReq)
  return target;
}

int DBServerShutdownReq::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBServerShutdownReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBServerShutdownReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBServerShutdownReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBServerShutdownReq::MergeFrom(const DBServerShutdownReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void DBServerShutdownReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBServerShutdownReq::CopyFrom(const DBServerShutdownReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBServerShutdownReq::IsInitialized() const {

  return true;
}

void DBServerShutdownReq::Swap(DBServerShutdownReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBServerShutdownReq::InternalSwap(DBServerShutdownReq* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBServerShutdownReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBServerShutdownReq_descriptor_;
  metadata.reflection = DBServerShutdownReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBServerShutdownReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CreateSessionReq::kSessionOptionsFieldNumber;
#endif  // !_MSC_VER

CreateSessionReq::CreateSessionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.CreateSessionReq)
}

void CreateSessionReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  session_options_ = const_cast< ::hotbox::SessionOptionsProto*>(&::hotbox::SessionOptionsProto::default_instance());
}

CreateSessionReq::CreateSessionReq(const CreateSessionReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.CreateSessionReq)
}

void CreateSessionReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  session_options_ = NULL;
}

CreateSessionReq::~CreateSessionReq() {
  // @@protoc_insertion_point(destructor:hotbox.CreateSessionReq)
  SharedDtor();
}

void CreateSessionReq::SharedDtor() {
  if (this != default_instance_) {
    delete session_options_;
  }
}

void CreateSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionReq_descriptor_;
}

const CreateSessionReq& CreateSessionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

CreateSessionReq* CreateSessionReq::default_instance_ = NULL;

CreateSessionReq* CreateSessionReq::New(::google::protobuf::Arena* arena) const {
  CreateSessionReq* n = new CreateSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionReq::Clear() {
  if (GetArenaNoVirtual() == NULL && session_options_ != NULL) delete session_options_;
  session_options_ = NULL;
}

bool CreateSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.CreateSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.SessionOptionsProto session_options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.CreateSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.CreateSessionReq)
  return false;
#undef DO_
}

void CreateSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.CreateSessionReq)
  // optional .hotbox.SessionOptionsProto session_options = 1;
  if (this->has_session_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.CreateSessionReq)
}

::google::protobuf::uint8* CreateSessionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.CreateSessionReq)
  // optional .hotbox.SessionOptionsProto session_options = 1;
  if (this->has_session_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->session_options_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.CreateSessionReq)
  return target;
}

int CreateSessionReq::ByteSize() const {
  int total_size = 0;

  // optional .hotbox.SessionOptionsProto session_options = 1;
  if (this->has_session_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateSessionReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSessionReq::MergeFrom(const CreateSessionReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_session_options()) {
    mutable_session_options()->::hotbox::SessionOptionsProto::MergeFrom(from.session_options());
  }
}

void CreateSessionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionReq::CopyFrom(const CreateSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionReq::IsInitialized() const {

  return true;
}

void CreateSessionReq::Swap(CreateSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionReq::InternalSwap(CreateSessionReq* other) {
  std::swap(session_options_, other->session_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionReq_descriptor_;
  metadata.reflection = CreateSessionReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionReq

// optional .hotbox.SessionOptionsProto session_options = 1;
bool CreateSessionReq::has_session_options() const {
  return !_is_default_instance_ && session_options_ != NULL;
}
void CreateSessionReq::clear_session_options() {
  if (GetArenaNoVirtual() == NULL && session_options_ != NULL) delete session_options_;
  session_options_ = NULL;
}
const ::hotbox::SessionOptionsProto& CreateSessionReq::session_options() const {
  // @@protoc_insertion_point(field_get:hotbox.CreateSessionReq.session_options)
  return session_options_ != NULL ? *session_options_ : *default_instance_->session_options_;
}
::hotbox::SessionOptionsProto* CreateSessionReq::mutable_session_options() {
  
  if (session_options_ == NULL) {
    session_options_ = new ::hotbox::SessionOptionsProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.CreateSessionReq.session_options)
  return session_options_;
}
::hotbox::SessionOptionsProto* CreateSessionReq::release_session_options() {
  
  ::hotbox::SessionOptionsProto* temp = session_options_;
  session_options_ = NULL;
  return temp;
}
void CreateSessionReq::set_allocated_session_options(::hotbox::SessionOptionsProto* session_options) {
  delete session_options_;
  session_options_ = session_options;
  if (session_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.CreateSessionReq.session_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CreateSessionReply::kMsgFieldNumber;
const int CreateSessionReply::kStatusCodeFieldNumber;
const int CreateSessionReply::kSessionProtoFieldNumber;
#endif  // !_MSC_VER

CreateSessionReply::CreateSessionReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.CreateSessionReply)
}

void CreateSessionReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  session_proto_ = const_cast< ::hotbox::SessionProto*>(&::hotbox::SessionProto::default_instance());
}

CreateSessionReply::CreateSessionReply(const CreateSessionReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.CreateSessionReply)
}

void CreateSessionReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
  session_proto_ = NULL;
}

CreateSessionReply::~CreateSessionReply() {
  // @@protoc_insertion_point(destructor:hotbox.CreateSessionReply)
  SharedDtor();
}

void CreateSessionReply::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete session_proto_;
  }
}

void CreateSessionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionReply_descriptor_;
}

const CreateSessionReply& CreateSessionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

CreateSessionReply* CreateSessionReply::default_instance_ = NULL;

CreateSessionReply* CreateSessionReply::New(::google::protobuf::Arena* arena) const {
  CreateSessionReply* n = new CreateSessionReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionReply::Clear() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
  if (GetArenaNoVirtual() == NULL && session_proto_ != NULL) delete session_proto_;
  session_proto_ = NULL;
}

bool CreateSessionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.CreateSessionReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.CreateSessionReply.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status_code;
        break;
      }

      // optional .hotbox.StatusCode status_code = 2;
      case 2: {
        if (tag == 16) {
         parse_status_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status_code(static_cast< ::hotbox::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_proto;
        break;
      }

      // optional .hotbox.SessionProto session_proto = 3;
      case 3: {
        if (tag == 26) {
         parse_session_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_proto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.CreateSessionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.CreateSessionReply)
  return false;
#undef DO_
}

void CreateSessionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.CreateSessionReply)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.CreateSessionReply.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional .hotbox.StatusCode status_code = 2;
  if (this->status_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status_code(), output);
  }

  // optional .hotbox.SessionProto session_proto = 3;
  if (this->has_session_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->session_proto_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.CreateSessionReply)
}

::google::protobuf::uint8* CreateSessionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.CreateSessionReply)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.CreateSessionReply.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional .hotbox.StatusCode status_code = 2;
  if (this->status_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status_code(), target);
  }

  // optional .hotbox.SessionProto session_proto = 3;
  if (this->has_session_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->session_proto_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.CreateSessionReply)
  return target;
}

int CreateSessionReply::ByteSize() const {
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional .hotbox.StatusCode status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  // optional .hotbox.SessionProto session_proto = 3;
  if (this->has_session_proto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_proto_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateSessionReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSessionReply::MergeFrom(const CreateSessionReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
  if (from.has_session_proto()) {
    mutable_session_proto()->::hotbox::SessionProto::MergeFrom(from.session_proto());
  }
}

void CreateSessionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionReply::CopyFrom(const CreateSessionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionReply::IsInitialized() const {

  return true;
}

void CreateSessionReply::Swap(CreateSessionReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionReply::InternalSwap(CreateSessionReply* other) {
  msg_.Swap(&other->msg_);
  std::swap(status_code_, other->status_code_);
  std::swap(session_proto_, other->session_proto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionReply_descriptor_;
  metadata.reflection = CreateSessionReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionReply

// optional string msg = 1;
void CreateSessionReply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateSessionReply::msg() const {
  // @@protoc_insertion_point(field_get:hotbox.CreateSessionReply.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionReply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.CreateSessionReply.msg)
}
 void CreateSessionReply::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.CreateSessionReply.msg)
}
 void CreateSessionReply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.CreateSessionReply.msg)
}
 ::std::string* CreateSessionReply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.CreateSessionReply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateSessionReply::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionReply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hotbox.CreateSessionReply.msg)
}

// optional .hotbox.StatusCode status_code = 2;
void CreateSessionReply::clear_status_code() {
  status_code_ = 0;
}
 ::hotbox::StatusCode CreateSessionReply::status_code() const {
  // @@protoc_insertion_point(field_get:hotbox.CreateSessionReply.status_code)
  return static_cast< ::hotbox::StatusCode >(status_code_);
}
 void CreateSessionReply::set_status_code(::hotbox::StatusCode value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:hotbox.CreateSessionReply.status_code)
}

// optional .hotbox.SessionProto session_proto = 3;
bool CreateSessionReply::has_session_proto() const {
  return !_is_default_instance_ && session_proto_ != NULL;
}
void CreateSessionReply::clear_session_proto() {
  if (GetArenaNoVirtual() == NULL && session_proto_ != NULL) delete session_proto_;
  session_proto_ = NULL;
}
const ::hotbox::SessionProto& CreateSessionReply::session_proto() const {
  // @@protoc_insertion_point(field_get:hotbox.CreateSessionReply.session_proto)
  return session_proto_ != NULL ? *session_proto_ : *default_instance_->session_proto_;
}
::hotbox::SessionProto* CreateSessionReply::mutable_session_proto() {
  
  if (session_proto_ == NULL) {
    session_proto_ = new ::hotbox::SessionProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.CreateSessionReply.session_proto)
  return session_proto_;
}
::hotbox::SessionProto* CreateSessionReply::release_session_proto() {
  
  ::hotbox::SessionProto* temp = session_proto_;
  session_proto_ = NULL;
  return temp;
}
void CreateSessionReply::set_allocated_session_proto(::hotbox::SessionProto* session_proto) {
  delete session_proto_;
  session_proto_ = session_proto;
  if (session_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.CreateSessionReply.session_proto)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CloseSessionReq::kSessionIdFieldNumber;
#endif  // !_MSC_VER

CloseSessionReq::CloseSessionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.CloseSessionReq)
}

void CloseSessionReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseSessionReq::CloseSessionReq(const CloseSessionReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.CloseSessionReq)
}

void CloseSessionReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloseSessionReq::~CloseSessionReq() {
  // @@protoc_insertion_point(destructor:hotbox.CloseSessionReq)
  SharedDtor();
}

void CloseSessionReq::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CloseSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseSessionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseSessionReq_descriptor_;
}

const CloseSessionReq& CloseSessionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fwarp_5fmsg_2eproto();
  return *default_instance_;
}

CloseSessionReq* CloseSessionReq::default_instance_ = NULL;

CloseSessionReq* CloseSessionReq::New(::google::protobuf::Arena* arena) const {
  CloseSessionReq* n = new CloseSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseSessionReq::Clear() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloseSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.CloseSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.CloseSessionReq.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.CloseSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.CloseSessionReq)
  return false;
#undef DO_
}

void CloseSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.CloseSessionReq)
  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.CloseSessionReq.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.CloseSessionReq)
}

::google::protobuf::uint8* CloseSessionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.CloseSessionReq)
  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.CloseSessionReq.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.CloseSessionReq)
  return target;
}

int CloseSessionReq::ByteSize() const {
  int total_size = 0;

  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseSessionReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloseSessionReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseSessionReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseSessionReq::MergeFrom(const CloseSessionReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void CloseSessionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionReq::CopyFrom(const CloseSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionReq::IsInitialized() const {

  return true;
}

void CloseSessionReq::Swap(CloseSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseSessionReq::InternalSwap(CloseSessionReq* other) {
  session_id_.Swap(&other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseSessionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseSessionReq_descriptor_;
  metadata.reflection = CloseSessionReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseSessionReq

// optional string session_id = 1;
void CloseSessionReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloseSessionReq::session_id() const {
  // @@protoc_insertion_point(field_get:hotbox.CloseSessionReq.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseSessionReq::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.CloseSessionReq.session_id)
}
 void CloseSessionReq::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.CloseSessionReq.session_id)
}
 void CloseSessionReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.CloseSessionReq.session_id)
}
 ::std::string* CloseSessionReq::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.CloseSessionReq.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloseSessionReq::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseSessionReq::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hotbox.CloseSessionReq.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)
