// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/proto/util.proto

#ifndef PROTOBUF_util_2fproto_2futil_2eproto__INCLUDED
#define PROTOBUF_util_2fproto_2futil_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_util_2fproto_2futil_2eproto();
void protobuf_AssignDesc_util_2fproto_2futil_2eproto();
void protobuf_ShutdownFile_util_2fproto_2futil_2eproto();


enum Compressor {
  SNAPPY = 0,
  NO_COMPRESS = 1,
  Compressor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Compressor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Compressor_IsValid(int value);
const Compressor Compressor_MIN = SNAPPY;
const Compressor Compressor_MAX = NO_COMPRESS;
const int Compressor_ARRAYSIZE = Compressor_MAX + 1;

const ::google::protobuf::EnumDescriptor* Compressor_descriptor();
inline const ::std::string& Compressor_Name(Compressor value) {
  return ::google::protobuf::internal::NameOfEnum(
    Compressor_descriptor(), value);
}
inline bool Compressor_Parse(
    const ::std::string& name, Compressor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Compressor>(
    Compressor_descriptor(), name, value);
}
enum FileFormat {
  UNKNOWN_FILE_FORMAT = 0,
  LIBSVM = 1,
  CSV = 2,
  FAMILY = 3,
  FileFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileFormat_IsValid(int value);
const FileFormat FileFormat_MIN = UNKNOWN_FILE_FORMAT;
const FileFormat FileFormat_MAX = FAMILY;
const int FileFormat_ARRAYSIZE = FileFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileFormat_descriptor();
inline const ::std::string& FileFormat_Name(FileFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileFormat_descriptor(), value);
}
inline bool FileFormat_Parse(
    const ::std::string& name, FileFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileFormat>(
    FileFormat_descriptor(), name, value);
}
enum StatusCode {
  OK = 0,
  DB_NOT_FOUND = 1,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = OK;
const StatusCode StatusCode_MAX = DB_NOT_FOUND;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hotbox::Compressor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::Compressor>() {
  return ::hotbox::Compressor_descriptor();
}
template <> struct is_proto_enum< ::hotbox::FileFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::FileFormat>() {
  return ::hotbox::FileFormat_descriptor();
}
template <> struct is_proto_enum< ::hotbox::StatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::StatusCode>() {
  return ::hotbox::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_util_2fproto_2futil_2eproto__INCLUDED
