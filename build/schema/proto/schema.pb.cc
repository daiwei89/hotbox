// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema/proto/schema.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "schema/proto/schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

namespace {

const ::google::protobuf::Descriptor* FeatureStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatumProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatumProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatumProto_SparseCatStoreEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DatumProto_SparseNumStoreEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DatumProto_SparseBytesStoreEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DatumProtoStoreOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatumProtoStoreOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureFamilyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureFamilyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureFamilyProto_NameToFamilyIdxEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SelfContainedFeatureFamilyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfContainedFeatureFamilyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SchemaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemaProto_FamiliesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OSchemaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OSchemaProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OutputStoreType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureIndexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureStoreType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto() {
  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "schema/proto/schema.proto");
  GOOGLE_CHECK(file != NULL);
  FeatureStatProto_descriptor_ = file->message_type(0);
  static const int FeatureStatProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, unique_cat_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, unique_bytes_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, sum_),
  };
  FeatureStatProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureStatProto_descriptor_,
      FeatureStatProto::default_instance_,
      FeatureStatProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureStatProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, _is_default_instance_));
  Feature_descriptor_ = file->message_type(1);
  static const int Feature_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, store_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, store_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, global_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, is_factor_),
  };
  Feature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feature_descriptor_,
      Feature::default_instance_,
      Feature_offsets_,
      -1,
      -1,
      -1,
      sizeof(Feature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _is_default_instance_));
  DatumProto_descriptor_ = file->message_type(2);
  static const int DatumProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, dense_cat_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, dense_num_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, dense_bytes_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, sparse_cat_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, sparse_num_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, sparse_bytes_store_),
  };
  DatumProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DatumProto_descriptor_,
      DatumProto::default_instance_,
      DatumProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(DatumProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProto, _is_default_instance_));
  DatumProto_SparseCatStoreEntry_descriptor_ = DatumProto_descriptor_->nested_type(0);
  DatumProto_SparseNumStoreEntry_descriptor_ = DatumProto_descriptor_->nested_type(1);
  DatumProto_SparseBytesStoreEntry_descriptor_ = DatumProto_descriptor_->nested_type(2);
  DatumProtoStoreOffset_descriptor_ = file->message_type(3);
  static const int DatumProtoStoreOffset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProtoStoreOffset, offsets_),
  };
  DatumProtoStoreOffset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DatumProtoStoreOffset_descriptor_,
      DatumProtoStoreOffset::default_instance_,
      DatumProtoStoreOffset_offsets_,
      -1,
      -1,
      -1,
      sizeof(DatumProtoStoreOffset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProtoStoreOffset, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatumProtoStoreOffset, _is_default_instance_));
  FeatureFamilyProto_descriptor_ = file->message_type(4);
  static const int FeatureFamilyProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyProto, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyProto, name_to_family_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyProto, global_idx_),
  };
  FeatureFamilyProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureFamilyProto_descriptor_,
      FeatureFamilyProto::default_instance_,
      FeatureFamilyProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureFamilyProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureFamilyProto, _is_default_instance_));
  FeatureFamilyProto_NameToFamilyIdxEntry_descriptor_ = FeatureFamilyProto_descriptor_->nested_type(0);
  SelfContainedFeatureFamilyProto_descriptor_ = file->message_type(5);
  static const int SelfContainedFeatureFamilyProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfContainedFeatureFamilyProto, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfContainedFeatureFamilyProto, name_to_family_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfContainedFeatureFamilyProto, features_),
  };
  SelfContainedFeatureFamilyProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelfContainedFeatureFamilyProto_descriptor_,
      SelfContainedFeatureFamilyProto::default_instance_,
      SelfContainedFeatureFamilyProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(SelfContainedFeatureFamilyProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfContainedFeatureFamilyProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfContainedFeatureFamilyProto, _is_default_instance_));
  SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry_descriptor_ = SelfContainedFeatureFamilyProto_descriptor_->nested_type(0);
  SchemaConfig_descriptor_ = file->message_type(6);
  static const int SchemaConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaConfig, int_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaConfig, use_dense_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaConfig, num_unique_values_factor_),
  };
  SchemaConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SchemaConfig_descriptor_,
      SchemaConfig::default_instance_,
      SchemaConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(SchemaConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaConfig, _is_default_instance_));
  SchemaProto_descriptor_ = file->message_type(7);
  static const int SchemaProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, output_families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, append_store_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, features_),
  };
  SchemaProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SchemaProto_descriptor_,
      SchemaProto::default_instance_,
      SchemaProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(SchemaProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaProto, _is_default_instance_));
  SchemaProto_FamiliesEntry_descriptor_ = SchemaProto_descriptor_->nested_type(0);
  OSchemaProto_descriptor_ = file->message_type(8);
  static const int OSchemaProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSchemaProto, feature_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSchemaProto, family_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSchemaProto, family_offsets_),
  };
  OSchemaProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OSchemaProto_descriptor_,
      OSchemaProto::default_instance_,
      OSchemaProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(OSchemaProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSchemaProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSchemaProto, _is_default_instance_));
  FeatureType_descriptor_ = file->enum_type(0);
  OutputStoreType_descriptor_ = file->enum_type(1);
  FeatureIndexType_descriptor_ = file->enum_type(2);
  FeatureStoreType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_schema_2fproto_2fschema_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureStatProto_descriptor_, &FeatureStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feature_descriptor_, &Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DatumProto_descriptor_, &DatumProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DatumProto_SparseCatStoreEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                DatumProto_SparseCatStoreEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DatumProto_SparseNumStoreEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                DatumProto_SparseNumStoreEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DatumProto_SparseBytesStoreEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
            0>::CreateDefaultInstance(
                DatumProto_SparseBytesStoreEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DatumProtoStoreOffset_descriptor_, &DatumProtoStoreOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureFamilyProto_descriptor_, &FeatureFamilyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FeatureFamilyProto_NameToFamilyIdxEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                FeatureFamilyProto_NameToFamilyIdxEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelfContainedFeatureFamilyProto_descriptor_, &SelfContainedFeatureFamilyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SchemaConfig_descriptor_, &SchemaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SchemaProto_descriptor_, &SchemaProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SchemaProto_FamiliesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::hotbox::FeatureFamilyProto,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SchemaProto_FamiliesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OSchemaProto_descriptor_, &OSchemaProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto() {
  delete FeatureStatProto::default_instance_;
  delete FeatureStatProto_reflection_;
  delete Feature::default_instance_;
  delete Feature_reflection_;
  delete DatumProto::default_instance_;
  delete DatumProto_reflection_;
  delete DatumProtoStoreOffset::default_instance_;
  delete DatumProtoStoreOffset_reflection_;
  delete FeatureFamilyProto::default_instance_;
  delete FeatureFamilyProto_reflection_;
  delete SelfContainedFeatureFamilyProto::default_instance_;
  delete SelfContainedFeatureFamilyProto_reflection_;
  delete SchemaConfig::default_instance_;
  delete SchemaConfig_reflection_;
  delete SchemaProto::default_instance_;
  delete SchemaProto_reflection_;
  delete OSchemaProto::default_instance_;
  delete OSchemaProto_reflection_;
}

void protobuf_AddDesc_schema_2fproto_2fschema_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031schema/proto/schema.proto\022\006hotbox\"q\n\020F"
    "eatureStatProto\022\031\n\021unique_cat_values\030\006 \003"
    "(\005\022\033\n\023unique_bytes_values\030\007 \003(\t\022\013\n\003min\030\002"
    " \001(\001\022\013\n\003max\030\003 \001(\001\022\013\n\003sum\030\004 \001(\001\"\205\001\n\007Featu"
    "re\022\014\n\004name\030\001 \001(\t\022,\n\nstore_type\030\002 \001(\0162\030.h"
    "otbox.FeatureStoreType\022\024\n\014store_offset\030\003"
    " \001(\003\022\025\n\rglobal_offset\030\006 \001(\003\022\021\n\tis_factor"
    "\030\005 \001(\010\"\312\003\n\nDatumProto\022\027\n\017dense_cat_store"
    "\030\001 \003(\003\022\027\n\017dense_num_store\030\002 \003(\002\022\031\n\021dense"
    "_bytes_store\030\003 \003(\014\022@\n\020sparse_cat_store\030\004"
    " \003(\0132&.hotbox.DatumProto.SparseCatStoreE"
    "ntry\022@\n\020sparse_num_store\030\005 \003(\0132&.hotbox."
    "DatumProto.SparseNumStoreEntry\022D\n\022sparse"
    "_bytes_store\030\006 \003(\0132(.hotbox.DatumProto.S"
    "parseBytesStoreEntry\0325\n\023SparseCatStoreEn"
    "try\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\003:\0028\001\0325\n\023S"
    "parseNumStoreEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value"
    "\030\002 \001(\002:\0028\001\0327\n\025SparseBytesStoreEntry\022\013\n\003k"
    "ey\030\001 \001(\r\022\r\n\005value\030\002 \001(\014:\0028\001\"(\n\025DatumProt"
    "oStoreOffset\022\017\n\007offsets\030\001 \003(\003\"\302\001\n\022Featur"
    "eFamilyProto\022\023\n\013family_name\030\001 \001(\t\022K\n\022nam"
    "e_to_family_idx\030\002 \003(\0132/.hotbox.FeatureFa"
    "milyProto.NameToFamilyIdxEntry\022\022\n\nglobal"
    "_idx\030\003 \003(\003\0326\n\024NameToFamilyIdxEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\353\001\n\037SelfConta"
    "inedFeatureFamilyProto\022\023\n\013family_name\030\001 "
    "\001(\t\022X\n\022name_to_family_idx\030\002 \003(\0132<.hotbox"
    ".SelfContainedFeatureFamilyProto.NameToF"
    "amilyIdxEntry\022!\n\010features\030\003 \003(\0132\017.hotbox"
    ".Feature\0326\n\024NameToFamilyIdxEntry\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"]\n\014SchemaConfig"
    "\022\021\n\tint_label\030\001 \001(\010\022\030\n\020use_dense_weight\030"
    "\002 \001(\010\022 \n\030num_unique_values_factor\030\003 \001(\005\""
    "\230\002\n\013SchemaProto\022\017\n\007version\030\001 \001(\r\0223\n\010fami"
    "lies\030\002 \003(\0132!.hotbox.SchemaProto.Families"
    "Entry\022\027\n\017output_families\030\003 \003(\t\022:\n\023append"
    "_store_offset\030\005 \001(\0132\035.hotbox.DatumProtoS"
    "toreOffset\022!\n\010features\030\004 \003(\0132\017.hotbox.Fe"
    "ature\032K\n\rFamiliesEntry\022\013\n\003key\030\001 \001(\t\022)\n\005v"
    "alue\030\002 \001(\0132\032.hotbox.FeatureFamilyProto:\002"
    "8\001\"S\n\014OSchemaProto\022\025\n\rfeature_names\030\001 \003("
    "\t\022\024\n\014family_names\030\002 \003(\t\022\026\n\016family_offset"
    "s\030\003 \003(\003*R\n\013FeatureType\022\030\n\024UNKNOWN_FEATUR"
    "E_TYPE\020\000\022\017\n\013CATEGORICAL\020\001\022\r\n\tNUMERICAL\020\002"
    "\022\t\n\005BYTES\020\003*(\n\017OutputStoreType\022\n\n\006SPARSE"
    "\020\000\022\t\n\005DENSE\020\001*(\n\020FeatureIndexType\022\t\n\005INT"
    "64\020\000\022\t\n\005INT32\020\001*\224\001\n\020FeatureStoreType\022\n\n\006"
    "OUTPUT\020\000\022\r\n\tDENSE_CAT\020\001\022\r\n\tDENSE_NUM\020\002\022\017"
    "\n\013DENSE_BYTES\020\003\022\016\n\nSPARSE_CAT\020\004\022\016\n\nSPARS"
    "E_NUM\020\005\022\020\n\014SPARSE_BYTES\020\006\022\023\n\017NUM_STORE_T"
    "YPES\020\007b\006proto3", 2014);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema/proto/schema.proto", &protobuf_RegisterTypes);
  FeatureStatProto::default_instance_ = new FeatureStatProto();
  Feature::default_instance_ = new Feature();
  DatumProto::default_instance_ = new DatumProto();
  DatumProtoStoreOffset::default_instance_ = new DatumProtoStoreOffset();
  FeatureFamilyProto::default_instance_ = new FeatureFamilyProto();
  SelfContainedFeatureFamilyProto::default_instance_ = new SelfContainedFeatureFamilyProto();
  SchemaConfig::default_instance_ = new SchemaConfig();
  SchemaProto::default_instance_ = new SchemaProto();
  OSchemaProto::default_instance_ = new OSchemaProto();
  FeatureStatProto::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  DatumProto::default_instance_->InitAsDefaultInstance();
  DatumProtoStoreOffset::default_instance_->InitAsDefaultInstance();
  FeatureFamilyProto::default_instance_->InitAsDefaultInstance();
  SelfContainedFeatureFamilyProto::default_instance_->InitAsDefaultInstance();
  SchemaConfig::default_instance_->InitAsDefaultInstance();
  SchemaProto::default_instance_->InitAsDefaultInstance();
  OSchemaProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_schema_2fproto_2fschema_2eproto {
  StaticDescriptorInitializer_schema_2fproto_2fschema_2eproto() {
    protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  }
} static_descriptor_initializer_schema_2fproto_2fschema_2eproto_;
const ::google::protobuf::EnumDescriptor* FeatureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureType_descriptor_;
}
bool FeatureType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OutputStoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputStoreType_descriptor_;
}
bool OutputStoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FeatureIndexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureIndexType_descriptor_;
}
bool FeatureIndexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FeatureStoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureStoreType_descriptor_;
}
bool FeatureStoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int FeatureStatProto::kUniqueCatValuesFieldNumber;
const int FeatureStatProto::kUniqueBytesValuesFieldNumber;
const int FeatureStatProto::kMinFieldNumber;
const int FeatureStatProto::kMaxFieldNumber;
const int FeatureStatProto::kSumFieldNumber;
#endif  // !_MSC_VER

FeatureStatProto::FeatureStatProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.FeatureStatProto)
}

void FeatureStatProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureStatProto::FeatureStatProto(const FeatureStatProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.FeatureStatProto)
}

void FeatureStatProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  sum_ = 0;
}

FeatureStatProto::~FeatureStatProto() {
  // @@protoc_insertion_point(destructor:hotbox.FeatureStatProto)
  SharedDtor();
}

void FeatureStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureStatProto_descriptor_;
}

const FeatureStatProto& FeatureStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

FeatureStatProto* FeatureStatProto::default_instance_ = NULL;

FeatureStatProto* FeatureStatProto::New(::google::protobuf::Arena* arena) const {
  FeatureStatProto* n = new FeatureStatProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureStatProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FeatureStatProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_, sum_);

#undef ZR_HELPER_
#undef ZR_

  unique_cat_values_.Clear();
  unique_bytes_values_.Clear();
}

bool FeatureStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.FeatureStatProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min = 2;
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max;
        break;
      }

      // optional double max = 3;
      case 3: {
        if (tag == 25) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_sum;
        break;
      }

      // optional double sum = 4;
      case 4: {
        if (tag == 33) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unique_cat_values;
        break;
      }

      // repeated int32 unique_cat_values = 6;
      case 6: {
        if (tag == 50) {
         parse_unique_cat_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unique_cat_values())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_unique_cat_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unique_bytes_values;
        break;
      }

      // repeated string unique_bytes_values = 7;
      case 7: {
        if (tag == 58) {
         parse_unique_bytes_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unique_bytes_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_bytes_values(this->unique_bytes_values_size() - 1).data(),
            this->unique_bytes_values(this->unique_bytes_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.FeatureStatProto.unique_bytes_values"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unique_bytes_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.FeatureStatProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.FeatureStatProto)
  return false;
#undef DO_
}

void FeatureStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.FeatureStatProto)
  // optional double min = 2;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min(), output);
  }

  // optional double max = 3;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max(), output);
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sum(), output);
  }

  // repeated int32 unique_cat_values = 6;
  if (this->unique_cat_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_unique_cat_values_cached_byte_size_);
  }
  for (int i = 0; i < this->unique_cat_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->unique_cat_values(i), output);
  }

  // repeated string unique_bytes_values = 7;
  for (int i = 0; i < this->unique_bytes_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_bytes_values(i).data(), this->unique_bytes_values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.FeatureStatProto.unique_bytes_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->unique_bytes_values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.FeatureStatProto)
}

::google::protobuf::uint8* FeatureStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.FeatureStatProto)
  // optional double min = 2;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min(), target);
  }

  // optional double max = 3;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max(), target);
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sum(), target);
  }

  // repeated int32 unique_cat_values = 6;
  if (this->unique_cat_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _unique_cat_values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->unique_cat_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->unique_cat_values(i), target);
  }

  // repeated string unique_bytes_values = 7;
  for (int i = 0; i < this->unique_bytes_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_bytes_values(i).data(), this->unique_bytes_values(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.FeatureStatProto.unique_bytes_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->unique_bytes_values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.FeatureStatProto)
  return target;
}

int FeatureStatProto::ByteSize() const {
  int total_size = 0;

  // optional double min = 2;
  if (this->min() != 0) {
    total_size += 1 + 8;
  }

  // optional double max = 3;
  if (this->max() != 0) {
    total_size += 1 + 8;
  }

  // optional double sum = 4;
  if (this->sum() != 0) {
    total_size += 1 + 8;
  }

  // repeated int32 unique_cat_values = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->unique_cat_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unique_cat_values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unique_cat_values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string unique_bytes_values = 7;
  total_size += 1 * this->unique_bytes_values_size();
  for (int i = 0; i < this->unique_bytes_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unique_bytes_values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureStatProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureStatProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureStatProto::MergeFrom(const FeatureStatProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  unique_cat_values_.MergeFrom(from.unique_cat_values_);
  unique_bytes_values_.MergeFrom(from.unique_bytes_values_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.sum() != 0) {
    set_sum(from.sum());
  }
}

void FeatureStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureStatProto::CopyFrom(const FeatureStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureStatProto::IsInitialized() const {

  return true;
}

void FeatureStatProto::Swap(FeatureStatProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureStatProto::InternalSwap(FeatureStatProto* other) {
  unique_cat_values_.UnsafeArenaSwap(&other->unique_cat_values_);
  unique_bytes_values_.UnsafeArenaSwap(&other->unique_bytes_values_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(sum_, other->sum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureStatProto_descriptor_;
  metadata.reflection = FeatureStatProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureStatProto

// repeated int32 unique_cat_values = 6;
int FeatureStatProto::unique_cat_values_size() const {
  return unique_cat_values_.size();
}
void FeatureStatProto::clear_unique_cat_values() {
  unique_cat_values_.Clear();
}
 ::google::protobuf::int32 FeatureStatProto::unique_cat_values(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.unique_cat_values)
  return unique_cat_values_.Get(index);
}
 void FeatureStatProto::set_unique_cat_values(int index, ::google::protobuf::int32 value) {
  unique_cat_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.unique_cat_values)
}
 void FeatureStatProto::add_unique_cat_values(::google::protobuf::int32 value) {
  unique_cat_values_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FeatureStatProto.unique_cat_values)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FeatureStatProto::unique_cat_values() const {
  // @@protoc_insertion_point(field_list:hotbox.FeatureStatProto.unique_cat_values)
  return unique_cat_values_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FeatureStatProto::mutable_unique_cat_values() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FeatureStatProto.unique_cat_values)
  return &unique_cat_values_;
}

// repeated string unique_bytes_values = 7;
int FeatureStatProto::unique_bytes_values_size() const {
  return unique_bytes_values_.size();
}
void FeatureStatProto::clear_unique_bytes_values() {
  unique_bytes_values_.Clear();
}
 const ::std::string& FeatureStatProto::unique_bytes_values(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.unique_bytes_values)
  return unique_bytes_values_.Get(index);
}
 ::std::string* FeatureStatProto::mutable_unique_bytes_values(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.FeatureStatProto.unique_bytes_values)
  return unique_bytes_values_.Mutable(index);
}
 void FeatureStatProto::set_unique_bytes_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.unique_bytes_values)
  unique_bytes_values_.Mutable(index)->assign(value);
}
 void FeatureStatProto::set_unique_bytes_values(int index, const char* value) {
  unique_bytes_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.FeatureStatProto.unique_bytes_values)
}
 void FeatureStatProto::set_unique_bytes_values(int index, const char* value, size_t size) {
  unique_bytes_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.FeatureStatProto.unique_bytes_values)
}
 ::std::string* FeatureStatProto::add_unique_bytes_values() {
  return unique_bytes_values_.Add();
}
 void FeatureStatProto::add_unique_bytes_values(const ::std::string& value) {
  unique_bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.FeatureStatProto.unique_bytes_values)
}
 void FeatureStatProto::add_unique_bytes_values(const char* value) {
  unique_bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.FeatureStatProto.unique_bytes_values)
}
 void FeatureStatProto::add_unique_bytes_values(const char* value, size_t size) {
  unique_bytes_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.FeatureStatProto.unique_bytes_values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeatureStatProto::unique_bytes_values() const {
  // @@protoc_insertion_point(field_list:hotbox.FeatureStatProto.unique_bytes_values)
  return unique_bytes_values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FeatureStatProto::mutable_unique_bytes_values() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FeatureStatProto.unique_bytes_values)
  return &unique_bytes_values_;
}

// optional double min = 2;
void FeatureStatProto::clear_min() {
  min_ = 0;
}
 double FeatureStatProto::min() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.min)
  return min_;
}
 void FeatureStatProto::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.min)
}

// optional double max = 3;
void FeatureStatProto::clear_max() {
  max_ = 0;
}
 double FeatureStatProto::max() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.max)
  return max_;
}
 void FeatureStatProto::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.max)
}

// optional double sum = 4;
void FeatureStatProto::clear_sum() {
  sum_ = 0;
}
 double FeatureStatProto::sum() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.sum)
  return sum_;
}
 void FeatureStatProto::set_sum(double value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.sum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Feature::kNameFieldNumber;
const int Feature::kStoreTypeFieldNumber;
const int Feature::kStoreOffsetFieldNumber;
const int Feature::kGlobalOffsetFieldNumber;
const int Feature::kIsFactorFieldNumber;
#endif  // !_MSC_VER

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.Feature)
}

void Feature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.Feature)
}

void Feature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_type_ = 0;
  store_offset_ = GOOGLE_LONGLONG(0);
  global_offset_ = GOOGLE_LONGLONG(0);
  is_factor_ = false;
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:hotbox.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Feature*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(store_offset_, global_offset_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.Feature.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_type;
        break;
      }

      // optional .hotbox.FeatureStoreType store_type = 2;
      case 2: {
        if (tag == 16) {
         parse_store_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_store_type(static_cast< ::hotbox::FeatureStoreType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_store_offset;
        break;
      }

      // optional int64 store_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_store_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &store_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_factor;
        break;
      }

      // optional bool is_factor = 5;
      case 5: {
        if (tag == 40) {
         parse_is_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_global_offset;
        break;
      }

      // optional int64 global_offset = 6;
      case 6: {
        if (tag == 48) {
         parse_global_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.Feature)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.Feature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .hotbox.FeatureStoreType store_type = 2;
  if (this->store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->store_type(), output);
  }

  // optional int64 store_offset = 3;
  if (this->store_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->store_offset(), output);
  }

  // optional bool is_factor = 5;
  if (this->is_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_factor(), output);
  }

  // optional int64 global_offset = 6;
  if (this->global_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->global_offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.Feature)
}

::google::protobuf::uint8* Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.Feature)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.Feature.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .hotbox.FeatureStoreType store_type = 2;
  if (this->store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->store_type(), target);
  }

  // optional int64 store_offset = 3;
  if (this->store_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->store_offset(), target);
  }

  // optional bool is_factor = 5;
  if (this->is_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_factor(), target);
  }

  // optional int64 global_offset = 6;
  if (this->global_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->global_offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.Feature)
  return target;
}

int Feature::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .hotbox.FeatureStoreType store_type = 2;
  if (this->store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->store_type());
  }

  // optional int64 store_offset = 3;
  if (this->store_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->store_offset());
  }

  // optional int64 global_offset = 6;
  if (this->global_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->global_offset());
  }

  // optional bool is_factor = 5;
  if (this->is_factor() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Feature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.store_type() != 0) {
    set_store_type(from.store_type());
  }
  if (from.store_offset() != 0) {
    set_store_offset(from.store_offset());
  }
  if (from.global_offset() != 0) {
    set_global_offset(from.global_offset());
  }
  if (from.is_factor() != 0) {
    set_is_factor(from.is_factor());
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {

  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  name_.Swap(&other->name_);
  std::swap(store_type_, other->store_type_);
  std::swap(store_offset_, other->store_offset_);
  std::swap(global_offset_, other->global_offset_);
  std::swap(is_factor_, other->is_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional string name = 1;
void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.Feature.name)
}
 void Feature::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.Feature.name)
}
 void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.Feature.name)
}
 ::std::string* Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.Feature.name)
}

// optional .hotbox.FeatureStoreType store_type = 2;
void Feature::clear_store_type() {
  store_type_ = 0;
}
 ::hotbox::FeatureStoreType Feature::store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.store_type)
  return static_cast< ::hotbox::FeatureStoreType >(store_type_);
}
 void Feature::set_store_type(::hotbox::FeatureStoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.store_type)
}

// optional int64 store_offset = 3;
void Feature::clear_store_offset() {
  store_offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Feature::store_offset() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.store_offset)
  return store_offset_;
}
 void Feature::set_store_offset(::google::protobuf::int64 value) {
  
  store_offset_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.store_offset)
}

// optional int64 global_offset = 6;
void Feature::clear_global_offset() {
  global_offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Feature::global_offset() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.global_offset)
  return global_offset_;
}
 void Feature::set_global_offset(::google::protobuf::int64 value) {
  
  global_offset_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.global_offset)
}

// optional bool is_factor = 5;
void Feature::clear_is_factor() {
  is_factor_ = false;
}
 bool Feature::is_factor() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.is_factor)
  return is_factor_;
}
 void Feature::set_is_factor(bool value) {
  
  is_factor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.is_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DatumProto::kDenseCatStoreFieldNumber;
const int DatumProto::kDenseNumStoreFieldNumber;
const int DatumProto::kDenseBytesStoreFieldNumber;
const int DatumProto::kSparseCatStoreFieldNumber;
const int DatumProto::kSparseNumStoreFieldNumber;
const int DatumProto::kSparseBytesStoreFieldNumber;
#endif  // !_MSC_VER

DatumProto::DatumProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DatumProto)
}

void DatumProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DatumProto::DatumProto(const DatumProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DatumProto)
}

void DatumProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sparse_cat_store_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sparse_cat_store_.SetEntryDescriptor(
      &::hotbox::DatumProto_SparseCatStoreEntry_descriptor_);
  sparse_num_store_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sparse_num_store_.SetEntryDescriptor(
      &::hotbox::DatumProto_SparseNumStoreEntry_descriptor_);
  sparse_bytes_store_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sparse_bytes_store_.SetEntryDescriptor(
      &::hotbox::DatumProto_SparseBytesStoreEntry_descriptor_);
}

DatumProto::~DatumProto() {
  // @@protoc_insertion_point(destructor:hotbox.DatumProto)
  SharedDtor();
}

void DatumProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatumProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatumProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatumProto_descriptor_;
}

const DatumProto& DatumProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

DatumProto* DatumProto::default_instance_ = NULL;

DatumProto* DatumProto::New(::google::protobuf::Arena* arena) const {
  DatumProto* n = new DatumProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatumProto::Clear() {
  dense_cat_store_.Clear();
  dense_num_store_.Clear();
  dense_bytes_store_.Clear();
  sparse_cat_store_.Clear();
  sparse_num_store_.Clear();
  sparse_bytes_store_.Clear();
}

bool DatumProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DatumProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dense_cat_store = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dense_cat_store())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dense_cat_store())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dense_num_store;
        break;
      }

      // repeated float dense_num_store = 2;
      case 2: {
        if (tag == 18) {
         parse_dense_num_store:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dense_num_store())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_dense_num_store())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dense_bytes_store;
        break;
      }

      // repeated bytes dense_bytes_store = 3;
      case 3: {
        if (tag == 26) {
         parse_dense_bytes_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_dense_bytes_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dense_bytes_store;
        if (input->ExpectTag(34)) goto parse_sparse_cat_store;
        break;
      }

      // map<uint32, int64> sparse_cat_store = 4;
      case 4: {
        if (tag == 34) {
         parse_sparse_cat_store:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sparse_cat_store:
          ::google::protobuf::scoped_ptr<DatumProto_SparseCatStoreEntry> entry(sparse_cat_store_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_sparse_cat_store())[entry->key()] = *entry->mutable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_sparse_cat_store;
        if (input->ExpectTag(42)) goto parse_loop_sparse_num_store;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint32, float> sparse_num_store = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sparse_num_store:
          ::google::protobuf::scoped_ptr<DatumProto_SparseNumStoreEntry> entry(sparse_num_store_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_sparse_num_store())[entry->key()] = *entry->mutable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_sparse_num_store;
        if (input->ExpectTag(50)) goto parse_loop_sparse_bytes_store;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint32, bytes> sparse_bytes_store = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sparse_bytes_store:
          ::google::protobuf::scoped_ptr<DatumProto_SparseBytesStoreEntry> entry(sparse_bytes_store_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_sparse_bytes_store())[entry->key()] = *entry->mutable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_sparse_bytes_store;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DatumProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DatumProto)
  return false;
#undef DO_
}

void DatumProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DatumProto)
  // repeated int64 dense_cat_store = 1;
  if (this->dense_cat_store_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dense_cat_store_cached_byte_size_);
  }
  for (int i = 0; i < this->dense_cat_store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dense_cat_store(i), output);
  }

  // repeated float dense_num_store = 2;
  if (this->dense_num_store_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dense_num_store_cached_byte_size_);
  }
  for (int i = 0; i < this->dense_num_store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->dense_num_store(i), output);
  }

  // repeated bytes dense_bytes_store = 3;
  for (int i = 0; i < this->dense_bytes_store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dense_bytes_store(i), output);
  }

  // map<uint32, int64> sparse_cat_store = 4;
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseCatStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >::const_iterator
        it = this->sparse_cat_store().begin();
        it != this->sparse_cat_store().end(); ++it) {
      entry.reset(sparse_cat_store_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          4, *entry, output);
    }
  }

  // map<uint32, float> sparse_num_store = 5;
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseNumStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->sparse_num_store().begin();
        it != this->sparse_num_store().end(); ++it) {
      entry.reset(sparse_num_store_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          5, *entry, output);
    }
  }

  // map<uint32, bytes> sparse_bytes_store = 6;
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseBytesStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->sparse_bytes_store().begin();
        it != this->sparse_bytes_store().end(); ++it) {
      entry.reset(sparse_bytes_store_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DatumProto)
}

::google::protobuf::uint8* DatumProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DatumProto)
  // repeated int64 dense_cat_store = 1;
  if (this->dense_cat_store_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dense_cat_store_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dense_cat_store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dense_cat_store(i), target);
  }

  // repeated float dense_num_store = 2;
  if (this->dense_num_store_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dense_num_store_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dense_num_store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dense_num_store(i), target);
  }

  // repeated bytes dense_bytes_store = 3;
  for (int i = 0; i < this->dense_bytes_store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->dense_bytes_store(i), target);
  }

  // map<uint32, int64> sparse_cat_store = 4;
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseCatStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >::const_iterator
        it = this->sparse_cat_store().begin();
        it != this->sparse_cat_store().end(); ++it) {
      entry.reset(sparse_cat_store_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              4, *entry, target);
    }
  }

  // map<uint32, float> sparse_num_store = 5;
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseNumStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->sparse_num_store().begin();
        it != this->sparse_num_store().end(); ++it) {
      entry.reset(sparse_num_store_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              5, *entry, target);
    }
  }

  // map<uint32, bytes> sparse_bytes_store = 6;
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseBytesStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->sparse_bytes_store().begin();
        it != this->sparse_bytes_store().end(); ++it) {
      entry.reset(sparse_bytes_store_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DatumProto)
  return target;
}

int DatumProto::ByteSize() const {
  int total_size = 0;

  // repeated int64 dense_cat_store = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dense_cat_store_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dense_cat_store(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dense_cat_store_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float dense_num_store = 2;
  {
    int data_size = 0;
    data_size = 4 * this->dense_num_store_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dense_num_store_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes dense_bytes_store = 3;
  total_size += 1 * this->dense_bytes_store_size();
  for (int i = 0; i < this->dense_bytes_store_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->dense_bytes_store(i));
  }

  // map<uint32, int64> sparse_cat_store = 4;
  total_size += 1 * this->sparse_cat_store_size();
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseCatStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >::const_iterator
        it = this->sparse_cat_store().begin();
        it != this->sparse_cat_store().end(); ++it) {
      entry.reset(sparse_cat_store_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, float> sparse_num_store = 5;
  total_size += 1 * this->sparse_num_store_size();
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseNumStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, float >::const_iterator
        it = this->sparse_num_store().begin();
        it != this->sparse_num_store().end(); ++it) {
      entry.reset(sparse_num_store_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, bytes> sparse_bytes_store = 6;
  total_size += 1 * this->sparse_bytes_store_size();
  {
    ::google::protobuf::scoped_ptr<DatumProto_SparseBytesStoreEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->sparse_bytes_store().begin();
        it != this->sparse_bytes_store().end(); ++it) {
      entry.reset(sparse_bytes_store_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatumProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DatumProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DatumProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatumProto::MergeFrom(const DatumProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  dense_cat_store_.MergeFrom(from.dense_cat_store_);
  dense_num_store_.MergeFrom(from.dense_num_store_);
  dense_bytes_store_.MergeFrom(from.dense_bytes_store_);
  sparse_cat_store_.MergeFrom(from.sparse_cat_store_);
  sparse_num_store_.MergeFrom(from.sparse_num_store_);
  sparse_bytes_store_.MergeFrom(from.sparse_bytes_store_);
}

void DatumProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatumProto::CopyFrom(const DatumProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatumProto::IsInitialized() const {

  return true;
}

void DatumProto::Swap(DatumProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatumProto::InternalSwap(DatumProto* other) {
  dense_cat_store_.UnsafeArenaSwap(&other->dense_cat_store_);
  dense_num_store_.UnsafeArenaSwap(&other->dense_num_store_);
  dense_bytes_store_.UnsafeArenaSwap(&other->dense_bytes_store_);
  sparse_cat_store_.Swap(&other->sparse_cat_store_);
  sparse_num_store_.Swap(&other->sparse_num_store_);
  sparse_bytes_store_.Swap(&other->sparse_bytes_store_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatumProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatumProto_descriptor_;
  metadata.reflection = DatumProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatumProto

// repeated int64 dense_cat_store = 1;
int DatumProto::dense_cat_store_size() const {
  return dense_cat_store_.size();
}
void DatumProto::clear_dense_cat_store() {
  dense_cat_store_.Clear();
}
 ::google::protobuf::int64 DatumProto::dense_cat_store(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProto.dense_cat_store)
  return dense_cat_store_.Get(index);
}
 void DatumProto::set_dense_cat_store(int index, ::google::protobuf::int64 value) {
  dense_cat_store_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.DatumProto.dense_cat_store)
}
 void DatumProto::add_dense_cat_store(::google::protobuf::int64 value) {
  dense_cat_store_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProto.dense_cat_store)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DatumProto::dense_cat_store() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProto.dense_cat_store)
  return dense_cat_store_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DatumProto::mutable_dense_cat_store() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProto.dense_cat_store)
  return &dense_cat_store_;
}

// repeated float dense_num_store = 2;
int DatumProto::dense_num_store_size() const {
  return dense_num_store_.size();
}
void DatumProto::clear_dense_num_store() {
  dense_num_store_.Clear();
}
 float DatumProto::dense_num_store(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProto.dense_num_store)
  return dense_num_store_.Get(index);
}
 void DatumProto::set_dense_num_store(int index, float value) {
  dense_num_store_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.DatumProto.dense_num_store)
}
 void DatumProto::add_dense_num_store(float value) {
  dense_num_store_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProto.dense_num_store)
}
 const ::google::protobuf::RepeatedField< float >&
DatumProto::dense_num_store() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProto.dense_num_store)
  return dense_num_store_;
}
 ::google::protobuf::RepeatedField< float >*
DatumProto::mutable_dense_num_store() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProto.dense_num_store)
  return &dense_num_store_;
}

// repeated bytes dense_bytes_store = 3;
int DatumProto::dense_bytes_store_size() const {
  return dense_bytes_store_.size();
}
void DatumProto::clear_dense_bytes_store() {
  dense_bytes_store_.Clear();
}
 const ::std::string& DatumProto::dense_bytes_store(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProto.dense_bytes_store)
  return dense_bytes_store_.Get(index);
}
 ::std::string* DatumProto::mutable_dense_bytes_store(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DatumProto.dense_bytes_store)
  return dense_bytes_store_.Mutable(index);
}
 void DatumProto::set_dense_bytes_store(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.DatumProto.dense_bytes_store)
  dense_bytes_store_.Mutable(index)->assign(value);
}
 void DatumProto::set_dense_bytes_store(int index, const char* value) {
  dense_bytes_store_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.DatumProto.dense_bytes_store)
}
 void DatumProto::set_dense_bytes_store(int index, const void* value, size_t size) {
  dense_bytes_store_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.DatumProto.dense_bytes_store)
}
 ::std::string* DatumProto::add_dense_bytes_store() {
  return dense_bytes_store_.Add();
}
 void DatumProto::add_dense_bytes_store(const ::std::string& value) {
  dense_bytes_store_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProto.dense_bytes_store)
}
 void DatumProto::add_dense_bytes_store(const char* value) {
  dense_bytes_store_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.DatumProto.dense_bytes_store)
}
 void DatumProto::add_dense_bytes_store(const void* value, size_t size) {
  dense_bytes_store_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.DatumProto.dense_bytes_store)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DatumProto::dense_bytes_store() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProto.dense_bytes_store)
  return dense_bytes_store_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DatumProto::mutable_dense_bytes_store() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProto.dense_bytes_store)
  return &dense_bytes_store_;
}

// map<uint32, int64> sparse_cat_store = 4;
int DatumProto::sparse_cat_store_size() const {
  return sparse_cat_store_.size();
}
void DatumProto::clear_sparse_cat_store() {
  sparse_cat_store_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >&
DatumProto::sparse_cat_store() const {
  // @@protoc_insertion_point(field_map:hotbox.DatumProto.sparse_cat_store)
  return sparse_cat_store_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >*
DatumProto::mutable_sparse_cat_store() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.DatumProto.sparse_cat_store)
  return sparse_cat_store_.MutableMap();
}

// map<uint32, float> sparse_num_store = 5;
int DatumProto::sparse_num_store_size() const {
  return sparse_num_store_.size();
}
void DatumProto::clear_sparse_num_store() {
  sparse_num_store_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
DatumProto::sparse_num_store() const {
  // @@protoc_insertion_point(field_map:hotbox.DatumProto.sparse_num_store)
  return sparse_num_store_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, float >*
DatumProto::mutable_sparse_num_store() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.DatumProto.sparse_num_store)
  return sparse_num_store_.MutableMap();
}

// map<uint32, bytes> sparse_bytes_store = 6;
int DatumProto::sparse_bytes_store_size() const {
  return sparse_bytes_store_.size();
}
void DatumProto::clear_sparse_bytes_store() {
  sparse_bytes_store_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
DatumProto::sparse_bytes_store() const {
  // @@protoc_insertion_point(field_map:hotbox.DatumProto.sparse_bytes_store)
  return sparse_bytes_store_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
DatumProto::mutable_sparse_bytes_store() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.DatumProto.sparse_bytes_store)
  return sparse_bytes_store_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DatumProtoStoreOffset::kOffsetsFieldNumber;
#endif  // !_MSC_VER

DatumProtoStoreOffset::DatumProtoStoreOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DatumProtoStoreOffset)
}

void DatumProtoStoreOffset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DatumProtoStoreOffset::DatumProtoStoreOffset(const DatumProtoStoreOffset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DatumProtoStoreOffset)
}

void DatumProtoStoreOffset::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DatumProtoStoreOffset::~DatumProtoStoreOffset() {
  // @@protoc_insertion_point(destructor:hotbox.DatumProtoStoreOffset)
  SharedDtor();
}

void DatumProtoStoreOffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatumProtoStoreOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatumProtoStoreOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatumProtoStoreOffset_descriptor_;
}

const DatumProtoStoreOffset& DatumProtoStoreOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

DatumProtoStoreOffset* DatumProtoStoreOffset::default_instance_ = NULL;

DatumProtoStoreOffset* DatumProtoStoreOffset::New(::google::protobuf::Arena* arena) const {
  DatumProtoStoreOffset* n = new DatumProtoStoreOffset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatumProtoStoreOffset::Clear() {
  offsets_.Clear();
}

bool DatumProtoStoreOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DatumProtoStoreOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 offsets = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_offsets())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_offsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DatumProtoStoreOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DatumProtoStoreOffset)
  return false;
#undef DO_
}

void DatumProtoStoreOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DatumProtoStoreOffset)
  // repeated int64 offsets = 1;
  if (this->offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->offsets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DatumProtoStoreOffset)
}

::google::protobuf::uint8* DatumProtoStoreOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DatumProtoStoreOffset)
  // repeated int64 offsets = 1;
  if (this->offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->offsets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DatumProtoStoreOffset)
  return target;
}

int DatumProtoStoreOffset::ByteSize() const {
  int total_size = 0;

  // repeated int64 offsets = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->offsets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _offsets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatumProtoStoreOffset::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DatumProtoStoreOffset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DatumProtoStoreOffset>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatumProtoStoreOffset::MergeFrom(const DatumProtoStoreOffset& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  offsets_.MergeFrom(from.offsets_);
}

void DatumProtoStoreOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatumProtoStoreOffset::CopyFrom(const DatumProtoStoreOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatumProtoStoreOffset::IsInitialized() const {

  return true;
}

void DatumProtoStoreOffset::Swap(DatumProtoStoreOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatumProtoStoreOffset::InternalSwap(DatumProtoStoreOffset* other) {
  offsets_.UnsafeArenaSwap(&other->offsets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatumProtoStoreOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatumProtoStoreOffset_descriptor_;
  metadata.reflection = DatumProtoStoreOffset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatumProtoStoreOffset

// repeated int64 offsets = 1;
int DatumProtoStoreOffset::offsets_size() const {
  return offsets_.size();
}
void DatumProtoStoreOffset::clear_offsets() {
  offsets_.Clear();
}
 ::google::protobuf::int64 DatumProtoStoreOffset::offsets(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProtoStoreOffset.offsets)
  return offsets_.Get(index);
}
 void DatumProtoStoreOffset::set_offsets(int index, ::google::protobuf::int64 value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.DatumProtoStoreOffset.offsets)
}
 void DatumProtoStoreOffset::add_offsets(::google::protobuf::int64 value) {
  offsets_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProtoStoreOffset.offsets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DatumProtoStoreOffset::offsets() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProtoStoreOffset.offsets)
  return offsets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DatumProtoStoreOffset::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProtoStoreOffset.offsets)
  return &offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FeatureFamilyProto::kFamilyNameFieldNumber;
const int FeatureFamilyProto::kNameToFamilyIdxFieldNumber;
const int FeatureFamilyProto::kGlobalIdxFieldNumber;
#endif  // !_MSC_VER

FeatureFamilyProto::FeatureFamilyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.FeatureFamilyProto)
}

void FeatureFamilyProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureFamilyProto::FeatureFamilyProto(const FeatureFamilyProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.FeatureFamilyProto)
}

void FeatureFamilyProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_to_family_idx_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  name_to_family_idx_.SetEntryDescriptor(
      &::hotbox::FeatureFamilyProto_NameToFamilyIdxEntry_descriptor_);
}

FeatureFamilyProto::~FeatureFamilyProto() {
  // @@protoc_insertion_point(destructor:hotbox.FeatureFamilyProto)
  SharedDtor();
}

void FeatureFamilyProto::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeatureFamilyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureFamilyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureFamilyProto_descriptor_;
}

const FeatureFamilyProto& FeatureFamilyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

FeatureFamilyProto* FeatureFamilyProto::default_instance_ = NULL;

FeatureFamilyProto* FeatureFamilyProto::New(::google::protobuf::Arena* arena) const {
  FeatureFamilyProto* n = new FeatureFamilyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureFamilyProto::Clear() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_to_family_idx_.Clear();
  global_idx_.Clear();
}

bool FeatureFamilyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.FeatureFamilyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.FeatureFamilyProto.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name_to_family_idx;
        break;
      }

      // map<string, int64> name_to_family_idx = 2;
      case 2: {
        if (tag == 18) {
         parse_name_to_family_idx:
          DO_(input->IncrementRecursionDepth());
         parse_loop_name_to_family_idx:
          ::google::protobuf::scoped_ptr<FeatureFamilyProto_NameToFamilyIdxEntry> entry(name_to_family_idx_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_name_to_family_idx())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.FeatureFamilyProto.NameToFamilyIdxEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_name_to_family_idx;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_global_idx;
        break;
      }

      // repeated int64 global_idx = 3;
      case 3: {
        if (tag == 26) {
         parse_global_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_global_idx())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_global_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.FeatureFamilyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.FeatureFamilyProto)
  return false;
#undef DO_
}

void FeatureFamilyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.FeatureFamilyProto)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.FeatureFamilyProto.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // map<string, int64> name_to_family_idx = 2;
  {
    ::google::protobuf::scoped_ptr<FeatureFamilyProto_NameToFamilyIdxEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->name_to_family_idx().begin();
        it != this->name_to_family_idx().end(); ++it) {
      entry.reset(name_to_family_idx_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "hotbox.FeatureFamilyProto.NameToFamilyIdxEntry.key");
    }
  }

  // repeated int64 global_idx = 3;
  if (this->global_idx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_global_idx_cached_byte_size_);
  }
  for (int i = 0; i < this->global_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->global_idx(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.FeatureFamilyProto)
}

::google::protobuf::uint8* FeatureFamilyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.FeatureFamilyProto)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.FeatureFamilyProto.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // map<string, int64> name_to_family_idx = 2;
  {
    ::google::protobuf::scoped_ptr<FeatureFamilyProto_NameToFamilyIdxEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->name_to_family_idx().begin();
        it != this->name_to_family_idx().end(); ++it) {
      entry.reset(name_to_family_idx_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "hotbox.FeatureFamilyProto.NameToFamilyIdxEntry.key");
    }
  }

  // repeated int64 global_idx = 3;
  if (this->global_idx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _global_idx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->global_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->global_idx(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.FeatureFamilyProto)
  return target;
}

int FeatureFamilyProto::ByteSize() const {
  int total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  // map<string, int64> name_to_family_idx = 2;
  total_size += 1 * this->name_to_family_idx_size();
  {
    ::google::protobuf::scoped_ptr<FeatureFamilyProto_NameToFamilyIdxEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->name_to_family_idx().begin();
        it != this->name_to_family_idx().end(); ++it) {
      entry.reset(name_to_family_idx_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 global_idx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->global_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->global_idx(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _global_idx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureFamilyProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureFamilyProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureFamilyProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureFamilyProto::MergeFrom(const FeatureFamilyProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  name_to_family_idx_.MergeFrom(from.name_to_family_idx_);
  global_idx_.MergeFrom(from.global_idx_);
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
}

void FeatureFamilyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureFamilyProto::CopyFrom(const FeatureFamilyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureFamilyProto::IsInitialized() const {

  return true;
}

void FeatureFamilyProto::Swap(FeatureFamilyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureFamilyProto::InternalSwap(FeatureFamilyProto* other) {
  family_name_.Swap(&other->family_name_);
  name_to_family_idx_.Swap(&other->name_to_family_idx_);
  global_idx_.UnsafeArenaSwap(&other->global_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureFamilyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureFamilyProto_descriptor_;
  metadata.reflection = FeatureFamilyProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureFamilyProto

// optional string family_name = 1;
void FeatureFamilyProto::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeatureFamilyProto::family_name() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureFamilyProto.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureFamilyProto::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.FeatureFamilyProto.family_name)
}
 void FeatureFamilyProto::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.FeatureFamilyProto.family_name)
}
 void FeatureFamilyProto::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.FeatureFamilyProto.family_name)
}
 ::std::string* FeatureFamilyProto::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.FeatureFamilyProto.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureFamilyProto::release_family_name() {
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureFamilyProto::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.FeatureFamilyProto.family_name)
}

// map<string, int64> name_to_family_idx = 2;
int FeatureFamilyProto::name_to_family_idx_size() const {
  return name_to_family_idx_.size();
}
void FeatureFamilyProto::clear_name_to_family_idx() {
  name_to_family_idx_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
FeatureFamilyProto::name_to_family_idx() const {
  // @@protoc_insertion_point(field_map:hotbox.FeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
FeatureFamilyProto::mutable_name_to_family_idx() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.FeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.MutableMap();
}

// repeated int64 global_idx = 3;
int FeatureFamilyProto::global_idx_size() const {
  return global_idx_.size();
}
void FeatureFamilyProto::clear_global_idx() {
  global_idx_.Clear();
}
 ::google::protobuf::int64 FeatureFamilyProto::global_idx(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureFamilyProto.global_idx)
  return global_idx_.Get(index);
}
 void FeatureFamilyProto::set_global_idx(int index, ::google::protobuf::int64 value) {
  global_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FeatureFamilyProto.global_idx)
}
 void FeatureFamilyProto::add_global_idx(::google::protobuf::int64 value) {
  global_idx_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FeatureFamilyProto.global_idx)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FeatureFamilyProto::global_idx() const {
  // @@protoc_insertion_point(field_list:hotbox.FeatureFamilyProto.global_idx)
  return global_idx_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FeatureFamilyProto::mutable_global_idx() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FeatureFamilyProto.global_idx)
  return &global_idx_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SelfContainedFeatureFamilyProto::kFamilyNameFieldNumber;
const int SelfContainedFeatureFamilyProto::kNameToFamilyIdxFieldNumber;
const int SelfContainedFeatureFamilyProto::kFeaturesFieldNumber;
#endif  // !_MSC_VER

SelfContainedFeatureFamilyProto::SelfContainedFeatureFamilyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.SelfContainedFeatureFamilyProto)
}

void SelfContainedFeatureFamilyProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SelfContainedFeatureFamilyProto::SelfContainedFeatureFamilyProto(const SelfContainedFeatureFamilyProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.SelfContainedFeatureFamilyProto)
}

void SelfContainedFeatureFamilyProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  family_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_to_family_idx_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  name_to_family_idx_.SetEntryDescriptor(
      &::hotbox::SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry_descriptor_);
}

SelfContainedFeatureFamilyProto::~SelfContainedFeatureFamilyProto() {
  // @@protoc_insertion_point(destructor:hotbox.SelfContainedFeatureFamilyProto)
  SharedDtor();
}

void SelfContainedFeatureFamilyProto::SharedDtor() {
  family_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SelfContainedFeatureFamilyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfContainedFeatureFamilyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfContainedFeatureFamilyProto_descriptor_;
}

const SelfContainedFeatureFamilyProto& SelfContainedFeatureFamilyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

SelfContainedFeatureFamilyProto* SelfContainedFeatureFamilyProto::default_instance_ = NULL;

SelfContainedFeatureFamilyProto* SelfContainedFeatureFamilyProto::New(::google::protobuf::Arena* arena) const {
  SelfContainedFeatureFamilyProto* n = new SelfContainedFeatureFamilyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelfContainedFeatureFamilyProto::Clear() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_to_family_idx_.Clear();
  features_.Clear();
}

bool SelfContainedFeatureFamilyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.SelfContainedFeatureFamilyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string family_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SelfContainedFeatureFamilyProto.family_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name_to_family_idx;
        break;
      }

      // map<string, int64> name_to_family_idx = 2;
      case 2: {
        if (tag == 18) {
         parse_name_to_family_idx:
          DO_(input->IncrementRecursionDepth());
         parse_loop_name_to_family_idx:
          ::google::protobuf::scoped_ptr<SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry> entry(name_to_family_idx_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_name_to_family_idx())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SelfContainedFeatureFamilyProto.NameToFamilyIdxEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_name_to_family_idx;
        if (input->ExpectTag(26)) goto parse_loop_features;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .hotbox.Feature features = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_features;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.SelfContainedFeatureFamilyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.SelfContainedFeatureFamilyProto)
  return false;
#undef DO_
}

void SelfContainedFeatureFamilyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.SelfContainedFeatureFamilyProto)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SelfContainedFeatureFamilyProto.family_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->family_name(), output);
  }

  // map<string, int64> name_to_family_idx = 2;
  {
    ::google::protobuf::scoped_ptr<SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->name_to_family_idx().begin();
        it != this->name_to_family_idx().end(); ++it) {
      entry.reset(name_to_family_idx_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "hotbox.SelfContainedFeatureFamilyProto.NameToFamilyIdxEntry.key");
    }
  }

  // repeated .hotbox.Feature features = 3;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->features(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.SelfContainedFeatureFamilyProto)
}

::google::protobuf::uint8* SelfContainedFeatureFamilyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.SelfContainedFeatureFamilyProto)
  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SelfContainedFeatureFamilyProto.family_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->family_name(), target);
  }

  // map<string, int64> name_to_family_idx = 2;
  {
    ::google::protobuf::scoped_ptr<SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->name_to_family_idx().begin();
        it != this->name_to_family_idx().end(); ++it) {
      entry.reset(name_to_family_idx_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "hotbox.SelfContainedFeatureFamilyProto.NameToFamilyIdxEntry.key");
    }
  }

  // repeated .hotbox.Feature features = 3;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->features(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.SelfContainedFeatureFamilyProto)
  return target;
}

int SelfContainedFeatureFamilyProto::ByteSize() const {
  int total_size = 0;

  // optional string family_name = 1;
  if (this->family_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->family_name());
  }

  // map<string, int64> name_to_family_idx = 2;
  total_size += 1 * this->name_to_family_idx_size();
  {
    ::google::protobuf::scoped_ptr<SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->name_to_family_idx().begin();
        it != this->name_to_family_idx().end(); ++it) {
      entry.reset(name_to_family_idx_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .hotbox.Feature features = 3;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfContainedFeatureFamilyProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SelfContainedFeatureFamilyProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelfContainedFeatureFamilyProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfContainedFeatureFamilyProto::MergeFrom(const SelfContainedFeatureFamilyProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  name_to_family_idx_.MergeFrom(from.name_to_family_idx_);
  features_.MergeFrom(from.features_);
  if (from.family_name().size() > 0) {

    family_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
}

void SelfContainedFeatureFamilyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfContainedFeatureFamilyProto::CopyFrom(const SelfContainedFeatureFamilyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfContainedFeatureFamilyProto::IsInitialized() const {

  return true;
}

void SelfContainedFeatureFamilyProto::Swap(SelfContainedFeatureFamilyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfContainedFeatureFamilyProto::InternalSwap(SelfContainedFeatureFamilyProto* other) {
  family_name_.Swap(&other->family_name_);
  name_to_family_idx_.Swap(&other->name_to_family_idx_);
  features_.UnsafeArenaSwap(&other->features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelfContainedFeatureFamilyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfContainedFeatureFamilyProto_descriptor_;
  metadata.reflection = SelfContainedFeatureFamilyProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelfContainedFeatureFamilyProto

// optional string family_name = 1;
void SelfContainedFeatureFamilyProto::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SelfContainedFeatureFamilyProto::family_name() const {
  // @@protoc_insertion_point(field_get:hotbox.SelfContainedFeatureFamilyProto.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfContainedFeatureFamilyProto::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SelfContainedFeatureFamilyProto.family_name)
}
 void SelfContainedFeatureFamilyProto::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SelfContainedFeatureFamilyProto.family_name)
}
 void SelfContainedFeatureFamilyProto::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SelfContainedFeatureFamilyProto.family_name)
}
 ::std::string* SelfContainedFeatureFamilyProto::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SelfContainedFeatureFamilyProto.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelfContainedFeatureFamilyProto::release_family_name() {
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelfContainedFeatureFamilyProto::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SelfContainedFeatureFamilyProto.family_name)
}

// map<string, int64> name_to_family_idx = 2;
int SelfContainedFeatureFamilyProto::name_to_family_idx_size() const {
  return name_to_family_idx_.size();
}
void SelfContainedFeatureFamilyProto::clear_name_to_family_idx() {
  name_to_family_idx_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
SelfContainedFeatureFamilyProto::name_to_family_idx() const {
  // @@protoc_insertion_point(field_map:hotbox.SelfContainedFeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
SelfContainedFeatureFamilyProto::mutable_name_to_family_idx() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.SelfContainedFeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.MutableMap();
}

// repeated .hotbox.Feature features = 3;
int SelfContainedFeatureFamilyProto::features_size() const {
  return features_.size();
}
void SelfContainedFeatureFamilyProto::clear_features() {
  features_.Clear();
}
const ::hotbox::Feature& SelfContainedFeatureFamilyProto::features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_.Get(index);
}
::hotbox::Feature* SelfContainedFeatureFamilyProto::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_.Mutable(index);
}
::hotbox::Feature* SelfContainedFeatureFamilyProto::add_features() {
  // @@protoc_insertion_point(field_add:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
SelfContainedFeatureFamilyProto::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SelfContainedFeatureFamilyProto.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
SelfContainedFeatureFamilyProto::features() const {
  // @@protoc_insertion_point(field_list:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SchemaConfig::kIntLabelFieldNumber;
const int SchemaConfig::kUseDenseWeightFieldNumber;
const int SchemaConfig::kNumUniqueValuesFactorFieldNumber;
#endif  // !_MSC_VER

SchemaConfig::SchemaConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.SchemaConfig)
}

void SchemaConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SchemaConfig::SchemaConfig(const SchemaConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.SchemaConfig)
}

void SchemaConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  int_label_ = false;
  use_dense_weight_ = false;
  num_unique_values_factor_ = 0;
}

SchemaConfig::~SchemaConfig() {
  // @@protoc_insertion_point(destructor:hotbox.SchemaConfig)
  SharedDtor();
}

void SchemaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaConfig_descriptor_;
}

const SchemaConfig& SchemaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

SchemaConfig* SchemaConfig::default_instance_ = NULL;

SchemaConfig* SchemaConfig::New(::google::protobuf::Arena* arena) const {
  SchemaConfig* n = new SchemaConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchemaConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SchemaConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(int_label_, num_unique_values_factor_);

#undef ZR_HELPER_
#undef ZR_

}

bool SchemaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.SchemaConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool int_label = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &int_label_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_dense_weight;
        break;
      }

      // optional bool use_dense_weight = 2;
      case 2: {
        if (tag == 16) {
         parse_use_dense_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dense_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_unique_values_factor;
        break;
      }

      // optional int32 num_unique_values_factor = 3;
      case 3: {
        if (tag == 24) {
         parse_num_unique_values_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_unique_values_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.SchemaConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.SchemaConfig)
  return false;
#undef DO_
}

void SchemaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.SchemaConfig)
  // optional bool int_label = 1;
  if (this->int_label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->int_label(), output);
  }

  // optional bool use_dense_weight = 2;
  if (this->use_dense_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_dense_weight(), output);
  }

  // optional int32 num_unique_values_factor = 3;
  if (this->num_unique_values_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_unique_values_factor(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.SchemaConfig)
}

::google::protobuf::uint8* SchemaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.SchemaConfig)
  // optional bool int_label = 1;
  if (this->int_label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->int_label(), target);
  }

  // optional bool use_dense_weight = 2;
  if (this->use_dense_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_dense_weight(), target);
  }

  // optional int32 num_unique_values_factor = 3;
  if (this->num_unique_values_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_unique_values_factor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.SchemaConfig)
  return target;
}

int SchemaConfig::ByteSize() const {
  int total_size = 0;

  // optional bool int_label = 1;
  if (this->int_label() != 0) {
    total_size += 1 + 1;
  }

  // optional bool use_dense_weight = 2;
  if (this->use_dense_weight() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_unique_values_factor = 3;
  if (this->num_unique_values_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_unique_values_factor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SchemaConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SchemaConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaConfig::MergeFrom(const SchemaConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.int_label() != 0) {
    set_int_label(from.int_label());
  }
  if (from.use_dense_weight() != 0) {
    set_use_dense_weight(from.use_dense_weight());
  }
  if (from.num_unique_values_factor() != 0) {
    set_num_unique_values_factor(from.num_unique_values_factor());
  }
}

void SchemaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaConfig::CopyFrom(const SchemaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaConfig::IsInitialized() const {

  return true;
}

void SchemaConfig::Swap(SchemaConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchemaConfig::InternalSwap(SchemaConfig* other) {
  std::swap(int_label_, other->int_label_);
  std::swap(use_dense_weight_, other->use_dense_weight_);
  std::swap(num_unique_values_factor_, other->num_unique_values_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchemaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaConfig_descriptor_;
  metadata.reflection = SchemaConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchemaConfig

// optional bool int_label = 1;
void SchemaConfig::clear_int_label() {
  int_label_ = false;
}
 bool SchemaConfig::int_label() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaConfig.int_label)
  return int_label_;
}
 void SchemaConfig::set_int_label(bool value) {
  
  int_label_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaConfig.int_label)
}

// optional bool use_dense_weight = 2;
void SchemaConfig::clear_use_dense_weight() {
  use_dense_weight_ = false;
}
 bool SchemaConfig::use_dense_weight() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaConfig.use_dense_weight)
  return use_dense_weight_;
}
 void SchemaConfig::set_use_dense_weight(bool value) {
  
  use_dense_weight_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaConfig.use_dense_weight)
}

// optional int32 num_unique_values_factor = 3;
void SchemaConfig::clear_num_unique_values_factor() {
  num_unique_values_factor_ = 0;
}
 ::google::protobuf::int32 SchemaConfig::num_unique_values_factor() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaConfig.num_unique_values_factor)
  return num_unique_values_factor_;
}
 void SchemaConfig::set_num_unique_values_factor(::google::protobuf::int32 value) {
  
  num_unique_values_factor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaConfig.num_unique_values_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SchemaProto::kVersionFieldNumber;
const int SchemaProto::kFamiliesFieldNumber;
const int SchemaProto::kOutputFamiliesFieldNumber;
const int SchemaProto::kAppendStoreOffsetFieldNumber;
const int SchemaProto::kFeaturesFieldNumber;
#endif  // !_MSC_VER

SchemaProto::SchemaProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.SchemaProto)
}

void SchemaProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  append_store_offset_ = const_cast< ::hotbox::DatumProtoStoreOffset*>(&::hotbox::DatumProtoStoreOffset::default_instance());
}

SchemaProto::SchemaProto(const SchemaProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.SchemaProto)
}

void SchemaProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  families_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  families_.SetEntryDescriptor(
      &::hotbox::SchemaProto_FamiliesEntry_descriptor_);
  append_store_offset_ = NULL;
}

SchemaProto::~SchemaProto() {
  // @@protoc_insertion_point(destructor:hotbox.SchemaProto)
  SharedDtor();
}

void SchemaProto::SharedDtor() {
  if (this != default_instance_) {
    delete append_store_offset_;
  }
}

void SchemaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaProto_descriptor_;
}

const SchemaProto& SchemaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

SchemaProto* SchemaProto::default_instance_ = NULL;

SchemaProto* SchemaProto::New(::google::protobuf::Arena* arena) const {
  SchemaProto* n = new SchemaProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchemaProto::Clear() {
  version_ = 0u;
  if (GetArenaNoVirtual() == NULL && append_store_offset_ != NULL) delete append_store_offset_;
  append_store_offset_ = NULL;
  families_.Clear();
  output_families_.Clear();
  features_.Clear();
}

bool SchemaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.SchemaProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_families;
        break;
      }

      // map<string, .hotbox.FeatureFamilyProto> families = 2;
      case 2: {
        if (tag == 18) {
         parse_families:
          DO_(input->IncrementRecursionDepth());
         parse_loop_families:
          ::google::protobuf::scoped_ptr<SchemaProto_FamiliesEntry> entry(families_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_families())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SchemaProto.FamiliesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_families;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_output_families;
        break;
      }

      // repeated string output_families = 3;
      case 3: {
        if (tag == 26) {
         parse_output_families:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output_families()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_families(this->output_families_size() - 1).data(),
            this->output_families(this->output_families_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SchemaProto.output_families"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_output_families;
        if (input->ExpectTag(34)) goto parse_features;
        break;
      }

      // repeated .hotbox.Feature features = 4;
      case 4: {
        if (tag == 34) {
         parse_features:
          DO_(input->IncrementRecursionDepth());
         parse_loop_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_features;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_append_store_offset;
        break;
      }

      // optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
      case 5: {
        if (tag == 42) {
         parse_append_store_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_store_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.SchemaProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.SchemaProto)
  return false;
#undef DO_
}

void SchemaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.SchemaProto)
  // optional uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // map<string, .hotbox.FeatureFamilyProto> families = 2;
  {
    ::google::protobuf::scoped_ptr<SchemaProto_FamiliesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >::const_iterator
        it = this->families().begin();
        it != this->families().end(); ++it) {
      entry.reset(families_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "hotbox.SchemaProto.FamiliesEntry.key");
    }
  }

  // repeated string output_families = 3;
  for (int i = 0; i < this->output_families_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_families(i).data(), this->output_families(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SchemaProto.output_families");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->output_families(i), output);
  }

  // repeated .hotbox.Feature features = 4;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->features(i), output);
  }

  // optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
  if (this->has_append_store_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->append_store_offset_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.SchemaProto)
}

::google::protobuf::uint8* SchemaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.SchemaProto)
  // optional uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // map<string, .hotbox.FeatureFamilyProto> families = 2;
  {
    ::google::protobuf::scoped_ptr<SchemaProto_FamiliesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >::const_iterator
        it = this->families().begin();
        it != this->families().end(); ++it) {
      entry.reset(families_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "hotbox.SchemaProto.FamiliesEntry.key");
    }
  }

  // repeated string output_families = 3;
  for (int i = 0; i < this->output_families_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_families(i).data(), this->output_families(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SchemaProto.output_families");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->output_families(i), target);
  }

  // repeated .hotbox.Feature features = 4;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->features(i), target);
  }

  // optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
  if (this->has_append_store_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->append_store_offset_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.SchemaProto)
  return target;
}

int SchemaProto::ByteSize() const {
  int total_size = 0;

  // optional uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
  if (this->has_append_store_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->append_store_offset_);
  }

  // map<string, .hotbox.FeatureFamilyProto> families = 2;
  total_size += 1 * this->families_size();
  {
    ::google::protobuf::scoped_ptr<SchemaProto_FamiliesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >::const_iterator
        it = this->families().begin();
        it != this->families().end(); ++it) {
      entry.reset(families_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string output_families = 3;
  total_size += 1 * this->output_families_size();
  for (int i = 0; i < this->output_families_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output_families(i));
  }

  // repeated .hotbox.Feature features = 4;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SchemaProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SchemaProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SchemaProto::MergeFrom(const SchemaProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  families_.MergeFrom(from.families_);
  output_families_.MergeFrom(from.output_families_);
  features_.MergeFrom(from.features_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.has_append_store_offset()) {
    mutable_append_store_offset()->::hotbox::DatumProtoStoreOffset::MergeFrom(from.append_store_offset());
  }
}

void SchemaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaProto::CopyFrom(const SchemaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaProto::IsInitialized() const {

  return true;
}

void SchemaProto::Swap(SchemaProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchemaProto::InternalSwap(SchemaProto* other) {
  std::swap(version_, other->version_);
  families_.Swap(&other->families_);
  output_families_.UnsafeArenaSwap(&other->output_families_);
  std::swap(append_store_offset_, other->append_store_offset_);
  features_.UnsafeArenaSwap(&other->features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchemaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaProto_descriptor_;
  metadata.reflection = SchemaProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchemaProto

// optional uint32 version = 1;
void SchemaProto::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 SchemaProto::version() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.version)
  return version_;
}
 void SchemaProto::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaProto.version)
}

// map<string, .hotbox.FeatureFamilyProto> families = 2;
int SchemaProto::families_size() const {
  return families_.size();
}
void SchemaProto::clear_families() {
  families_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >&
SchemaProto::families() const {
  // @@protoc_insertion_point(field_map:hotbox.SchemaProto.families)
  return families_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >*
SchemaProto::mutable_families() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.SchemaProto.families)
  return families_.MutableMap();
}

// repeated string output_families = 3;
int SchemaProto::output_families_size() const {
  return output_families_.size();
}
void SchemaProto::clear_output_families() {
  output_families_.Clear();
}
 const ::std::string& SchemaProto::output_families(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.output_families)
  return output_families_.Get(index);
}
 ::std::string* SchemaProto::mutable_output_families(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SchemaProto.output_families)
  return output_families_.Mutable(index);
}
 void SchemaProto::set_output_families(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.SchemaProto.output_families)
  output_families_.Mutable(index)->assign(value);
}
 void SchemaProto::set_output_families(int index, const char* value) {
  output_families_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.SchemaProto.output_families)
}
 void SchemaProto::set_output_families(int index, const char* value, size_t size) {
  output_families_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.SchemaProto.output_families)
}
 ::std::string* SchemaProto::add_output_families() {
  return output_families_.Add();
}
 void SchemaProto::add_output_families(const ::std::string& value) {
  output_families_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.SchemaProto.output_families)
}
 void SchemaProto::add_output_families(const char* value) {
  output_families_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.SchemaProto.output_families)
}
 void SchemaProto::add_output_families(const char* value, size_t size) {
  output_families_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.SchemaProto.output_families)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SchemaProto::output_families() const {
  // @@protoc_insertion_point(field_list:hotbox.SchemaProto.output_families)
  return output_families_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SchemaProto::mutable_output_families() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SchemaProto.output_families)
  return &output_families_;
}

// optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
bool SchemaProto::has_append_store_offset() const {
  return !_is_default_instance_ && append_store_offset_ != NULL;
}
void SchemaProto::clear_append_store_offset() {
  if (GetArenaNoVirtual() == NULL && append_store_offset_ != NULL) delete append_store_offset_;
  append_store_offset_ = NULL;
}
const ::hotbox::DatumProtoStoreOffset& SchemaProto::append_store_offset() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.append_store_offset)
  return append_store_offset_ != NULL ? *append_store_offset_ : *default_instance_->append_store_offset_;
}
::hotbox::DatumProtoStoreOffset* SchemaProto::mutable_append_store_offset() {
  
  if (append_store_offset_ == NULL) {
    append_store_offset_ = new ::hotbox::DatumProtoStoreOffset;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SchemaProto.append_store_offset)
  return append_store_offset_;
}
::hotbox::DatumProtoStoreOffset* SchemaProto::release_append_store_offset() {
  
  ::hotbox::DatumProtoStoreOffset* temp = append_store_offset_;
  append_store_offset_ = NULL;
  return temp;
}
void SchemaProto::set_allocated_append_store_offset(::hotbox::DatumProtoStoreOffset* append_store_offset) {
  delete append_store_offset_;
  append_store_offset_ = append_store_offset;
  if (append_store_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SchemaProto.append_store_offset)
}

// repeated .hotbox.Feature features = 4;
int SchemaProto::features_size() const {
  return features_.size();
}
void SchemaProto::clear_features() {
  features_.Clear();
}
const ::hotbox::Feature& SchemaProto::features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.features)
  return features_.Get(index);
}
::hotbox::Feature* SchemaProto::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SchemaProto.features)
  return features_.Mutable(index);
}
::hotbox::Feature* SchemaProto::add_features() {
  // @@protoc_insertion_point(field_add:hotbox.SchemaProto.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
SchemaProto::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SchemaProto.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
SchemaProto::features() const {
  // @@protoc_insertion_point(field_list:hotbox.SchemaProto.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int OSchemaProto::kFeatureNamesFieldNumber;
const int OSchemaProto::kFamilyNamesFieldNumber;
const int OSchemaProto::kFamilyOffsetsFieldNumber;
#endif  // !_MSC_VER

OSchemaProto::OSchemaProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.OSchemaProto)
}

void OSchemaProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OSchemaProto::OSchemaProto(const OSchemaProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.OSchemaProto)
}

void OSchemaProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

OSchemaProto::~OSchemaProto() {
  // @@protoc_insertion_point(destructor:hotbox.OSchemaProto)
  SharedDtor();
}

void OSchemaProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OSchemaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OSchemaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OSchemaProto_descriptor_;
}

const OSchemaProto& OSchemaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  return *default_instance_;
}

OSchemaProto* OSchemaProto::default_instance_ = NULL;

OSchemaProto* OSchemaProto::New(::google::protobuf::Arena* arena) const {
  OSchemaProto* n = new OSchemaProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OSchemaProto::Clear() {
  feature_names_.Clear();
  family_names_.Clear();
  family_offsets_.Clear();
}

bool OSchemaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.OSchemaProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string feature_names = 1;
      case 1: {
        if (tag == 10) {
         parse_feature_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feature_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feature_names(this->feature_names_size() - 1).data(),
            this->feature_names(this->feature_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.OSchemaProto.feature_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_feature_names;
        if (input->ExpectTag(18)) goto parse_family_names;
        break;
      }

      // repeated string family_names = 2;
      case 2: {
        if (tag == 18) {
         parse_family_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_family_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->family_names(this->family_names_size() - 1).data(),
            this->family_names(this->family_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.OSchemaProto.family_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_family_names;
        if (input->ExpectTag(26)) goto parse_family_offsets;
        break;
      }

      // repeated int64 family_offsets = 3;
      case 3: {
        if (tag == 26) {
         parse_family_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_family_offsets())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_family_offsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.OSchemaProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.OSchemaProto)
  return false;
#undef DO_
}

void OSchemaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.OSchemaProto)
  // repeated string feature_names = 1;
  for (int i = 0; i < this->feature_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature_names(i).data(), this->feature_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.OSchemaProto.feature_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feature_names(i), output);
  }

  // repeated string family_names = 2;
  for (int i = 0; i < this->family_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_names(i).data(), this->family_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.OSchemaProto.family_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->family_names(i), output);
  }

  // repeated int64 family_offsets = 3;
  if (this->family_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_family_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->family_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->family_offsets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.OSchemaProto)
}

::google::protobuf::uint8* OSchemaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.OSchemaProto)
  // repeated string feature_names = 1;
  for (int i = 0; i < this->feature_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature_names(i).data(), this->feature_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.OSchemaProto.feature_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->feature_names(i), target);
  }

  // repeated string family_names = 2;
  for (int i = 0; i < this->family_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->family_names(i).data(), this->family_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.OSchemaProto.family_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->family_names(i), target);
  }

  // repeated int64 family_offsets = 3;
  if (this->family_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _family_offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->family_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->family_offsets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.OSchemaProto)
  return target;
}

int OSchemaProto::ByteSize() const {
  int total_size = 0;

  // repeated string feature_names = 1;
  total_size += 1 * this->feature_names_size();
  for (int i = 0; i < this->feature_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feature_names(i));
  }

  // repeated string family_names = 2;
  total_size += 1 * this->family_names_size();
  for (int i = 0; i < this->family_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->family_names(i));
  }

  // repeated int64 family_offsets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->family_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->family_offsets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _family_offsets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSchemaProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OSchemaProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OSchemaProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OSchemaProto::MergeFrom(const OSchemaProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  feature_names_.MergeFrom(from.feature_names_);
  family_names_.MergeFrom(from.family_names_);
  family_offsets_.MergeFrom(from.family_offsets_);
}

void OSchemaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSchemaProto::CopyFrom(const OSchemaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSchemaProto::IsInitialized() const {

  return true;
}

void OSchemaProto::Swap(OSchemaProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OSchemaProto::InternalSwap(OSchemaProto* other) {
  feature_names_.UnsafeArenaSwap(&other->feature_names_);
  family_names_.UnsafeArenaSwap(&other->family_names_);
  family_offsets_.UnsafeArenaSwap(&other->family_offsets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OSchemaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OSchemaProto_descriptor_;
  metadata.reflection = OSchemaProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OSchemaProto

// repeated string feature_names = 1;
int OSchemaProto::feature_names_size() const {
  return feature_names_.size();
}
void OSchemaProto::clear_feature_names() {
  feature_names_.Clear();
}
 const ::std::string& OSchemaProto::feature_names(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.OSchemaProto.feature_names)
  return feature_names_.Get(index);
}
 ::std::string* OSchemaProto::mutable_feature_names(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.OSchemaProto.feature_names)
  return feature_names_.Mutable(index);
}
 void OSchemaProto::set_feature_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.OSchemaProto.feature_names)
  feature_names_.Mutable(index)->assign(value);
}
 void OSchemaProto::set_feature_names(int index, const char* value) {
  feature_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.OSchemaProto.feature_names)
}
 void OSchemaProto::set_feature_names(int index, const char* value, size_t size) {
  feature_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.OSchemaProto.feature_names)
}
 ::std::string* OSchemaProto::add_feature_names() {
  return feature_names_.Add();
}
 void OSchemaProto::add_feature_names(const ::std::string& value) {
  feature_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.OSchemaProto.feature_names)
}
 void OSchemaProto::add_feature_names(const char* value) {
  feature_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.OSchemaProto.feature_names)
}
 void OSchemaProto::add_feature_names(const char* value, size_t size) {
  feature_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.OSchemaProto.feature_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
OSchemaProto::feature_names() const {
  // @@protoc_insertion_point(field_list:hotbox.OSchemaProto.feature_names)
  return feature_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
OSchemaProto::mutable_feature_names() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.OSchemaProto.feature_names)
  return &feature_names_;
}

// repeated string family_names = 2;
int OSchemaProto::family_names_size() const {
  return family_names_.size();
}
void OSchemaProto::clear_family_names() {
  family_names_.Clear();
}
 const ::std::string& OSchemaProto::family_names(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.OSchemaProto.family_names)
  return family_names_.Get(index);
}
 ::std::string* OSchemaProto::mutable_family_names(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.OSchemaProto.family_names)
  return family_names_.Mutable(index);
}
 void OSchemaProto::set_family_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.OSchemaProto.family_names)
  family_names_.Mutable(index)->assign(value);
}
 void OSchemaProto::set_family_names(int index, const char* value) {
  family_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.OSchemaProto.family_names)
}
 void OSchemaProto::set_family_names(int index, const char* value, size_t size) {
  family_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.OSchemaProto.family_names)
}
 ::std::string* OSchemaProto::add_family_names() {
  return family_names_.Add();
}
 void OSchemaProto::add_family_names(const ::std::string& value) {
  family_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.OSchemaProto.family_names)
}
 void OSchemaProto::add_family_names(const char* value) {
  family_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.OSchemaProto.family_names)
}
 void OSchemaProto::add_family_names(const char* value, size_t size) {
  family_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.OSchemaProto.family_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
OSchemaProto::family_names() const {
  // @@protoc_insertion_point(field_list:hotbox.OSchemaProto.family_names)
  return family_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
OSchemaProto::mutable_family_names() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.OSchemaProto.family_names)
  return &family_names_;
}

// repeated int64 family_offsets = 3;
int OSchemaProto::family_offsets_size() const {
  return family_offsets_.size();
}
void OSchemaProto::clear_family_offsets() {
  family_offsets_.Clear();
}
 ::google::protobuf::int64 OSchemaProto::family_offsets(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.OSchemaProto.family_offsets)
  return family_offsets_.Get(index);
}
 void OSchemaProto::set_family_offsets(int index, ::google::protobuf::int64 value) {
  family_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.OSchemaProto.family_offsets)
}
 void OSchemaProto::add_family_offsets(::google::protobuf::int64 value) {
  family_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.OSchemaProto.family_offsets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
OSchemaProto::family_offsets() const {
  // @@protoc_insertion_point(field_list:hotbox.OSchemaProto.family_offsets)
  return family_offsets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
OSchemaProto::mutable_family_offsets() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.OSchemaProto.family_offsets)
  return &family_offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)
