// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema/proto/schema.proto

#ifndef PROTOBUF_schema_2fproto_2fschema_2eproto__INCLUDED
#define PROTOBUF_schema_2fproto_2fschema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

class DatumProto;
class DatumProtoStoreOffset;
class Feature;
class FeatureFamilyProto;
class FeatureStatProto;
class OSchemaProto;
class SchemaConfig;
class SchemaProto;
class SelfContainedFeatureFamilyProto;

enum FeatureType {
  UNKNOWN_FEATURE_TYPE = 0,
  CATEGORICAL = 1,
  NUMERICAL = 2,
  BYTES = 3,
  FeatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FeatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FeatureType_IsValid(int value);
const FeatureType FeatureType_MIN = UNKNOWN_FEATURE_TYPE;
const FeatureType FeatureType_MAX = BYTES;
const int FeatureType_ARRAYSIZE = FeatureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureType_descriptor();
inline const ::std::string& FeatureType_Name(FeatureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureType_descriptor(), value);
}
inline bool FeatureType_Parse(
    const ::std::string& name, FeatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureType>(
    FeatureType_descriptor(), name, value);
}
enum OutputStoreType {
  SPARSE = 0,
  DENSE = 1,
  OutputStoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OutputStoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OutputStoreType_IsValid(int value);
const OutputStoreType OutputStoreType_MIN = SPARSE;
const OutputStoreType OutputStoreType_MAX = DENSE;
const int OutputStoreType_ARRAYSIZE = OutputStoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutputStoreType_descriptor();
inline const ::std::string& OutputStoreType_Name(OutputStoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutputStoreType_descriptor(), value);
}
inline bool OutputStoreType_Parse(
    const ::std::string& name, OutputStoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutputStoreType>(
    OutputStoreType_descriptor(), name, value);
}
enum FeatureIndexType {
  INT64 = 0,
  INT32 = 1,
  FeatureIndexType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FeatureIndexType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FeatureIndexType_IsValid(int value);
const FeatureIndexType FeatureIndexType_MIN = INT64;
const FeatureIndexType FeatureIndexType_MAX = INT32;
const int FeatureIndexType_ARRAYSIZE = FeatureIndexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureIndexType_descriptor();
inline const ::std::string& FeatureIndexType_Name(FeatureIndexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureIndexType_descriptor(), value);
}
inline bool FeatureIndexType_Parse(
    const ::std::string& name, FeatureIndexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureIndexType>(
    FeatureIndexType_descriptor(), name, value);
}
enum FeatureStoreType {
  OUTPUT = 0,
  DENSE_CAT = 1,
  DENSE_NUM = 2,
  DENSE_BYTES = 3,
  SPARSE_CAT = 4,
  SPARSE_NUM = 5,
  SPARSE_BYTES = 6,
  NUM_STORE_TYPES = 7,
  FeatureStoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FeatureStoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FeatureStoreType_IsValid(int value);
const FeatureStoreType FeatureStoreType_MIN = OUTPUT;
const FeatureStoreType FeatureStoreType_MAX = NUM_STORE_TYPES;
const int FeatureStoreType_ARRAYSIZE = FeatureStoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureStoreType_descriptor();
inline const ::std::string& FeatureStoreType_Name(FeatureStoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureStoreType_descriptor(), value);
}
inline bool FeatureStoreType_Parse(
    const ::std::string& name, FeatureStoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureStoreType>(
    FeatureStoreType_descriptor(), name, value);
}
// ===================================================================

class FeatureStatProto : public ::google::protobuf::Message {
 public:
  FeatureStatProto();
  virtual ~FeatureStatProto();

  FeatureStatProto(const FeatureStatProto& from);

  inline FeatureStatProto& operator=(const FeatureStatProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureStatProto& default_instance();

  void Swap(FeatureStatProto* other);

  // implements Message ----------------------------------------------

  inline FeatureStatProto* New() const { return New(NULL); }

  FeatureStatProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureStatProto& from);
  void MergeFrom(const FeatureStatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureStatProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 unique_cat_values = 6;
  int unique_cat_values_size() const;
  void clear_unique_cat_values();
  static const int kUniqueCatValuesFieldNumber = 6;
  ::google::protobuf::int32 unique_cat_values(int index) const;
  void set_unique_cat_values(int index, ::google::protobuf::int32 value);
  void add_unique_cat_values(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unique_cat_values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unique_cat_values();

  // repeated string unique_bytes_values = 7;
  int unique_bytes_values_size() const;
  void clear_unique_bytes_values();
  static const int kUniqueBytesValuesFieldNumber = 7;
  const ::std::string& unique_bytes_values(int index) const;
  ::std::string* mutable_unique_bytes_values(int index);
  void set_unique_bytes_values(int index, const ::std::string& value);
  void set_unique_bytes_values(int index, const char* value);
  void set_unique_bytes_values(int index, const char* value, size_t size);
  ::std::string* add_unique_bytes_values();
  void add_unique_bytes_values(const ::std::string& value);
  void add_unique_bytes_values(const char* value);
  void add_unique_bytes_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& unique_bytes_values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unique_bytes_values();

  // optional double min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  double min() const;
  void set_min(double value);

  // optional double max = 3;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  double max() const;
  void set_max(double value);

  // optional double sum = 4;
  void clear_sum();
  static const int kSumFieldNumber = 4;
  double sum() const;
  void set_sum(double value);

  // @@protoc_insertion_point(class_scope:hotbox.FeatureStatProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unique_cat_values_;
  mutable int _unique_cat_values_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unique_bytes_values_;
  double min_;
  double max_;
  double sum_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static FeatureStatProto* default_instance_;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .hotbox.FeatureStoreType store_type = 2;
  void clear_store_type();
  static const int kStoreTypeFieldNumber = 2;
  ::hotbox::FeatureStoreType store_type() const;
  void set_store_type(::hotbox::FeatureStoreType value);

  // optional int64 store_offset = 3;
  void clear_store_offset();
  static const int kStoreOffsetFieldNumber = 3;
  ::google::protobuf::int64 store_offset() const;
  void set_store_offset(::google::protobuf::int64 value);

  // optional int64 global_offset = 6;
  void clear_global_offset();
  static const int kGlobalOffsetFieldNumber = 6;
  ::google::protobuf::int64 global_offset() const;
  void set_global_offset(::google::protobuf::int64 value);

  // optional bool is_factor = 5;
  void clear_is_factor();
  static const int kIsFactorFieldNumber = 5;
  bool is_factor() const;
  void set_is_factor(bool value);

  // @@protoc_insertion_point(class_scope:hotbox.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 store_offset_;
  int store_type_;
  bool is_factor_;
  ::google::protobuf::int64 global_offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static Feature* default_instance_;
};
// -------------------------------------------------------------------

class DatumProto : public ::google::protobuf::Message {
 public:
  DatumProto();
  virtual ~DatumProto();

  DatumProto(const DatumProto& from);

  inline DatumProto& operator=(const DatumProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatumProto& default_instance();

  void Swap(DatumProto* other);

  // implements Message ----------------------------------------------

  inline DatumProto* New() const { return New(NULL); }

  DatumProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatumProto& from);
  void MergeFrom(const DatumProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatumProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated int64 dense_cat_store = 1;
  int dense_cat_store_size() const;
  void clear_dense_cat_store();
  static const int kDenseCatStoreFieldNumber = 1;
  ::google::protobuf::int64 dense_cat_store(int index) const;
  void set_dense_cat_store(int index, ::google::protobuf::int64 value);
  void add_dense_cat_store(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dense_cat_store() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dense_cat_store();

  // repeated float dense_num_store = 2;
  int dense_num_store_size() const;
  void clear_dense_num_store();
  static const int kDenseNumStoreFieldNumber = 2;
  float dense_num_store(int index) const;
  void set_dense_num_store(int index, float value);
  void add_dense_num_store(float value);
  const ::google::protobuf::RepeatedField< float >&
      dense_num_store() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dense_num_store();

  // repeated bytes dense_bytes_store = 3;
  int dense_bytes_store_size() const;
  void clear_dense_bytes_store();
  static const int kDenseBytesStoreFieldNumber = 3;
  const ::std::string& dense_bytes_store(int index) const;
  ::std::string* mutable_dense_bytes_store(int index);
  void set_dense_bytes_store(int index, const ::std::string& value);
  void set_dense_bytes_store(int index, const char* value);
  void set_dense_bytes_store(int index, const void* value, size_t size);
  ::std::string* add_dense_bytes_store();
  void add_dense_bytes_store(const ::std::string& value);
  void add_dense_bytes_store(const char* value);
  void add_dense_bytes_store(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dense_bytes_store() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dense_bytes_store();

  // map<uint32, int64> sparse_cat_store = 4;
  int sparse_cat_store_size() const;
  void clear_sparse_cat_store();
  static const int kSparseCatStoreFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >&
      sparse_cat_store() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >*
      mutable_sparse_cat_store();

  // map<uint32, float> sparse_num_store = 5;
  int sparse_num_store_size() const;
  void clear_sparse_num_store();
  static const int kSparseNumStoreFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
      sparse_num_store() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, float >*
      mutable_sparse_num_store();

  // map<uint32, bytes> sparse_bytes_store = 6;
  int sparse_bytes_store_size() const;
  void clear_sparse_bytes_store();
  static const int kSparseBytesStoreFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
      sparse_bytes_store() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
      mutable_sparse_bytes_store();

  // @@protoc_insertion_point(class_scope:hotbox.DatumProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dense_cat_store_;
  mutable int _dense_cat_store_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > dense_num_store_;
  mutable int _dense_num_store_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dense_bytes_store_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 >
      DatumProto_SparseCatStoreEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > sparse_cat_store_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      DatumProto_SparseNumStoreEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > sparse_num_store_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      DatumProto_SparseBytesStoreEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > sparse_bytes_store_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static DatumProto* default_instance_;
};
// -------------------------------------------------------------------

class DatumProtoStoreOffset : public ::google::protobuf::Message {
 public:
  DatumProtoStoreOffset();
  virtual ~DatumProtoStoreOffset();

  DatumProtoStoreOffset(const DatumProtoStoreOffset& from);

  inline DatumProtoStoreOffset& operator=(const DatumProtoStoreOffset& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatumProtoStoreOffset& default_instance();

  void Swap(DatumProtoStoreOffset* other);

  // implements Message ----------------------------------------------

  inline DatumProtoStoreOffset* New() const { return New(NULL); }

  DatumProtoStoreOffset* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatumProtoStoreOffset& from);
  void MergeFrom(const DatumProtoStoreOffset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatumProtoStoreOffset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 offsets = 1;
  int offsets_size() const;
  void clear_offsets();
  static const int kOffsetsFieldNumber = 1;
  ::google::protobuf::int64 offsets(int index) const;
  void set_offsets(int index, ::google::protobuf::int64 value);
  void add_offsets(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_offsets();

  // @@protoc_insertion_point(class_scope:hotbox.DatumProtoStoreOffset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > offsets_;
  mutable int _offsets_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static DatumProtoStoreOffset* default_instance_;
};
// -------------------------------------------------------------------

class FeatureFamilyProto : public ::google::protobuf::Message {
 public:
  FeatureFamilyProto();
  virtual ~FeatureFamilyProto();

  FeatureFamilyProto(const FeatureFamilyProto& from);

  inline FeatureFamilyProto& operator=(const FeatureFamilyProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureFamilyProto& default_instance();

  void Swap(FeatureFamilyProto* other);

  // implements Message ----------------------------------------------

  inline FeatureFamilyProto* New() const { return New(NULL); }

  FeatureFamilyProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureFamilyProto& from);
  void MergeFrom(const FeatureFamilyProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureFamilyProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string family_name = 1;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 1;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // map<string, int64> name_to_family_idx = 2;
  int name_to_family_idx_size() const;
  void clear_name_to_family_idx();
  static const int kNameToFamilyIdxFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
      name_to_family_idx() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
      mutable_name_to_family_idx();

  // repeated int64 global_idx = 3;
  int global_idx_size() const;
  void clear_global_idx();
  static const int kGlobalIdxFieldNumber = 3;
  ::google::protobuf::int64 global_idx(int index) const;
  void set_global_idx(int index, ::google::protobuf::int64 value);
  void add_global_idx(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      global_idx() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_global_idx();

  // @@protoc_insertion_point(class_scope:hotbox.FeatureFamilyProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 >
      FeatureFamilyProto_NameToFamilyIdxEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > name_to_family_idx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > global_idx_;
  mutable int _global_idx_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static FeatureFamilyProto* default_instance_;
};
// -------------------------------------------------------------------

class SelfContainedFeatureFamilyProto : public ::google::protobuf::Message {
 public:
  SelfContainedFeatureFamilyProto();
  virtual ~SelfContainedFeatureFamilyProto();

  SelfContainedFeatureFamilyProto(const SelfContainedFeatureFamilyProto& from);

  inline SelfContainedFeatureFamilyProto& operator=(const SelfContainedFeatureFamilyProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfContainedFeatureFamilyProto& default_instance();

  void Swap(SelfContainedFeatureFamilyProto* other);

  // implements Message ----------------------------------------------

  inline SelfContainedFeatureFamilyProto* New() const { return New(NULL); }

  SelfContainedFeatureFamilyProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfContainedFeatureFamilyProto& from);
  void MergeFrom(const SelfContainedFeatureFamilyProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelfContainedFeatureFamilyProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string family_name = 1;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 1;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // map<string, int64> name_to_family_idx = 2;
  int name_to_family_idx_size() const;
  void clear_name_to_family_idx();
  static const int kNameToFamilyIdxFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
      name_to_family_idx() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
      mutable_name_to_family_idx();

  // repeated .hotbox.Feature features = 3;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  const ::hotbox::Feature& features(int index) const;
  ::hotbox::Feature* mutable_features(int index);
  ::hotbox::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
      features() const;

  // @@protoc_insertion_point(class_scope:hotbox.SelfContainedFeatureFamilyProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 >
      SelfContainedFeatureFamilyProto_NameToFamilyIdxEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > name_to_family_idx_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::Feature > features_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static SelfContainedFeatureFamilyProto* default_instance_;
};
// -------------------------------------------------------------------

class SchemaConfig : public ::google::protobuf::Message {
 public:
  SchemaConfig();
  virtual ~SchemaConfig();

  SchemaConfig(const SchemaConfig& from);

  inline SchemaConfig& operator=(const SchemaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchemaConfig& default_instance();

  void Swap(SchemaConfig* other);

  // implements Message ----------------------------------------------

  inline SchemaConfig* New() const { return New(NULL); }

  SchemaConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SchemaConfig& from);
  void MergeFrom(const SchemaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchemaConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool int_label = 1;
  void clear_int_label();
  static const int kIntLabelFieldNumber = 1;
  bool int_label() const;
  void set_int_label(bool value);

  // optional bool use_dense_weight = 2;
  void clear_use_dense_weight();
  static const int kUseDenseWeightFieldNumber = 2;
  bool use_dense_weight() const;
  void set_use_dense_weight(bool value);

  // optional int32 num_unique_values_factor = 3;
  void clear_num_unique_values_factor();
  static const int kNumUniqueValuesFactorFieldNumber = 3;
  ::google::protobuf::int32 num_unique_values_factor() const;
  void set_num_unique_values_factor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hotbox.SchemaConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool int_label_;
  bool use_dense_weight_;
  ::google::protobuf::int32 num_unique_values_factor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static SchemaConfig* default_instance_;
};
// -------------------------------------------------------------------

class SchemaProto : public ::google::protobuf::Message {
 public:
  SchemaProto();
  virtual ~SchemaProto();

  SchemaProto(const SchemaProto& from);

  inline SchemaProto& operator=(const SchemaProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchemaProto& default_instance();

  void Swap(SchemaProto* other);

  // implements Message ----------------------------------------------

  inline SchemaProto* New() const { return New(NULL); }

  SchemaProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SchemaProto& from);
  void MergeFrom(const SchemaProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchemaProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // map<string, .hotbox.FeatureFamilyProto> families = 2;
  int families_size() const;
  void clear_families();
  static const int kFamiliesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >&
      families() const;
  ::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >*
      mutable_families();

  // repeated string output_families = 3;
  int output_families_size() const;
  void clear_output_families();
  static const int kOutputFamiliesFieldNumber = 3;
  const ::std::string& output_families(int index) const;
  ::std::string* mutable_output_families(int index);
  void set_output_families(int index, const ::std::string& value);
  void set_output_families(int index, const char* value);
  void set_output_families(int index, const char* value, size_t size);
  ::std::string* add_output_families();
  void add_output_families(const ::std::string& value);
  void add_output_families(const char* value);
  void add_output_families(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_families() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_families();

  // optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
  bool has_append_store_offset() const;
  void clear_append_store_offset();
  static const int kAppendStoreOffsetFieldNumber = 5;
  const ::hotbox::DatumProtoStoreOffset& append_store_offset() const;
  ::hotbox::DatumProtoStoreOffset* mutable_append_store_offset();
  ::hotbox::DatumProtoStoreOffset* release_append_store_offset();
  void set_allocated_append_store_offset(::hotbox::DatumProtoStoreOffset* append_store_offset);

  // repeated .hotbox.Feature features = 4;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  const ::hotbox::Feature& features(int index) const;
  ::hotbox::Feature* mutable_features(int index);
  ::hotbox::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
      features() const;

  // @@protoc_insertion_point(class_scope:hotbox.SchemaProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::hotbox::FeatureFamilyProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SchemaProto_FamiliesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::hotbox::FeatureFamilyProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > families_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_families_;
  ::hotbox::DatumProtoStoreOffset* append_store_offset_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::Feature > features_;
  ::google::protobuf::uint32 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static SchemaProto* default_instance_;
};
// -------------------------------------------------------------------

class OSchemaProto : public ::google::protobuf::Message {
 public:
  OSchemaProto();
  virtual ~OSchemaProto();

  OSchemaProto(const OSchemaProto& from);

  inline OSchemaProto& operator=(const OSchemaProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OSchemaProto& default_instance();

  void Swap(OSchemaProto* other);

  // implements Message ----------------------------------------------

  inline OSchemaProto* New() const { return New(NULL); }

  OSchemaProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OSchemaProto& from);
  void MergeFrom(const OSchemaProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OSchemaProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string feature_names = 1;
  int feature_names_size() const;
  void clear_feature_names();
  static const int kFeatureNamesFieldNumber = 1;
  const ::std::string& feature_names(int index) const;
  ::std::string* mutable_feature_names(int index);
  void set_feature_names(int index, const ::std::string& value);
  void set_feature_names(int index, const char* value);
  void set_feature_names(int index, const char* value, size_t size);
  ::std::string* add_feature_names();
  void add_feature_names(const ::std::string& value);
  void add_feature_names(const char* value);
  void add_feature_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& feature_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_feature_names();

  // repeated string family_names = 2;
  int family_names_size() const;
  void clear_family_names();
  static const int kFamilyNamesFieldNumber = 2;
  const ::std::string& family_names(int index) const;
  ::std::string* mutable_family_names(int index);
  void set_family_names(int index, const ::std::string& value);
  void set_family_names(int index, const char* value);
  void set_family_names(int index, const char* value, size_t size);
  ::std::string* add_family_names();
  void add_family_names(const ::std::string& value);
  void add_family_names(const char* value);
  void add_family_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& family_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_family_names();

  // repeated int64 family_offsets = 3;
  int family_offsets_size() const;
  void clear_family_offsets();
  static const int kFamilyOffsetsFieldNumber = 3;
  ::google::protobuf::int64 family_offsets(int index) const;
  void set_family_offsets(int index, ::google::protobuf::int64 value);
  void add_family_offsets(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      family_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_family_offsets();

  // @@protoc_insertion_point(class_scope:hotbox.OSchemaProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> feature_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> family_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > family_offsets_;
  mutable int _family_offsets_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_AssignDesc_schema_2fproto_2fschema_2eproto();
  friend void protobuf_ShutdownFile_schema_2fproto_2fschema_2eproto();

  void InitAsDefaultInstance();
  static OSchemaProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureStatProto

// repeated int32 unique_cat_values = 6;
inline int FeatureStatProto::unique_cat_values_size() const {
  return unique_cat_values_.size();
}
inline void FeatureStatProto::clear_unique_cat_values() {
  unique_cat_values_.Clear();
}
inline ::google::protobuf::int32 FeatureStatProto::unique_cat_values(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.unique_cat_values)
  return unique_cat_values_.Get(index);
}
inline void FeatureStatProto::set_unique_cat_values(int index, ::google::protobuf::int32 value) {
  unique_cat_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.unique_cat_values)
}
inline void FeatureStatProto::add_unique_cat_values(::google::protobuf::int32 value) {
  unique_cat_values_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FeatureStatProto.unique_cat_values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FeatureStatProto::unique_cat_values() const {
  // @@protoc_insertion_point(field_list:hotbox.FeatureStatProto.unique_cat_values)
  return unique_cat_values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FeatureStatProto::mutable_unique_cat_values() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FeatureStatProto.unique_cat_values)
  return &unique_cat_values_;
}

// repeated string unique_bytes_values = 7;
inline int FeatureStatProto::unique_bytes_values_size() const {
  return unique_bytes_values_.size();
}
inline void FeatureStatProto::clear_unique_bytes_values() {
  unique_bytes_values_.Clear();
}
inline const ::std::string& FeatureStatProto::unique_bytes_values(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.unique_bytes_values)
  return unique_bytes_values_.Get(index);
}
inline ::std::string* FeatureStatProto::mutable_unique_bytes_values(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.FeatureStatProto.unique_bytes_values)
  return unique_bytes_values_.Mutable(index);
}
inline void FeatureStatProto::set_unique_bytes_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.unique_bytes_values)
  unique_bytes_values_.Mutable(index)->assign(value);
}
inline void FeatureStatProto::set_unique_bytes_values(int index, const char* value) {
  unique_bytes_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.FeatureStatProto.unique_bytes_values)
}
inline void FeatureStatProto::set_unique_bytes_values(int index, const char* value, size_t size) {
  unique_bytes_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.FeatureStatProto.unique_bytes_values)
}
inline ::std::string* FeatureStatProto::add_unique_bytes_values() {
  return unique_bytes_values_.Add();
}
inline void FeatureStatProto::add_unique_bytes_values(const ::std::string& value) {
  unique_bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.FeatureStatProto.unique_bytes_values)
}
inline void FeatureStatProto::add_unique_bytes_values(const char* value) {
  unique_bytes_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.FeatureStatProto.unique_bytes_values)
}
inline void FeatureStatProto::add_unique_bytes_values(const char* value, size_t size) {
  unique_bytes_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.FeatureStatProto.unique_bytes_values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FeatureStatProto::unique_bytes_values() const {
  // @@protoc_insertion_point(field_list:hotbox.FeatureStatProto.unique_bytes_values)
  return unique_bytes_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FeatureStatProto::mutable_unique_bytes_values() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FeatureStatProto.unique_bytes_values)
  return &unique_bytes_values_;
}

// optional double min = 2;
inline void FeatureStatProto::clear_min() {
  min_ = 0;
}
inline double FeatureStatProto::min() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.min)
  return min_;
}
inline void FeatureStatProto::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.min)
}

// optional double max = 3;
inline void FeatureStatProto::clear_max() {
  max_ = 0;
}
inline double FeatureStatProto::max() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.max)
  return max_;
}
inline void FeatureStatProto::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.max)
}

// optional double sum = 4;
inline void FeatureStatProto::clear_sum() {
  sum_ = 0;
}
inline double FeatureStatProto::sum() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.sum)
  return sum_;
}
inline void FeatureStatProto::set_sum(double value) {
  
  sum_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.sum)
}

// -------------------------------------------------------------------

// Feature

// optional string name = 1;
inline void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.Feature.name)
}
inline void Feature::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.Feature.name)
}
inline void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.Feature.name)
}
inline ::std::string* Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.Feature.name)
}

// optional .hotbox.FeatureStoreType store_type = 2;
inline void Feature::clear_store_type() {
  store_type_ = 0;
}
inline ::hotbox::FeatureStoreType Feature::store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.store_type)
  return static_cast< ::hotbox::FeatureStoreType >(store_type_);
}
inline void Feature::set_store_type(::hotbox::FeatureStoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.store_type)
}

// optional int64 store_offset = 3;
inline void Feature::clear_store_offset() {
  store_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Feature::store_offset() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.store_offset)
  return store_offset_;
}
inline void Feature::set_store_offset(::google::protobuf::int64 value) {
  
  store_offset_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.store_offset)
}

// optional int64 global_offset = 6;
inline void Feature::clear_global_offset() {
  global_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Feature::global_offset() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.global_offset)
  return global_offset_;
}
inline void Feature::set_global_offset(::google::protobuf::int64 value) {
  
  global_offset_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.global_offset)
}

// optional bool is_factor = 5;
inline void Feature::clear_is_factor() {
  is_factor_ = false;
}
inline bool Feature::is_factor() const {
  // @@protoc_insertion_point(field_get:hotbox.Feature.is_factor)
  return is_factor_;
}
inline void Feature::set_is_factor(bool value) {
  
  is_factor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.Feature.is_factor)
}

// -------------------------------------------------------------------

// DatumProto

// repeated int64 dense_cat_store = 1;
inline int DatumProto::dense_cat_store_size() const {
  return dense_cat_store_.size();
}
inline void DatumProto::clear_dense_cat_store() {
  dense_cat_store_.Clear();
}
inline ::google::protobuf::int64 DatumProto::dense_cat_store(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProto.dense_cat_store)
  return dense_cat_store_.Get(index);
}
inline void DatumProto::set_dense_cat_store(int index, ::google::protobuf::int64 value) {
  dense_cat_store_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.DatumProto.dense_cat_store)
}
inline void DatumProto::add_dense_cat_store(::google::protobuf::int64 value) {
  dense_cat_store_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProto.dense_cat_store)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DatumProto::dense_cat_store() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProto.dense_cat_store)
  return dense_cat_store_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DatumProto::mutable_dense_cat_store() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProto.dense_cat_store)
  return &dense_cat_store_;
}

// repeated float dense_num_store = 2;
inline int DatumProto::dense_num_store_size() const {
  return dense_num_store_.size();
}
inline void DatumProto::clear_dense_num_store() {
  dense_num_store_.Clear();
}
inline float DatumProto::dense_num_store(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProto.dense_num_store)
  return dense_num_store_.Get(index);
}
inline void DatumProto::set_dense_num_store(int index, float value) {
  dense_num_store_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.DatumProto.dense_num_store)
}
inline void DatumProto::add_dense_num_store(float value) {
  dense_num_store_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProto.dense_num_store)
}
inline const ::google::protobuf::RepeatedField< float >&
DatumProto::dense_num_store() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProto.dense_num_store)
  return dense_num_store_;
}
inline ::google::protobuf::RepeatedField< float >*
DatumProto::mutable_dense_num_store() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProto.dense_num_store)
  return &dense_num_store_;
}

// repeated bytes dense_bytes_store = 3;
inline int DatumProto::dense_bytes_store_size() const {
  return dense_bytes_store_.size();
}
inline void DatumProto::clear_dense_bytes_store() {
  dense_bytes_store_.Clear();
}
inline const ::std::string& DatumProto::dense_bytes_store(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProto.dense_bytes_store)
  return dense_bytes_store_.Get(index);
}
inline ::std::string* DatumProto::mutable_dense_bytes_store(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DatumProto.dense_bytes_store)
  return dense_bytes_store_.Mutable(index);
}
inline void DatumProto::set_dense_bytes_store(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.DatumProto.dense_bytes_store)
  dense_bytes_store_.Mutable(index)->assign(value);
}
inline void DatumProto::set_dense_bytes_store(int index, const char* value) {
  dense_bytes_store_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.DatumProto.dense_bytes_store)
}
inline void DatumProto::set_dense_bytes_store(int index, const void* value, size_t size) {
  dense_bytes_store_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.DatumProto.dense_bytes_store)
}
inline ::std::string* DatumProto::add_dense_bytes_store() {
  return dense_bytes_store_.Add();
}
inline void DatumProto::add_dense_bytes_store(const ::std::string& value) {
  dense_bytes_store_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProto.dense_bytes_store)
}
inline void DatumProto::add_dense_bytes_store(const char* value) {
  dense_bytes_store_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.DatumProto.dense_bytes_store)
}
inline void DatumProto::add_dense_bytes_store(const void* value, size_t size) {
  dense_bytes_store_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.DatumProto.dense_bytes_store)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DatumProto::dense_bytes_store() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProto.dense_bytes_store)
  return dense_bytes_store_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DatumProto::mutable_dense_bytes_store() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProto.dense_bytes_store)
  return &dense_bytes_store_;
}

// map<uint32, int64> sparse_cat_store = 4;
inline int DatumProto::sparse_cat_store_size() const {
  return sparse_cat_store_.size();
}
inline void DatumProto::clear_sparse_cat_store() {
  sparse_cat_store_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >&
DatumProto::sparse_cat_store() const {
  // @@protoc_insertion_point(field_map:hotbox.DatumProto.sparse_cat_store)
  return sparse_cat_store_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int64 >*
DatumProto::mutable_sparse_cat_store() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.DatumProto.sparse_cat_store)
  return sparse_cat_store_.MutableMap();
}

// map<uint32, float> sparse_num_store = 5;
inline int DatumProto::sparse_num_store_size() const {
  return sparse_num_store_.size();
}
inline void DatumProto::clear_sparse_num_store() {
  sparse_num_store_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, float >&
DatumProto::sparse_num_store() const {
  // @@protoc_insertion_point(field_map:hotbox.DatumProto.sparse_num_store)
  return sparse_num_store_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, float >*
DatumProto::mutable_sparse_num_store() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.DatumProto.sparse_num_store)
  return sparse_num_store_.MutableMap();
}

// map<uint32, bytes> sparse_bytes_store = 6;
inline int DatumProto::sparse_bytes_store_size() const {
  return sparse_bytes_store_.size();
}
inline void DatumProto::clear_sparse_bytes_store() {
  sparse_bytes_store_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
DatumProto::sparse_bytes_store() const {
  // @@protoc_insertion_point(field_map:hotbox.DatumProto.sparse_bytes_store)
  return sparse_bytes_store_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
DatumProto::mutable_sparse_bytes_store() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.DatumProto.sparse_bytes_store)
  return sparse_bytes_store_.MutableMap();
}

// -------------------------------------------------------------------

// DatumProtoStoreOffset

// repeated int64 offsets = 1;
inline int DatumProtoStoreOffset::offsets_size() const {
  return offsets_.size();
}
inline void DatumProtoStoreOffset::clear_offsets() {
  offsets_.Clear();
}
inline ::google::protobuf::int64 DatumProtoStoreOffset::offsets(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DatumProtoStoreOffset.offsets)
  return offsets_.Get(index);
}
inline void DatumProtoStoreOffset::set_offsets(int index, ::google::protobuf::int64 value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.DatumProtoStoreOffset.offsets)
}
inline void DatumProtoStoreOffset::add_offsets(::google::protobuf::int64 value) {
  offsets_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.DatumProtoStoreOffset.offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DatumProtoStoreOffset::offsets() const {
  // @@protoc_insertion_point(field_list:hotbox.DatumProtoStoreOffset.offsets)
  return offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DatumProtoStoreOffset::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DatumProtoStoreOffset.offsets)
  return &offsets_;
}

// -------------------------------------------------------------------

// FeatureFamilyProto

// optional string family_name = 1;
inline void FeatureFamilyProto::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureFamilyProto::family_name() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureFamilyProto.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureFamilyProto::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.FeatureFamilyProto.family_name)
}
inline void FeatureFamilyProto::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.FeatureFamilyProto.family_name)
}
inline void FeatureFamilyProto::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.FeatureFamilyProto.family_name)
}
inline ::std::string* FeatureFamilyProto::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.FeatureFamilyProto.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureFamilyProto::release_family_name() {
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureFamilyProto::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.FeatureFamilyProto.family_name)
}

// map<string, int64> name_to_family_idx = 2;
inline int FeatureFamilyProto::name_to_family_idx_size() const {
  return name_to_family_idx_.size();
}
inline void FeatureFamilyProto::clear_name_to_family_idx() {
  name_to_family_idx_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
FeatureFamilyProto::name_to_family_idx() const {
  // @@protoc_insertion_point(field_map:hotbox.FeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
FeatureFamilyProto::mutable_name_to_family_idx() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.FeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.MutableMap();
}

// repeated int64 global_idx = 3;
inline int FeatureFamilyProto::global_idx_size() const {
  return global_idx_.size();
}
inline void FeatureFamilyProto::clear_global_idx() {
  global_idx_.Clear();
}
inline ::google::protobuf::int64 FeatureFamilyProto::global_idx(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureFamilyProto.global_idx)
  return global_idx_.Get(index);
}
inline void FeatureFamilyProto::set_global_idx(int index, ::google::protobuf::int64 value) {
  global_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FeatureFamilyProto.global_idx)
}
inline void FeatureFamilyProto::add_global_idx(::google::protobuf::int64 value) {
  global_idx_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FeatureFamilyProto.global_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FeatureFamilyProto::global_idx() const {
  // @@protoc_insertion_point(field_list:hotbox.FeatureFamilyProto.global_idx)
  return global_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FeatureFamilyProto::mutable_global_idx() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FeatureFamilyProto.global_idx)
  return &global_idx_;
}

// -------------------------------------------------------------------

// SelfContainedFeatureFamilyProto

// optional string family_name = 1;
inline void SelfContainedFeatureFamilyProto::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelfContainedFeatureFamilyProto::family_name() const {
  // @@protoc_insertion_point(field_get:hotbox.SelfContainedFeatureFamilyProto.family_name)
  return family_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfContainedFeatureFamilyProto::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SelfContainedFeatureFamilyProto.family_name)
}
inline void SelfContainedFeatureFamilyProto::set_family_name(const char* value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SelfContainedFeatureFamilyProto.family_name)
}
inline void SelfContainedFeatureFamilyProto::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SelfContainedFeatureFamilyProto.family_name)
}
inline ::std::string* SelfContainedFeatureFamilyProto::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SelfContainedFeatureFamilyProto.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelfContainedFeatureFamilyProto::release_family_name() {
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelfContainedFeatureFamilyProto::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SelfContainedFeatureFamilyProto.family_name)
}

// map<string, int64> name_to_family_idx = 2;
inline int SelfContainedFeatureFamilyProto::name_to_family_idx_size() const {
  return name_to_family_idx_.size();
}
inline void SelfContainedFeatureFamilyProto::clear_name_to_family_idx() {
  name_to_family_idx_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
SelfContainedFeatureFamilyProto::name_to_family_idx() const {
  // @@protoc_insertion_point(field_map:hotbox.SelfContainedFeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
SelfContainedFeatureFamilyProto::mutable_name_to_family_idx() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.SelfContainedFeatureFamilyProto.name_to_family_idx)
  return name_to_family_idx_.MutableMap();
}

// repeated .hotbox.Feature features = 3;
inline int SelfContainedFeatureFamilyProto::features_size() const {
  return features_.size();
}
inline void SelfContainedFeatureFamilyProto::clear_features() {
  features_.Clear();
}
inline const ::hotbox::Feature& SelfContainedFeatureFamilyProto::features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_.Get(index);
}
inline ::hotbox::Feature* SelfContainedFeatureFamilyProto::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_.Mutable(index);
}
inline ::hotbox::Feature* SelfContainedFeatureFamilyProto::add_features() {
  // @@protoc_insertion_point(field_add:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
SelfContainedFeatureFamilyProto::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SelfContainedFeatureFamilyProto.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
SelfContainedFeatureFamilyProto::features() const {
  // @@protoc_insertion_point(field_list:hotbox.SelfContainedFeatureFamilyProto.features)
  return features_;
}

// -------------------------------------------------------------------

// SchemaConfig

// optional bool int_label = 1;
inline void SchemaConfig::clear_int_label() {
  int_label_ = false;
}
inline bool SchemaConfig::int_label() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaConfig.int_label)
  return int_label_;
}
inline void SchemaConfig::set_int_label(bool value) {
  
  int_label_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaConfig.int_label)
}

// optional bool use_dense_weight = 2;
inline void SchemaConfig::clear_use_dense_weight() {
  use_dense_weight_ = false;
}
inline bool SchemaConfig::use_dense_weight() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaConfig.use_dense_weight)
  return use_dense_weight_;
}
inline void SchemaConfig::set_use_dense_weight(bool value) {
  
  use_dense_weight_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaConfig.use_dense_weight)
}

// optional int32 num_unique_values_factor = 3;
inline void SchemaConfig::clear_num_unique_values_factor() {
  num_unique_values_factor_ = 0;
}
inline ::google::protobuf::int32 SchemaConfig::num_unique_values_factor() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaConfig.num_unique_values_factor)
  return num_unique_values_factor_;
}
inline void SchemaConfig::set_num_unique_values_factor(::google::protobuf::int32 value) {
  
  num_unique_values_factor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaConfig.num_unique_values_factor)
}

// -------------------------------------------------------------------

// SchemaProto

// optional uint32 version = 1;
inline void SchemaProto::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 SchemaProto::version() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.version)
  return version_;
}
inline void SchemaProto::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SchemaProto.version)
}

// map<string, .hotbox.FeatureFamilyProto> families = 2;
inline int SchemaProto::families_size() const {
  return families_.size();
}
inline void SchemaProto::clear_families() {
  families_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >&
SchemaProto::families() const {
  // @@protoc_insertion_point(field_map:hotbox.SchemaProto.families)
  return families_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::hotbox::FeatureFamilyProto >*
SchemaProto::mutable_families() {
  // @@protoc_insertion_point(field_mutable_map:hotbox.SchemaProto.families)
  return families_.MutableMap();
}

// repeated string output_families = 3;
inline int SchemaProto::output_families_size() const {
  return output_families_.size();
}
inline void SchemaProto::clear_output_families() {
  output_families_.Clear();
}
inline const ::std::string& SchemaProto::output_families(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.output_families)
  return output_families_.Get(index);
}
inline ::std::string* SchemaProto::mutable_output_families(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SchemaProto.output_families)
  return output_families_.Mutable(index);
}
inline void SchemaProto::set_output_families(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.SchemaProto.output_families)
  output_families_.Mutable(index)->assign(value);
}
inline void SchemaProto::set_output_families(int index, const char* value) {
  output_families_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.SchemaProto.output_families)
}
inline void SchemaProto::set_output_families(int index, const char* value, size_t size) {
  output_families_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.SchemaProto.output_families)
}
inline ::std::string* SchemaProto::add_output_families() {
  return output_families_.Add();
}
inline void SchemaProto::add_output_families(const ::std::string& value) {
  output_families_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.SchemaProto.output_families)
}
inline void SchemaProto::add_output_families(const char* value) {
  output_families_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.SchemaProto.output_families)
}
inline void SchemaProto::add_output_families(const char* value, size_t size) {
  output_families_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.SchemaProto.output_families)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SchemaProto::output_families() const {
  // @@protoc_insertion_point(field_list:hotbox.SchemaProto.output_families)
  return output_families_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SchemaProto::mutable_output_families() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SchemaProto.output_families)
  return &output_families_;
}

// optional .hotbox.DatumProtoStoreOffset append_store_offset = 5;
inline bool SchemaProto::has_append_store_offset() const {
  return !_is_default_instance_ && append_store_offset_ != NULL;
}
inline void SchemaProto::clear_append_store_offset() {
  if (GetArenaNoVirtual() == NULL && append_store_offset_ != NULL) delete append_store_offset_;
  append_store_offset_ = NULL;
}
inline const ::hotbox::DatumProtoStoreOffset& SchemaProto::append_store_offset() const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.append_store_offset)
  return append_store_offset_ != NULL ? *append_store_offset_ : *default_instance_->append_store_offset_;
}
inline ::hotbox::DatumProtoStoreOffset* SchemaProto::mutable_append_store_offset() {
  
  if (append_store_offset_ == NULL) {
    append_store_offset_ = new ::hotbox::DatumProtoStoreOffset;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SchemaProto.append_store_offset)
  return append_store_offset_;
}
inline ::hotbox::DatumProtoStoreOffset* SchemaProto::release_append_store_offset() {
  
  ::hotbox::DatumProtoStoreOffset* temp = append_store_offset_;
  append_store_offset_ = NULL;
  return temp;
}
inline void SchemaProto::set_allocated_append_store_offset(::hotbox::DatumProtoStoreOffset* append_store_offset) {
  delete append_store_offset_;
  append_store_offset_ = append_store_offset;
  if (append_store_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SchemaProto.append_store_offset)
}

// repeated .hotbox.Feature features = 4;
inline int SchemaProto::features_size() const {
  return features_.size();
}
inline void SchemaProto::clear_features() {
  features_.Clear();
}
inline const ::hotbox::Feature& SchemaProto::features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SchemaProto.features)
  return features_.Get(index);
}
inline ::hotbox::Feature* SchemaProto::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SchemaProto.features)
  return features_.Mutable(index);
}
inline ::hotbox::Feature* SchemaProto::add_features() {
  // @@protoc_insertion_point(field_add:hotbox.SchemaProto.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
SchemaProto::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SchemaProto.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
SchemaProto::features() const {
  // @@protoc_insertion_point(field_list:hotbox.SchemaProto.features)
  return features_;
}

// -------------------------------------------------------------------

// OSchemaProto

// repeated string feature_names = 1;
inline int OSchemaProto::feature_names_size() const {
  return feature_names_.size();
}
inline void OSchemaProto::clear_feature_names() {
  feature_names_.Clear();
}
inline const ::std::string& OSchemaProto::feature_names(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.OSchemaProto.feature_names)
  return feature_names_.Get(index);
}
inline ::std::string* OSchemaProto::mutable_feature_names(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.OSchemaProto.feature_names)
  return feature_names_.Mutable(index);
}
inline void OSchemaProto::set_feature_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.OSchemaProto.feature_names)
  feature_names_.Mutable(index)->assign(value);
}
inline void OSchemaProto::set_feature_names(int index, const char* value) {
  feature_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.OSchemaProto.feature_names)
}
inline void OSchemaProto::set_feature_names(int index, const char* value, size_t size) {
  feature_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.OSchemaProto.feature_names)
}
inline ::std::string* OSchemaProto::add_feature_names() {
  return feature_names_.Add();
}
inline void OSchemaProto::add_feature_names(const ::std::string& value) {
  feature_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.OSchemaProto.feature_names)
}
inline void OSchemaProto::add_feature_names(const char* value) {
  feature_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.OSchemaProto.feature_names)
}
inline void OSchemaProto::add_feature_names(const char* value, size_t size) {
  feature_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.OSchemaProto.feature_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OSchemaProto::feature_names() const {
  // @@protoc_insertion_point(field_list:hotbox.OSchemaProto.feature_names)
  return feature_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OSchemaProto::mutable_feature_names() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.OSchemaProto.feature_names)
  return &feature_names_;
}

// repeated string family_names = 2;
inline int OSchemaProto::family_names_size() const {
  return family_names_.size();
}
inline void OSchemaProto::clear_family_names() {
  family_names_.Clear();
}
inline const ::std::string& OSchemaProto::family_names(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.OSchemaProto.family_names)
  return family_names_.Get(index);
}
inline ::std::string* OSchemaProto::mutable_family_names(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.OSchemaProto.family_names)
  return family_names_.Mutable(index);
}
inline void OSchemaProto::set_family_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.OSchemaProto.family_names)
  family_names_.Mutable(index)->assign(value);
}
inline void OSchemaProto::set_family_names(int index, const char* value) {
  family_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.OSchemaProto.family_names)
}
inline void OSchemaProto::set_family_names(int index, const char* value, size_t size) {
  family_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.OSchemaProto.family_names)
}
inline ::std::string* OSchemaProto::add_family_names() {
  return family_names_.Add();
}
inline void OSchemaProto::add_family_names(const ::std::string& value) {
  family_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.OSchemaProto.family_names)
}
inline void OSchemaProto::add_family_names(const char* value) {
  family_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.OSchemaProto.family_names)
}
inline void OSchemaProto::add_family_names(const char* value, size_t size) {
  family_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.OSchemaProto.family_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OSchemaProto::family_names() const {
  // @@protoc_insertion_point(field_list:hotbox.OSchemaProto.family_names)
  return family_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OSchemaProto::mutable_family_names() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.OSchemaProto.family_names)
  return &family_names_;
}

// repeated int64 family_offsets = 3;
inline int OSchemaProto::family_offsets_size() const {
  return family_offsets_.size();
}
inline void OSchemaProto::clear_family_offsets() {
  family_offsets_.Clear();
}
inline ::google::protobuf::int64 OSchemaProto::family_offsets(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.OSchemaProto.family_offsets)
  return family_offsets_.Get(index);
}
inline void OSchemaProto::set_family_offsets(int index, ::google::protobuf::int64 value) {
  family_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.OSchemaProto.family_offsets)
}
inline void OSchemaProto::add_family_offsets(::google::protobuf::int64 value) {
  family_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.OSchemaProto.family_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
OSchemaProto::family_offsets() const {
  // @@protoc_insertion_point(field_list:hotbox.OSchemaProto.family_offsets)
  return family_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
OSchemaProto::mutable_family_offsets() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.OSchemaProto.family_offsets)
  return &family_offsets_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hotbox::FeatureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::FeatureType>() {
  return ::hotbox::FeatureType_descriptor();
}
template <> struct is_proto_enum< ::hotbox::OutputStoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::OutputStoreType>() {
  return ::hotbox::OutputStoreType_descriptor();
}
template <> struct is_proto_enum< ::hotbox::FeatureIndexType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::FeatureIndexType>() {
  return ::hotbox::FeatureIndexType_descriptor();
}
template <> struct is_proto_enum< ::hotbox::FeatureStoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hotbox::FeatureStoreType>() {
  return ::hotbox::FeatureStoreType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_schema_2fproto_2fschema_2eproto__INCLUDED
