// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parse/proto/parser_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "parse/proto/parser_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

namespace {

const ::google::protobuf::Descriptor* ParserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParserConfig_reflection_ = NULL;
struct ParserConfigOneofInstance {
  const ::hotbox::LibSVMParserConfig* libsvm_config_;
  const ::hotbox::CSVParserConfig* csv_config_;
}* ParserConfig_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* LibSVMParserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibSVMParserConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSVParserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSVParserConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_parse_2fproto_2fparser_5fconfig_2eproto() {
  protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "parse/proto/parser_config.proto");
  GOOGLE_CHECK(file != NULL);
  ParserConfig_descriptor_ = file->message_type(0);
  static const int ParserConfig_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ParserConfig_default_oneof_instance_, libsvm_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ParserConfig_default_oneof_instance_, csv_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserConfig, config_),
  };
  ParserConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParserConfig_descriptor_,
      ParserConfig::default_instance_,
      ParserConfig_offsets_,
      -1,
      -1,
      -1,
      ParserConfig_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserConfig, _oneof_case_[0]),
      sizeof(ParserConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParserConfig, _is_default_instance_));
  LibSVMParserConfig_descriptor_ = file->message_type(1);
  static const int LibSVMParserConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibSVMParserConfig, feature_one_based_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibSVMParserConfig, label_one_based_),
  };
  LibSVMParserConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LibSVMParserConfig_descriptor_,
      LibSVMParserConfig::default_instance_,
      LibSVMParserConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(LibSVMParserConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibSVMParserConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibSVMParserConfig, _is_default_instance_));
  CSVParserConfig_descriptor_ = file->message_type(2);
  static const int CSVParserConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVParserConfig, has_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVParserConfig, label_front_),
  };
  CSVParserConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSVParserConfig_descriptor_,
      CSVParserConfig::default_instance_,
      CSVParserConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSVParserConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVParserConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVParserConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_parse_2fproto_2fparser_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParserConfig_descriptor_, &ParserConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LibSVMParserConfig_descriptor_, &LibSVMParserConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSVParserConfig_descriptor_, &CSVParserConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_parse_2fproto_2fparser_5fconfig_2eproto() {
  delete ParserConfig::default_instance_;
  delete ParserConfig_default_oneof_instance_;
  delete ParserConfig_reflection_;
  delete LibSVMParserConfig::default_instance_;
  delete LibSVMParserConfig_reflection_;
  delete CSVParserConfig::default_instance_;
  delete CSVParserConfig_reflection_;
}

void protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037parse/proto/parser_config.proto\022\006hotbo"
    "x\"|\n\014ParserConfig\0223\n\rlibsvm_config\030\002 \001(\013"
    "2\032.hotbox.LibSVMParserConfigH\000\022-\n\ncsv_co"
    "nfig\030\001 \001(\0132\027.hotbox.CSVParserConfigH\000B\010\n"
    "\006config\"H\n\022LibSVMParserConfig\022\031\n\021feature"
    "_one_based\030\001 \001(\010\022\027\n\017label_one_based\030\002 \001("
    "\010\":\n\017CSVParserConfig\022\022\n\nhas_header\030\003 \001(\010"
    "\022\023\n\013label_front\030\004 \001(\010b\006proto3", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parse/proto/parser_config.proto", &protobuf_RegisterTypes);
  ParserConfig::default_instance_ = new ParserConfig();
  ParserConfig_default_oneof_instance_ = new ParserConfigOneofInstance();
  LibSVMParserConfig::default_instance_ = new LibSVMParserConfig();
  CSVParserConfig::default_instance_ = new CSVParserConfig();
  ParserConfig::default_instance_->InitAsDefaultInstance();
  LibSVMParserConfig::default_instance_->InitAsDefaultInstance();
  CSVParserConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_parse_2fproto_2fparser_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_parse_2fproto_2fparser_5fconfig_2eproto {
  StaticDescriptorInitializer_parse_2fproto_2fparser_5fconfig_2eproto() {
    protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto();
  }
} static_descriptor_initializer_parse_2fproto_2fparser_5fconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ParserConfig::kLibsvmConfigFieldNumber;
const int ParserConfig::kCsvConfigFieldNumber;
#endif  // !_MSC_VER

ParserConfig::ParserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ParserConfig)
}

void ParserConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ParserConfig_default_oneof_instance_->libsvm_config_ = const_cast< ::hotbox::LibSVMParserConfig*>(&::hotbox::LibSVMParserConfig::default_instance());
  ParserConfig_default_oneof_instance_->csv_config_ = const_cast< ::hotbox::CSVParserConfig*>(&::hotbox::CSVParserConfig::default_instance());
}

ParserConfig::ParserConfig(const ParserConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ParserConfig)
}

void ParserConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_config();
}

ParserConfig::~ParserConfig() {
  // @@protoc_insertion_point(destructor:hotbox.ParserConfig)
  SharedDtor();
}

void ParserConfig::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
  if (this != default_instance_) {
  }
}

void ParserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParserConfig_descriptor_;
}

const ParserConfig& ParserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto();
  return *default_instance_;
}

ParserConfig* ParserConfig::default_instance_ = NULL;

ParserConfig* ParserConfig::New(::google::protobuf::Arena* arena) const {
  ParserConfig* n = new ParserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParserConfig::clear_config() {
  switch(config_case()) {
    case kLibsvmConfig: {
      delete config_.libsvm_config_;
      break;
    }
    case kCsvConfig: {
      delete config_.csv_config_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void ParserConfig::Clear() {
  clear_config();
}

bool ParserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ParserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.CSVParserConfig csv_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csv_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_libsvm_config;
        break;
      }

      // optional .hotbox.LibSVMParserConfig libsvm_config = 2;
      case 2: {
        if (tag == 18) {
         parse_libsvm_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_libsvm_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ParserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ParserConfig)
  return false;
#undef DO_
}

void ParserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ParserConfig)
  // optional .hotbox.CSVParserConfig csv_config = 1;
  if (has_csv_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *config_.csv_config_, output);
  }

  // optional .hotbox.LibSVMParserConfig libsvm_config = 2;
  if (has_libsvm_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *config_.libsvm_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ParserConfig)
}

::google::protobuf::uint8* ParserConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ParserConfig)
  // optional .hotbox.CSVParserConfig csv_config = 1;
  if (has_csv_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *config_.csv_config_, target);
  }

  // optional .hotbox.LibSVMParserConfig libsvm_config = 2;
  if (has_libsvm_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *config_.libsvm_config_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ParserConfig)
  return target;
}

int ParserConfig::ByteSize() const {
  int total_size = 0;

  switch (config_case()) {
    // optional .hotbox.LibSVMParserConfig libsvm_config = 2;
    case kLibsvmConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.libsvm_config_);
      break;
    }
    // optional .hotbox.CSVParserConfig csv_config = 1;
    case kCsvConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.csv_config_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParserConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ParserConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParserConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParserConfig::MergeFrom(const ParserConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.config_case()) {
    case kLibsvmConfig: {
      mutable_libsvm_config()->::hotbox::LibSVMParserConfig::MergeFrom(from.libsvm_config());
      break;
    }
    case kCsvConfig: {
      mutable_csv_config()->::hotbox::CSVParserConfig::MergeFrom(from.csv_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void ParserConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParserConfig::CopyFrom(const ParserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParserConfig::IsInitialized() const {

  return true;
}

void ParserConfig::Swap(ParserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParserConfig::InternalSwap(ParserConfig* other) {
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParserConfig_descriptor_;
  metadata.reflection = ParserConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParserConfig

// optional .hotbox.LibSVMParserConfig libsvm_config = 2;
bool ParserConfig::has_libsvm_config() const {
  return config_case() == kLibsvmConfig;
}
void ParserConfig::set_has_libsvm_config() {
  _oneof_case_[0] = kLibsvmConfig;
}
void ParserConfig::clear_libsvm_config() {
  if (has_libsvm_config()) {
    delete config_.libsvm_config_;
    clear_has_config();
  }
}
 const ::hotbox::LibSVMParserConfig& ParserConfig::libsvm_config() const {
  // @@protoc_insertion_point(field_get:hotbox.ParserConfig.libsvm_config)
  return has_libsvm_config()
      ? *config_.libsvm_config_
      : ::hotbox::LibSVMParserConfig::default_instance();
}
::hotbox::LibSVMParserConfig* ParserConfig::mutable_libsvm_config() {
  if (!has_libsvm_config()) {
    clear_config();
    set_has_libsvm_config();
    config_.libsvm_config_ = new ::hotbox::LibSVMParserConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ParserConfig.libsvm_config)
  return config_.libsvm_config_;
}
::hotbox::LibSVMParserConfig* ParserConfig::release_libsvm_config() {
  if (has_libsvm_config()) {
    clear_has_config();
    ::hotbox::LibSVMParserConfig* temp = config_.libsvm_config_;
    config_.libsvm_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ParserConfig::set_allocated_libsvm_config(::hotbox::LibSVMParserConfig* libsvm_config) {
  clear_config();
  if (libsvm_config) {
    set_has_libsvm_config();
    config_.libsvm_config_ = libsvm_config;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ParserConfig.libsvm_config)
}

// optional .hotbox.CSVParserConfig csv_config = 1;
bool ParserConfig::has_csv_config() const {
  return config_case() == kCsvConfig;
}
void ParserConfig::set_has_csv_config() {
  _oneof_case_[0] = kCsvConfig;
}
void ParserConfig::clear_csv_config() {
  if (has_csv_config()) {
    delete config_.csv_config_;
    clear_has_config();
  }
}
 const ::hotbox::CSVParserConfig& ParserConfig::csv_config() const {
  // @@protoc_insertion_point(field_get:hotbox.ParserConfig.csv_config)
  return has_csv_config()
      ? *config_.csv_config_
      : ::hotbox::CSVParserConfig::default_instance();
}
::hotbox::CSVParserConfig* ParserConfig::mutable_csv_config() {
  if (!has_csv_config()) {
    clear_config();
    set_has_csv_config();
    config_.csv_config_ = new ::hotbox::CSVParserConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.ParserConfig.csv_config)
  return config_.csv_config_;
}
::hotbox::CSVParserConfig* ParserConfig::release_csv_config() {
  if (has_csv_config()) {
    clear_has_config();
    ::hotbox::CSVParserConfig* temp = config_.csv_config_;
    config_.csv_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ParserConfig::set_allocated_csv_config(::hotbox::CSVParserConfig* csv_config) {
  clear_config();
  if (csv_config) {
    set_has_csv_config();
    config_.csv_config_ = csv_config;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.ParserConfig.csv_config)
}

bool ParserConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void ParserConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
ParserConfig::ConfigCase ParserConfig::config_case() const {
  return ParserConfig::ConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LibSVMParserConfig::kFeatureOneBasedFieldNumber;
const int LibSVMParserConfig::kLabelOneBasedFieldNumber;
#endif  // !_MSC_VER

LibSVMParserConfig::LibSVMParserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.LibSVMParserConfig)
}

void LibSVMParserConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LibSVMParserConfig::LibSVMParserConfig(const LibSVMParserConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.LibSVMParserConfig)
}

void LibSVMParserConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  feature_one_based_ = false;
  label_one_based_ = false;
}

LibSVMParserConfig::~LibSVMParserConfig() {
  // @@protoc_insertion_point(destructor:hotbox.LibSVMParserConfig)
  SharedDtor();
}

void LibSVMParserConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LibSVMParserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibSVMParserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibSVMParserConfig_descriptor_;
}

const LibSVMParserConfig& LibSVMParserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto();
  return *default_instance_;
}

LibSVMParserConfig* LibSVMParserConfig::default_instance_ = NULL;

LibSVMParserConfig* LibSVMParserConfig::New(::google::protobuf::Arena* arena) const {
  LibSVMParserConfig* n = new LibSVMParserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LibSVMParserConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LibSVMParserConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(feature_one_based_, label_one_based_);

#undef ZR_HELPER_
#undef ZR_

}

bool LibSVMParserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.LibSVMParserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool feature_one_based = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_one_based_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label_one_based;
        break;
      }

      // optional bool label_one_based = 2;
      case 2: {
        if (tag == 16) {
         parse_label_one_based:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_one_based_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.LibSVMParserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.LibSVMParserConfig)
  return false;
#undef DO_
}

void LibSVMParserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.LibSVMParserConfig)
  // optional bool feature_one_based = 1;
  if (this->feature_one_based() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->feature_one_based(), output);
  }

  // optional bool label_one_based = 2;
  if (this->label_one_based() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->label_one_based(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.LibSVMParserConfig)
}

::google::protobuf::uint8* LibSVMParserConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.LibSVMParserConfig)
  // optional bool feature_one_based = 1;
  if (this->feature_one_based() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->feature_one_based(), target);
  }

  // optional bool label_one_based = 2;
  if (this->label_one_based() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->label_one_based(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.LibSVMParserConfig)
  return target;
}

int LibSVMParserConfig::ByteSize() const {
  int total_size = 0;

  // optional bool feature_one_based = 1;
  if (this->feature_one_based() != 0) {
    total_size += 1 + 1;
  }

  // optional bool label_one_based = 2;
  if (this->label_one_based() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibSVMParserConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LibSVMParserConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LibSVMParserConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibSVMParserConfig::MergeFrom(const LibSVMParserConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.feature_one_based() != 0) {
    set_feature_one_based(from.feature_one_based());
  }
  if (from.label_one_based() != 0) {
    set_label_one_based(from.label_one_based());
  }
}

void LibSVMParserConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibSVMParserConfig::CopyFrom(const LibSVMParserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibSVMParserConfig::IsInitialized() const {

  return true;
}

void LibSVMParserConfig::Swap(LibSVMParserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LibSVMParserConfig::InternalSwap(LibSVMParserConfig* other) {
  std::swap(feature_one_based_, other->feature_one_based_);
  std::swap(label_one_based_, other->label_one_based_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LibSVMParserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibSVMParserConfig_descriptor_;
  metadata.reflection = LibSVMParserConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LibSVMParserConfig

// optional bool feature_one_based = 1;
void LibSVMParserConfig::clear_feature_one_based() {
  feature_one_based_ = false;
}
 bool LibSVMParserConfig::feature_one_based() const {
  // @@protoc_insertion_point(field_get:hotbox.LibSVMParserConfig.feature_one_based)
  return feature_one_based_;
}
 void LibSVMParserConfig::set_feature_one_based(bool value) {
  
  feature_one_based_ = value;
  // @@protoc_insertion_point(field_set:hotbox.LibSVMParserConfig.feature_one_based)
}

// optional bool label_one_based = 2;
void LibSVMParserConfig::clear_label_one_based() {
  label_one_based_ = false;
}
 bool LibSVMParserConfig::label_one_based() const {
  // @@protoc_insertion_point(field_get:hotbox.LibSVMParserConfig.label_one_based)
  return label_one_based_;
}
 void LibSVMParserConfig::set_label_one_based(bool value) {
  
  label_one_based_ = value;
  // @@protoc_insertion_point(field_set:hotbox.LibSVMParserConfig.label_one_based)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSVParserConfig::kHasHeaderFieldNumber;
const int CSVParserConfig::kLabelFrontFieldNumber;
#endif  // !_MSC_VER

CSVParserConfig::CSVParserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.CSVParserConfig)
}

void CSVParserConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSVParserConfig::CSVParserConfig(const CSVParserConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.CSVParserConfig)
}

void CSVParserConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  has_header_ = false;
  label_front_ = false;
}

CSVParserConfig::~CSVParserConfig() {
  // @@protoc_insertion_point(destructor:hotbox.CSVParserConfig)
  SharedDtor();
}

void CSVParserConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSVParserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVParserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSVParserConfig_descriptor_;
}

const CSVParserConfig& CSVParserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parse_2fproto_2fparser_5fconfig_2eproto();
  return *default_instance_;
}

CSVParserConfig* CSVParserConfig::default_instance_ = NULL;

CSVParserConfig* CSVParserConfig::New(::google::protobuf::Arena* arena) const {
  CSVParserConfig* n = new CSVParserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVParserConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSVParserConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(has_header_, label_front_);

#undef ZR_HELPER_
#undef ZR_

}

bool CSVParserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.CSVParserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_header = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_header_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_label_front;
        break;
      }

      // optional bool label_front = 4;
      case 4: {
        if (tag == 32) {
         parse_label_front:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_front_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.CSVParserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.CSVParserConfig)
  return false;
#undef DO_
}

void CSVParserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.CSVParserConfig)
  // optional bool has_header = 3;
  if (this->has_header() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_header(), output);
  }

  // optional bool label_front = 4;
  if (this->label_front() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->label_front(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.CSVParserConfig)
}

::google::protobuf::uint8* CSVParserConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.CSVParserConfig)
  // optional bool has_header = 3;
  if (this->has_header() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_header(), target);
  }

  // optional bool label_front = 4;
  if (this->label_front() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->label_front(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.CSVParserConfig)
  return target;
}

int CSVParserConfig::ByteSize() const {
  int total_size = 0;

  // optional bool has_header = 3;
  if (this->has_header() != 0) {
    total_size += 1 + 1;
  }

  // optional bool label_front = 4;
  if (this->label_front() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVParserConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSVParserConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVParserConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSVParserConfig::MergeFrom(const CSVParserConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_header() != 0) {
    set_has_header(from.has_header());
  }
  if (from.label_front() != 0) {
    set_label_front(from.label_front());
  }
}

void CSVParserConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVParserConfig::CopyFrom(const CSVParserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVParserConfig::IsInitialized() const {

  return true;
}

void CSVParserConfig::Swap(CSVParserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVParserConfig::InternalSwap(CSVParserConfig* other) {
  std::swap(has_header_, other->has_header_);
  std::swap(label_front_, other->label_front_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVParserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSVParserConfig_descriptor_;
  metadata.reflection = CSVParserConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVParserConfig

// optional bool has_header = 3;
void CSVParserConfig::clear_has_header() {
  has_header_ = false;
}
 bool CSVParserConfig::has_header() const {
  // @@protoc_insertion_point(field_get:hotbox.CSVParserConfig.has_header)
  return has_header_;
}
 void CSVParserConfig::set_has_header(bool value) {
  
  has_header_ = value;
  // @@protoc_insertion_point(field_set:hotbox.CSVParserConfig.has_header)
}

// optional bool label_front = 4;
void CSVParserConfig::clear_label_front() {
  label_front_ = false;
}
 bool CSVParserConfig::label_front() const {
  // @@protoc_insertion_point(field_get:hotbox.CSVParserConfig.label_front)
  return label_front_;
}
 void CSVParserConfig::set_label_front(bool value) {
  
  label_front_ = value;
  // @@protoc_insertion_point(field_set:hotbox.CSVParserConfig.label_front)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)
