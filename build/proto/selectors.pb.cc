// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/selectors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/selectors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

namespace {

const ::google::protobuf::Descriptor* OutlierExclusionSelector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutlierExclusionSelector_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniformSubsampleSelector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniformSubsampleSelector_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeRangeSelector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeRangeSelector_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fselectors_2eproto() {
  protobuf_AddDesc_proto_2fselectors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/selectors.proto");
  GOOGLE_CHECK(file != NULL);
  OutlierExclusionSelector_descriptor_ = file->message_type(0);
  static const int OutlierExclusionSelector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutlierExclusionSelector, quantile_lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutlierExclusionSelector, quantile_upper_bound_),
  };
  OutlierExclusionSelector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OutlierExclusionSelector_descriptor_,
      OutlierExclusionSelector::default_instance_,
      OutlierExclusionSelector_offsets_,
      -1,
      -1,
      -1,
      sizeof(OutlierExclusionSelector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutlierExclusionSelector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutlierExclusionSelector, _is_default_instance_));
  UniformSubsampleSelector_descriptor_ = file->message_type(1);
  static const int UniformSubsampleSelector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformSubsampleSelector, sample_rate_),
  };
  UniformSubsampleSelector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UniformSubsampleSelector_descriptor_,
      UniformSubsampleSelector::default_instance_,
      UniformSubsampleSelector_offsets_,
      -1,
      -1,
      -1,
      sizeof(UniformSubsampleSelector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformSubsampleSelector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniformSubsampleSelector, _is_default_instance_));
  TimeRangeSelector_descriptor_ = file->message_type(2);
  static const int TimeRangeSelector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRangeSelector, timestamp_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRangeSelector, timestamp_end_),
  };
  TimeRangeSelector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeRangeSelector_descriptor_,
      TimeRangeSelector::default_instance_,
      TimeRangeSelector_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeRangeSelector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRangeSelector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRangeSelector, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fselectors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OutlierExclusionSelector_descriptor_, &OutlierExclusionSelector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UniformSubsampleSelector_descriptor_, &UniformSubsampleSelector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeRangeSelector_descriptor_, &TimeRangeSelector::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fselectors_2eproto() {
  delete OutlierExclusionSelector::default_instance_;
  delete OutlierExclusionSelector_reflection_;
  delete UniformSubsampleSelector::default_instance_;
  delete UniformSubsampleSelector_reflection_;
  delete TimeRangeSelector::default_instance_;
  delete TimeRangeSelector_reflection_;
}

void protobuf_AddDesc_proto_2fselectors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025proto/selectors.proto\022\006hotbox\"V\n\030Outli"
    "erExclusionSelector\022\034\n\024quantile_lower_bo"
    "und\030\001 \001(\005\022\034\n\024quantile_upper_bound\030\002 \001(\005\""
    "/\n\030UniformSubsampleSelector\022\023\n\013sample_ra"
    "te\030\001 \001(\001\"C\n\021TimeRangeSelector\022\027\n\017timesta"
    "mp_begin\030\001 \001(\t\022\025\n\rtimestamp_end\030\002 \001(\tb\006p"
    "roto3", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/selectors.proto", &protobuf_RegisterTypes);
  OutlierExclusionSelector::default_instance_ = new OutlierExclusionSelector();
  UniformSubsampleSelector::default_instance_ = new UniformSubsampleSelector();
  TimeRangeSelector::default_instance_ = new TimeRangeSelector();
  OutlierExclusionSelector::default_instance_->InitAsDefaultInstance();
  UniformSubsampleSelector::default_instance_->InitAsDefaultInstance();
  TimeRangeSelector::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fselectors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fselectors_2eproto {
  StaticDescriptorInitializer_proto_2fselectors_2eproto() {
    protobuf_AddDesc_proto_2fselectors_2eproto();
  }
} static_descriptor_initializer_proto_2fselectors_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int OutlierExclusionSelector::kQuantileLowerBoundFieldNumber;
const int OutlierExclusionSelector::kQuantileUpperBoundFieldNumber;
#endif  // !_MSC_VER

OutlierExclusionSelector::OutlierExclusionSelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.OutlierExclusionSelector)
}

void OutlierExclusionSelector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OutlierExclusionSelector::OutlierExclusionSelector(const OutlierExclusionSelector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.OutlierExclusionSelector)
}

void OutlierExclusionSelector::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  quantile_lower_bound_ = 0;
  quantile_upper_bound_ = 0;
}

OutlierExclusionSelector::~OutlierExclusionSelector() {
  // @@protoc_insertion_point(destructor:hotbox.OutlierExclusionSelector)
  SharedDtor();
}

void OutlierExclusionSelector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutlierExclusionSelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutlierExclusionSelector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutlierExclusionSelector_descriptor_;
}

const OutlierExclusionSelector& OutlierExclusionSelector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fselectors_2eproto();
  return *default_instance_;
}

OutlierExclusionSelector* OutlierExclusionSelector::default_instance_ = NULL;

OutlierExclusionSelector* OutlierExclusionSelector::New(::google::protobuf::Arena* arena) const {
  OutlierExclusionSelector* n = new OutlierExclusionSelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutlierExclusionSelector::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OutlierExclusionSelector*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(quantile_lower_bound_, quantile_upper_bound_);

#undef ZR_HELPER_
#undef ZR_

}

bool OutlierExclusionSelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.OutlierExclusionSelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 quantile_lower_bound = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantile_lower_bound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quantile_upper_bound;
        break;
      }

      // optional int32 quantile_upper_bound = 2;
      case 2: {
        if (tag == 16) {
         parse_quantile_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantile_upper_bound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.OutlierExclusionSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.OutlierExclusionSelector)
  return false;
#undef DO_
}

void OutlierExclusionSelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.OutlierExclusionSelector)
  // optional int32 quantile_lower_bound = 1;
  if (this->quantile_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quantile_lower_bound(), output);
  }

  // optional int32 quantile_upper_bound = 2;
  if (this->quantile_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantile_upper_bound(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.OutlierExclusionSelector)
}

::google::protobuf::uint8* OutlierExclusionSelector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.OutlierExclusionSelector)
  // optional int32 quantile_lower_bound = 1;
  if (this->quantile_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quantile_lower_bound(), target);
  }

  // optional int32 quantile_upper_bound = 2;
  if (this->quantile_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantile_upper_bound(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.OutlierExclusionSelector)
  return target;
}

int OutlierExclusionSelector::ByteSize() const {
  int total_size = 0;

  // optional int32 quantile_lower_bound = 1;
  if (this->quantile_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantile_lower_bound());
  }

  // optional int32 quantile_upper_bound = 2;
  if (this->quantile_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantile_upper_bound());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutlierExclusionSelector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OutlierExclusionSelector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OutlierExclusionSelector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutlierExclusionSelector::MergeFrom(const OutlierExclusionSelector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.quantile_lower_bound() != 0) {
    set_quantile_lower_bound(from.quantile_lower_bound());
  }
  if (from.quantile_upper_bound() != 0) {
    set_quantile_upper_bound(from.quantile_upper_bound());
  }
}

void OutlierExclusionSelector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutlierExclusionSelector::CopyFrom(const OutlierExclusionSelector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutlierExclusionSelector::IsInitialized() const {

  return true;
}

void OutlierExclusionSelector::Swap(OutlierExclusionSelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutlierExclusionSelector::InternalSwap(OutlierExclusionSelector* other) {
  std::swap(quantile_lower_bound_, other->quantile_lower_bound_);
  std::swap(quantile_upper_bound_, other->quantile_upper_bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutlierExclusionSelector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutlierExclusionSelector_descriptor_;
  metadata.reflection = OutlierExclusionSelector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutlierExclusionSelector

// optional int32 quantile_lower_bound = 1;
void OutlierExclusionSelector::clear_quantile_lower_bound() {
  quantile_lower_bound_ = 0;
}
 ::google::protobuf::int32 OutlierExclusionSelector::quantile_lower_bound() const {
  // @@protoc_insertion_point(field_get:hotbox.OutlierExclusionSelector.quantile_lower_bound)
  return quantile_lower_bound_;
}
 void OutlierExclusionSelector::set_quantile_lower_bound(::google::protobuf::int32 value) {
  
  quantile_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:hotbox.OutlierExclusionSelector.quantile_lower_bound)
}

// optional int32 quantile_upper_bound = 2;
void OutlierExclusionSelector::clear_quantile_upper_bound() {
  quantile_upper_bound_ = 0;
}
 ::google::protobuf::int32 OutlierExclusionSelector::quantile_upper_bound() const {
  // @@protoc_insertion_point(field_get:hotbox.OutlierExclusionSelector.quantile_upper_bound)
  return quantile_upper_bound_;
}
 void OutlierExclusionSelector::set_quantile_upper_bound(::google::protobuf::int32 value) {
  
  quantile_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:hotbox.OutlierExclusionSelector.quantile_upper_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UniformSubsampleSelector::kSampleRateFieldNumber;
#endif  // !_MSC_VER

UniformSubsampleSelector::UniformSubsampleSelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.UniformSubsampleSelector)
}

void UniformSubsampleSelector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UniformSubsampleSelector::UniformSubsampleSelector(const UniformSubsampleSelector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.UniformSubsampleSelector)
}

void UniformSubsampleSelector::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sample_rate_ = 0;
}

UniformSubsampleSelector::~UniformSubsampleSelector() {
  // @@protoc_insertion_point(destructor:hotbox.UniformSubsampleSelector)
  SharedDtor();
}

void UniformSubsampleSelector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UniformSubsampleSelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniformSubsampleSelector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniformSubsampleSelector_descriptor_;
}

const UniformSubsampleSelector& UniformSubsampleSelector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fselectors_2eproto();
  return *default_instance_;
}

UniformSubsampleSelector* UniformSubsampleSelector::default_instance_ = NULL;

UniformSubsampleSelector* UniformSubsampleSelector::New(::google::protobuf::Arena* arena) const {
  UniformSubsampleSelector* n = new UniformSubsampleSelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UniformSubsampleSelector::Clear() {
  sample_rate_ = 0;
}

bool UniformSubsampleSelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.UniformSubsampleSelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double sample_rate = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.UniformSubsampleSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.UniformSubsampleSelector)
  return false;
#undef DO_
}

void UniformSubsampleSelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.UniformSubsampleSelector)
  // optional double sample_rate = 1;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sample_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.UniformSubsampleSelector)
}

::google::protobuf::uint8* UniformSubsampleSelector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.UniformSubsampleSelector)
  // optional double sample_rate = 1;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sample_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.UniformSubsampleSelector)
  return target;
}

int UniformSubsampleSelector::ByteSize() const {
  int total_size = 0;

  // optional double sample_rate = 1;
  if (this->sample_rate() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniformSubsampleSelector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UniformSubsampleSelector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UniformSubsampleSelector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniformSubsampleSelector::MergeFrom(const UniformSubsampleSelector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
}

void UniformSubsampleSelector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniformSubsampleSelector::CopyFrom(const UniformSubsampleSelector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniformSubsampleSelector::IsInitialized() const {

  return true;
}

void UniformSubsampleSelector::Swap(UniformSubsampleSelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UniformSubsampleSelector::InternalSwap(UniformSubsampleSelector* other) {
  std::swap(sample_rate_, other->sample_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UniformSubsampleSelector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniformSubsampleSelector_descriptor_;
  metadata.reflection = UniformSubsampleSelector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UniformSubsampleSelector

// optional double sample_rate = 1;
void UniformSubsampleSelector::clear_sample_rate() {
  sample_rate_ = 0;
}
 double UniformSubsampleSelector::sample_rate() const {
  // @@protoc_insertion_point(field_get:hotbox.UniformSubsampleSelector.sample_rate)
  return sample_rate_;
}
 void UniformSubsampleSelector::set_sample_rate(double value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:hotbox.UniformSubsampleSelector.sample_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TimeRangeSelector::kTimestampBeginFieldNumber;
const int TimeRangeSelector::kTimestampEndFieldNumber;
#endif  // !_MSC_VER

TimeRangeSelector::TimeRangeSelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.TimeRangeSelector)
}

void TimeRangeSelector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimeRangeSelector::TimeRangeSelector(const TimeRangeSelector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.TimeRangeSelector)
}

void TimeRangeSelector::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_begin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TimeRangeSelector::~TimeRangeSelector() {
  // @@protoc_insertion_point(destructor:hotbox.TimeRangeSelector)
  SharedDtor();
}

void TimeRangeSelector::SharedDtor() {
  timestamp_begin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TimeRangeSelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeRangeSelector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeRangeSelector_descriptor_;
}

const TimeRangeSelector& TimeRangeSelector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fselectors_2eproto();
  return *default_instance_;
}

TimeRangeSelector* TimeRangeSelector::default_instance_ = NULL;

TimeRangeSelector* TimeRangeSelector::New(::google::protobuf::Arena* arena) const {
  TimeRangeSelector* n = new TimeRangeSelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeRangeSelector::Clear() {
  timestamp_begin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TimeRangeSelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.TimeRangeSelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string timestamp_begin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp_begin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp_begin().data(), this->timestamp_begin().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.TimeRangeSelector.timestamp_begin"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp_end;
        break;
      }

      // optional string timestamp_end = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp_end()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp_end().data(), this->timestamp_end().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.TimeRangeSelector.timestamp_end"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.TimeRangeSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.TimeRangeSelector)
  return false;
#undef DO_
}

void TimeRangeSelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.TimeRangeSelector)
  // optional string timestamp_begin = 1;
  if (this->timestamp_begin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp_begin().data(), this->timestamp_begin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.TimeRangeSelector.timestamp_begin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->timestamp_begin(), output);
  }

  // optional string timestamp_end = 2;
  if (this->timestamp_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp_end().data(), this->timestamp_end().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.TimeRangeSelector.timestamp_end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timestamp_end(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.TimeRangeSelector)
}

::google::protobuf::uint8* TimeRangeSelector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.TimeRangeSelector)
  // optional string timestamp_begin = 1;
  if (this->timestamp_begin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp_begin().data(), this->timestamp_begin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.TimeRangeSelector.timestamp_begin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp_begin(), target);
  }

  // optional string timestamp_end = 2;
  if (this->timestamp_end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp_end().data(), this->timestamp_end().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.TimeRangeSelector.timestamp_end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timestamp_end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.TimeRangeSelector)
  return target;
}

int TimeRangeSelector::ByteSize() const {
  int total_size = 0;

  // optional string timestamp_begin = 1;
  if (this->timestamp_begin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp_begin());
  }

  // optional string timestamp_end = 2;
  if (this->timestamp_end().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp_end());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRangeSelector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeRangeSelector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeRangeSelector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeRangeSelector::MergeFrom(const TimeRangeSelector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp_begin().size() > 0) {

    timestamp_begin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_begin_);
  }
  if (from.timestamp_end().size() > 0) {

    timestamp_end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_end_);
  }
}

void TimeRangeSelector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRangeSelector::CopyFrom(const TimeRangeSelector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRangeSelector::IsInitialized() const {

  return true;
}

void TimeRangeSelector::Swap(TimeRangeSelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRangeSelector::InternalSwap(TimeRangeSelector* other) {
  timestamp_begin_.Swap(&other->timestamp_begin_);
  timestamp_end_.Swap(&other->timestamp_end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeRangeSelector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeRangeSelector_descriptor_;
  metadata.reflection = TimeRangeSelector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRangeSelector

// optional string timestamp_begin = 1;
void TimeRangeSelector::clear_timestamp_begin() {
  timestamp_begin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TimeRangeSelector::timestamp_begin() const {
  // @@protoc_insertion_point(field_get:hotbox.TimeRangeSelector.timestamp_begin)
  return timestamp_begin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimeRangeSelector::set_timestamp_begin(const ::std::string& value) {
  
  timestamp_begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.TimeRangeSelector.timestamp_begin)
}
 void TimeRangeSelector::set_timestamp_begin(const char* value) {
  
  timestamp_begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.TimeRangeSelector.timestamp_begin)
}
 void TimeRangeSelector::set_timestamp_begin(const char* value, size_t size) {
  
  timestamp_begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.TimeRangeSelector.timestamp_begin)
}
 ::std::string* TimeRangeSelector::mutable_timestamp_begin() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.TimeRangeSelector.timestamp_begin)
  return timestamp_begin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TimeRangeSelector::release_timestamp_begin() {
  
  return timestamp_begin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimeRangeSelector::set_allocated_timestamp_begin(::std::string* timestamp_begin) {
  if (timestamp_begin != NULL) {
    
  } else {
    
  }
  timestamp_begin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_begin);
  // @@protoc_insertion_point(field_set_allocated:hotbox.TimeRangeSelector.timestamp_begin)
}

// optional string timestamp_end = 2;
void TimeRangeSelector::clear_timestamp_end() {
  timestamp_end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TimeRangeSelector::timestamp_end() const {
  // @@protoc_insertion_point(field_get:hotbox.TimeRangeSelector.timestamp_end)
  return timestamp_end_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimeRangeSelector::set_timestamp_end(const ::std::string& value) {
  
  timestamp_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.TimeRangeSelector.timestamp_end)
}
 void TimeRangeSelector::set_timestamp_end(const char* value) {
  
  timestamp_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.TimeRangeSelector.timestamp_end)
}
 void TimeRangeSelector::set_timestamp_end(const char* value, size_t size) {
  
  timestamp_end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.TimeRangeSelector.timestamp_end)
}
 ::std::string* TimeRangeSelector::mutable_timestamp_end() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.TimeRangeSelector.timestamp_end)
  return timestamp_end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TimeRangeSelector::release_timestamp_end() {
  
  return timestamp_end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TimeRangeSelector::set_allocated_timestamp_end(::std::string* timestamp_end) {
  if (timestamp_end != NULL) {
    
  } else {
    
  }
  timestamp_end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_end);
  // @@protoc_insertion_point(field_set_allocated:hotbox.TimeRangeSelector.timestamp_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)
