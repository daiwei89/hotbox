// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/proto/db.proto

#ifndef PROTOBUF_db_2fproto_2fdb_2eproto__INCLUDED
#define PROTOBUF_db_2fproto_2fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "util/proto/util.pb.h"
#include "schema/proto/schema.pb.h"
#include "transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)

namespace hotbox {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_db_2fproto_2fdb_2eproto();
void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

class DBAtom;
class DBConfig;
class DBMetaData;
class DBProto;
class DBRootFile;
class DBServerConfig;
class FileMap;
class SessionOptionsProto;
class SessionProto;
class StatProto;
class TransformOutputRange;

// ===================================================================

class StatProto : public ::google::protobuf::Message {
 public:
  StatProto();
  virtual ~StatProto();

  StatProto(const StatProto& from);

  inline StatProto& operator=(const StatProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatProto& default_instance();

  void Swap(StatProto* other);

  // implements Message ----------------------------------------------

  inline StatProto* New() const { return New(NULL); }

  StatProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatProto& from);
  void MergeFrom(const StatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 num_data = 1;
  void clear_num_data();
  static const int kNumDataFieldNumber = 1;
  ::google::protobuf::uint64 num_data() const;
  void set_num_data(::google::protobuf::uint64 value);

  // optional uint32 epoch_begin = 3;
  void clear_epoch_begin();
  static const int kEpochBeginFieldNumber = 3;
  ::google::protobuf::uint32 epoch_begin() const;
  void set_epoch_begin(::google::protobuf::uint32 value);

  // repeated .hotbox.FeatureStatProto stats = 2;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 2;
  const ::hotbox::FeatureStatProto& stats(int index) const;
  ::hotbox::FeatureStatProto* mutable_stats(int index);
  ::hotbox::FeatureStatProto* add_stats();
  ::google::protobuf::RepeatedPtrField< ::hotbox::FeatureStatProto >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::FeatureStatProto >&
      stats() const;

  // repeated bool initialized = 4;
  int initialized_size() const;
  void clear_initialized();
  static const int kInitializedFieldNumber = 4;
  bool initialized(int index) const;
  void set_initialized(int index, bool value);
  void add_initialized(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      initialized() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_initialized();

  // @@protoc_insertion_point(class_scope:hotbox.StatProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 num_data_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::FeatureStatProto > stats_;
  ::google::protobuf::RepeatedField< bool > initialized_;
  mutable int _initialized_cached_byte_size_;
  ::google::protobuf::uint32 epoch_begin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static StatProto* default_instance_;
};
// -------------------------------------------------------------------

class DBServerConfig : public ::google::protobuf::Message {
 public:
  DBServerConfig();
  virtual ~DBServerConfig();

  DBServerConfig(const DBServerConfig& from);

  inline DBServerConfig& operator=(const DBServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBServerConfig& default_instance();

  void Swap(DBServerConfig* other);

  // implements Message ----------------------------------------------

  inline DBServerConfig* New() const { return New(NULL); }

  DBServerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBServerConfig& from);
  void MergeFrom(const DBServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_dir = 1;
  void clear_db_dir();
  static const int kDbDirFieldNumber = 1;
  const ::std::string& db_dir() const;
  void set_db_dir(const ::std::string& value);
  void set_db_dir(const char* value);
  void set_db_dir(const char* value, size_t size);
  ::std::string* mutable_db_dir();
  ::std::string* release_db_dir();
  void set_allocated_db_dir(::std::string* db_dir);

  // @@protoc_insertion_point(class_scope:hotbox.DBServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr db_dir_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static DBServerConfig* default_instance_;
};
// -------------------------------------------------------------------

class DBConfig : public ::google::protobuf::Message {
 public:
  DBConfig();
  virtual ~DBConfig();

  DBConfig(const DBConfig& from);

  inline DBConfig& operator=(const DBConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBConfig& default_instance();

  void Swap(DBConfig* other);

  // implements Message ----------------------------------------------

  inline DBConfig* New() const { return New(NULL); }

  DBConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBConfig& from);
  void MergeFrom(const DBConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_name = 1;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // optional string db_description = 2;
  void clear_db_description();
  static const int kDbDescriptionFieldNumber = 2;
  const ::std::string& db_description() const;
  void set_db_description(const ::std::string& value);
  void set_db_description(const char* value);
  void set_db_description(const char* value, size_t size);
  ::std::string* mutable_db_description();
  ::std::string* release_db_description();
  void set_allocated_db_description(::std::string* db_description);

  // optional .hotbox.SchemaConfig schema_config = 3;
  bool has_schema_config() const;
  void clear_schema_config();
  static const int kSchemaConfigFieldNumber = 3;
  const ::hotbox::SchemaConfig& schema_config() const;
  ::hotbox::SchemaConfig* mutable_schema_config();
  ::hotbox::SchemaConfig* release_schema_config();
  void set_allocated_schema_config(::hotbox::SchemaConfig* schema_config);

  // optional .hotbox.Compressor compressor = 5;
  void clear_compressor();
  static const int kCompressorFieldNumber = 5;
  ::hotbox::Compressor compressor() const;
  void set_compressor(::hotbox::Compressor value);

  // optional string db_dir = 4;
  void clear_db_dir();
  static const int kDbDirFieldNumber = 4;
  const ::std::string& db_dir() const;
  void set_db_dir(const ::std::string& value);
  void set_db_dir(const char* value);
  void set_db_dir(const char* value, size_t size);
  ::std::string* mutable_db_dir();
  ::std::string* release_db_dir();
  void set_allocated_db_dir(::std::string* db_dir);

  // @@protoc_insertion_point(class_scope:hotbox.DBConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr db_description_;
  ::hotbox::SchemaConfig* schema_config_;
  ::google::protobuf::internal::ArenaStringPtr db_dir_;
  int compressor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static DBConfig* default_instance_;
};
// -------------------------------------------------------------------

class FileMap : public ::google::protobuf::Message {
 public:
  FileMap();
  virtual ~FileMap();

  FileMap(const FileMap& from);

  inline FileMap& operator=(const FileMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMap& default_instance();

  void Swap(FileMap* other);

  // implements Message ----------------------------------------------

  inline FileMap* New() const { return New(NULL); }

  FileMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileMap& from);
  void MergeFrom(const FileMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string atom_path = 3;
  void clear_atom_path();
  static const int kAtomPathFieldNumber = 3;
  const ::std::string& atom_path() const;
  void set_atom_path(const ::std::string& value);
  void set_atom_path(const char* value);
  void set_atom_path(const char* value, size_t size);
  ::std::string* mutable_atom_path();
  ::std::string* release_atom_path();
  void set_allocated_atom_path(::std::string* atom_path);

  // repeated int64 data_idx = 4;
  int data_idx_size() const;
  void clear_data_idx();
  static const int kDataIdxFieldNumber = 4;
  ::google::protobuf::int64 data_idx(int index) const;
  void set_data_idx(int index, ::google::protobuf::int64 value);
  void add_data_idx(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      data_idx() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_data_idx();

  // repeated int64 datum_ids = 1;
  int datum_ids_size() const;
  void clear_datum_ids();
  static const int kDatumIdsFieldNumber = 1;
  ::google::protobuf::int64 datum_ids(int index) const;
  void set_datum_ids(int index, ::google::protobuf::int64 value);
  void add_datum_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      datum_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_datum_ids();

  // optional int64 num_data = 2;
  void clear_num_data();
  static const int kNumDataFieldNumber = 2;
  ::google::protobuf::int64 num_data() const;
  void set_num_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:hotbox.FileMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr atom_path_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > data_idx_;
  mutable int _data_idx_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > datum_ids_;
  mutable int _datum_ids_cached_byte_size_;
  ::google::protobuf::int64 num_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static FileMap* default_instance_;
};
// -------------------------------------------------------------------

class DBMetaData : public ::google::protobuf::Message {
 public:
  DBMetaData();
  virtual ~DBMetaData();

  DBMetaData(const DBMetaData& from);

  inline DBMetaData& operator=(const DBMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBMetaData& default_instance();

  void Swap(DBMetaData* other);

  // implements Message ----------------------------------------------

  inline DBMetaData* New() const { return New(NULL); }

  DBMetaData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBMetaData& from);
  void MergeFrom(const DBMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hotbox.DBConfig db_config = 1;
  bool has_db_config() const;
  void clear_db_config();
  static const int kDbConfigFieldNumber = 1;
  const ::hotbox::DBConfig& db_config() const;
  ::hotbox::DBConfig* mutable_db_config();
  ::hotbox::DBConfig* release_db_config();
  void set_allocated_db_config(::hotbox::DBConfig* db_config);

  // optional uint32 num_epoch = 5;
  void clear_num_epoch();
  static const int kNumEpochFieldNumber = 5;
  ::google::protobuf::uint32 num_epoch() const;
  void set_num_epoch(::google::protobuf::uint32 value);

  // optional uint64 creation_time = 8;
  void clear_creation_time();
  static const int kCreationTimeFieldNumber = 8;
  ::google::protobuf::uint64 creation_time() const;
  void set_creation_time(::google::protobuf::uint64 value);

  // optional .hotbox.FeatureIndexType feature_index_type = 2;
  void clear_feature_index_type();
  static const int kFeatureIndexTypeFieldNumber = 2;
  ::hotbox::FeatureIndexType feature_index_type() const;
  void set_feature_index_type(::hotbox::FeatureIndexType value);

  // optional .hotbox.FileMap file_map = 6;
  bool has_file_map() const;
  void clear_file_map();
  static const int kFileMapFieldNumber = 6;
  const ::hotbox::FileMap& file_map() const;
  ::hotbox::FileMap* mutable_file_map();
  ::hotbox::FileMap* release_file_map();
  void set_allocated_file_map(::hotbox::FileMap* file_map);

  // @@protoc_insertion_point(class_scope:hotbox.DBMetaData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::hotbox::DBConfig* db_config_;
  ::google::protobuf::uint64 creation_time_;
  ::google::protobuf::uint32 num_epoch_;
  int feature_index_type_;
  ::hotbox::FileMap* file_map_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static DBMetaData* default_instance_;
};
// -------------------------------------------------------------------

class DBAtom : public ::google::protobuf::Message {
 public:
  DBAtom();
  virtual ~DBAtom();

  DBAtom(const DBAtom& from);

  inline DBAtom& operator=(const DBAtom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBAtom& default_instance();

  void Swap(DBAtom* other);

  // implements Message ----------------------------------------------

  inline DBAtom* New() const { return New(NULL); }

  DBAtom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBAtom& from);
  void MergeFrom(const DBAtom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hotbox.DatumProto datum_protos = 1;
  int datum_protos_size() const;
  void clear_datum_protos();
  static const int kDatumProtosFieldNumber = 1;
  const ::hotbox::DatumProto& datum_protos(int index) const;
  ::hotbox::DatumProto* mutable_datum_protos(int index);
  ::hotbox::DatumProto* add_datum_protos();
  ::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto >*
      mutable_datum_protos();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto >&
      datum_protos() const;

  // @@protoc_insertion_point(class_scope:hotbox.DBAtom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto > datum_protos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static DBAtom* default_instance_;
};
// -------------------------------------------------------------------

class DBProto : public ::google::protobuf::Message {
 public:
  DBProto();
  virtual ~DBProto();

  DBProto(const DBProto& from);

  inline DBProto& operator=(const DBProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBProto& default_instance();

  void Swap(DBProto* other);

  // implements Message ----------------------------------------------

  inline DBProto* New() const { return New(NULL); }

  DBProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBProto& from);
  void MergeFrom(const DBProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hotbox.DBMetaData meta_data = 1;
  bool has_meta_data() const;
  void clear_meta_data();
  static const int kMetaDataFieldNumber = 1;
  const ::hotbox::DBMetaData& meta_data() const;
  ::hotbox::DBMetaData* mutable_meta_data();
  ::hotbox::DBMetaData* release_meta_data();
  void set_allocated_meta_data(::hotbox::DBMetaData* meta_data);

  // optional .hotbox.SchemaProto schema_proto = 2;
  bool has_schema_proto() const;
  void clear_schema_proto();
  static const int kSchemaProtoFieldNumber = 2;
  const ::hotbox::SchemaProto& schema_proto() const;
  ::hotbox::SchemaProto* mutable_schema_proto();
  ::hotbox::SchemaProto* release_schema_proto();
  void set_allocated_schema_proto(::hotbox::SchemaProto* schema_proto);

  // repeated .hotbox.StatProto stats = 3;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 3;
  const ::hotbox::StatProto& stats(int index) const;
  ::hotbox::StatProto* mutable_stats(int index);
  ::hotbox::StatProto* add_stats();
  ::google::protobuf::RepeatedPtrField< ::hotbox::StatProto >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::StatProto >&
      stats() const;

  // @@protoc_insertion_point(class_scope:hotbox.DBProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::hotbox::DBMetaData* meta_data_;
  ::hotbox::SchemaProto* schema_proto_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::StatProto > stats_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static DBProto* default_instance_;
};
// -------------------------------------------------------------------

class DBRootFile : public ::google::protobuf::Message {
 public:
  DBRootFile();
  virtual ~DBRootFile();

  DBRootFile(const DBRootFile& from);

  inline DBRootFile& operator=(const DBRootFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBRootFile& default_instance();

  void Swap(DBRootFile* other);

  // implements Message ----------------------------------------------

  inline DBRootFile* New() const { return New(NULL); }

  DBRootFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBRootFile& from);
  void MergeFrom(const DBRootFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBRootFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string db_names = 1;
  int db_names_size() const;
  void clear_db_names();
  static const int kDbNamesFieldNumber = 1;
  const ::std::string& db_names(int index) const;
  ::std::string* mutable_db_names(int index);
  void set_db_names(int index, const ::std::string& value);
  void set_db_names(int index, const char* value);
  void set_db_names(int index, const char* value, size_t size);
  ::std::string* add_db_names();
  void add_db_names(const ::std::string& value);
  void add_db_names(const char* value);
  void add_db_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& db_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_db_names();

  // @@protoc_insertion_point(class_scope:hotbox.DBRootFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> db_names_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static DBRootFile* default_instance_;
};
// -------------------------------------------------------------------

class TransformOutputRange : public ::google::protobuf::Message {
 public:
  TransformOutputRange();
  virtual ~TransformOutputRange();

  TransformOutputRange(const TransformOutputRange& from);

  inline TransformOutputRange& operator=(const TransformOutputRange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformOutputRange& default_instance();

  void Swap(TransformOutputRange* other);

  // implements Message ----------------------------------------------

  inline TransformOutputRange* New() const { return New(NULL); }

  TransformOutputRange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformOutputRange& from);
  void MergeFrom(const TransformOutputRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformOutputRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 store_offset_begin = 1;
  void clear_store_offset_begin();
  static const int kStoreOffsetBeginFieldNumber = 1;
  ::google::protobuf::int64 store_offset_begin() const;
  void set_store_offset_begin(::google::protobuf::int64 value);

  // optional int64 store_offset_end = 2;
  void clear_store_offset_end();
  static const int kStoreOffsetEndFieldNumber = 2;
  ::google::protobuf::int64 store_offset_end() const;
  void set_store_offset_end(::google::protobuf::int64 value);

  // optional .hotbox.FeatureStoreType store_type = 3;
  void clear_store_type();
  static const int kStoreTypeFieldNumber = 3;
  ::hotbox::FeatureStoreType store_type() const;
  void set_store_type(::hotbox::FeatureStoreType value);

  // @@protoc_insertion_point(class_scope:hotbox.TransformOutputRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 store_offset_begin_;
  ::google::protobuf::int64 store_offset_end_;
  int store_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static TransformOutputRange* default_instance_;
};
// -------------------------------------------------------------------

class SessionOptionsProto : public ::google::protobuf::Message {
 public:
  SessionOptionsProto();
  virtual ~SessionOptionsProto();

  SessionOptionsProto(const SessionOptionsProto& from);

  inline SessionOptionsProto& operator=(const SessionOptionsProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionOptionsProto& default_instance();

  void Swap(SessionOptionsProto* other);

  // implements Message ----------------------------------------------

  inline SessionOptionsProto* New() const { return New(NULL); }

  SessionOptionsProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionOptionsProto& from);
  void MergeFrom(const SessionOptionsProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionOptionsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_name = 1;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // optional string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional .hotbox.TransformConfigList transform_config_list = 3;
  bool has_transform_config_list() const;
  void clear_transform_config_list();
  static const int kTransformConfigListFieldNumber = 3;
  const ::hotbox::TransformConfigList& transform_config_list() const;
  ::hotbox::TransformConfigList* mutable_transform_config_list();
  ::hotbox::TransformConfigList* release_transform_config_list();
  void set_allocated_transform_config_list(::hotbox::TransformConfigList* transform_config_list);

  // optional .hotbox.OutputStoreType output_store_type = 4;
  void clear_output_store_type();
  static const int kOutputStoreTypeFieldNumber = 4;
  ::hotbox::OutputStoreType output_store_type() const;
  void set_output_store_type(::hotbox::OutputStoreType value);

  // @@protoc_insertion_point(class_scope:hotbox.SessionOptionsProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::hotbox::TransformConfigList* transform_config_list_;
  int output_store_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static SessionOptionsProto* default_instance_;
};
// -------------------------------------------------------------------

class SessionProto : public ::google::protobuf::Message {
 public:
  SessionProto();
  virtual ~SessionProto();

  SessionProto(const SessionProto& from);

  inline SessionProto& operator=(const SessionProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionProto& default_instance();

  void Swap(SessionProto* other);

  // implements Message ----------------------------------------------

  inline SessionProto* New() const { return New(NULL); }

  SessionProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionProto& from);
  void MergeFrom(const SessionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // repeated .hotbox.TransformParamProto trans_params = 6;
  int trans_params_size() const;
  void clear_trans_params();
  static const int kTransParamsFieldNumber = 6;
  const ::hotbox::TransformParamProto& trans_params(int index) const;
  ::hotbox::TransformParamProto* mutable_trans_params(int index);
  ::hotbox::TransformParamProto* add_trans_params();
  ::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto >*
      mutable_trans_params();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto >&
      trans_params() const;

  // repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
  int transform_output_ranges_size() const;
  void clear_transform_output_ranges();
  static const int kTransformOutputRangesFieldNumber = 2;
  const ::hotbox::TransformOutputRange& transform_output_ranges(int index) const;
  ::hotbox::TransformOutputRange* mutable_transform_output_ranges(int index);
  ::hotbox::TransformOutputRange* add_transform_output_ranges();
  ::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange >*
      mutable_transform_output_ranges();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange >&
      transform_output_ranges() const;

  // optional .hotbox.OSchemaProto o_schema = 3;
  bool has_o_schema() const;
  void clear_o_schema();
  static const int kOSchemaFieldNumber = 3;
  const ::hotbox::OSchemaProto& o_schema() const;
  ::hotbox::OSchemaProto* mutable_o_schema();
  ::hotbox::OSchemaProto* release_o_schema();
  void set_allocated_o_schema(::hotbox::OSchemaProto* o_schema);

  // optional .hotbox.SelfContainedFeatureFamilyProto internal_family_proto = 7;
  bool has_internal_family_proto() const;
  void clear_internal_family_proto();
  static const int kInternalFamilyProtoFieldNumber = 7;
  const ::hotbox::SelfContainedFeatureFamilyProto& internal_family_proto() const;
  ::hotbox::SelfContainedFeatureFamilyProto* mutable_internal_family_proto();
  ::hotbox::SelfContainedFeatureFamilyProto* release_internal_family_proto();
  void set_allocated_internal_family_proto(::hotbox::SelfContainedFeatureFamilyProto* internal_family_proto);

  // optional .hotbox.Compressor compressor = 4;
  void clear_compressor();
  static const int kCompressorFieldNumber = 4;
  ::hotbox::Compressor compressor() const;
  void set_compressor(::hotbox::Compressor value);

  // optional .hotbox.FileMap file_map = 5;
  bool has_file_map() const;
  void clear_file_map();
  static const int kFileMapFieldNumber = 5;
  const ::hotbox::FileMap& file_map() const;
  ::hotbox::FileMap* mutable_file_map();
  ::hotbox::FileMap* release_file_map();
  void set_allocated_file_map(::hotbox::FileMap* file_map);

  // optional .hotbox.OutputStoreType output_store_type = 8;
  void clear_output_store_type();
  static const int kOutputStoreTypeFieldNumber = 8;
  ::hotbox::OutputStoreType output_store_type() const;
  void set_output_store_type(::hotbox::OutputStoreType value);

  // optional int64 output_dim = 9;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 9;
  ::google::protobuf::int64 output_dim() const;
  void set_output_dim(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:hotbox.SessionProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto > trans_params_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange > transform_output_ranges_;
  ::hotbox::OSchemaProto* o_schema_;
  ::hotbox::SelfContainedFeatureFamilyProto* internal_family_proto_;
  ::hotbox::FileMap* file_map_;
  int compressor_;
  int output_store_type_;
  ::google::protobuf::int64 output_dim_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_AssignDesc_db_2fproto_2fdb_2eproto();
  friend void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto();

  void InitAsDefaultInstance();
  static SessionProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StatProto

// optional uint64 num_data = 1;
inline void StatProto::clear_num_data() {
  num_data_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StatProto::num_data() const {
  // @@protoc_insertion_point(field_get:hotbox.StatProto.num_data)
  return num_data_;
}
inline void StatProto::set_num_data(::google::protobuf::uint64 value) {
  
  num_data_ = value;
  // @@protoc_insertion_point(field_set:hotbox.StatProto.num_data)
}

// optional uint32 epoch_begin = 3;
inline void StatProto::clear_epoch_begin() {
  epoch_begin_ = 0u;
}
inline ::google::protobuf::uint32 StatProto::epoch_begin() const {
  // @@protoc_insertion_point(field_get:hotbox.StatProto.epoch_begin)
  return epoch_begin_;
}
inline void StatProto::set_epoch_begin(::google::protobuf::uint32 value) {
  
  epoch_begin_ = value;
  // @@protoc_insertion_point(field_set:hotbox.StatProto.epoch_begin)
}

// repeated .hotbox.FeatureStatProto stats = 2;
inline int StatProto::stats_size() const {
  return stats_.size();
}
inline void StatProto::clear_stats() {
  stats_.Clear();
}
inline const ::hotbox::FeatureStatProto& StatProto::stats(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.StatProto.stats)
  return stats_.Get(index);
}
inline ::hotbox::FeatureStatProto* StatProto::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.StatProto.stats)
  return stats_.Mutable(index);
}
inline ::hotbox::FeatureStatProto* StatProto::add_stats() {
  // @@protoc_insertion_point(field_add:hotbox.StatProto.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::FeatureStatProto >*
StatProto::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.StatProto.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::FeatureStatProto >&
StatProto::stats() const {
  // @@protoc_insertion_point(field_list:hotbox.StatProto.stats)
  return stats_;
}

// repeated bool initialized = 4;
inline int StatProto::initialized_size() const {
  return initialized_.size();
}
inline void StatProto::clear_initialized() {
  initialized_.Clear();
}
inline bool StatProto::initialized(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.StatProto.initialized)
  return initialized_.Get(index);
}
inline void StatProto::set_initialized(int index, bool value) {
  initialized_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.StatProto.initialized)
}
inline void StatProto::add_initialized(bool value) {
  initialized_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.StatProto.initialized)
}
inline const ::google::protobuf::RepeatedField< bool >&
StatProto::initialized() const {
  // @@protoc_insertion_point(field_list:hotbox.StatProto.initialized)
  return initialized_;
}
inline ::google::protobuf::RepeatedField< bool >*
StatProto::mutable_initialized() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.StatProto.initialized)
  return &initialized_;
}

// -------------------------------------------------------------------

// DBServerConfig

// optional string db_dir = 1;
inline void DBServerConfig::clear_db_dir() {
  db_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DBServerConfig::db_dir() const {
  // @@protoc_insertion_point(field_get:hotbox.DBServerConfig.db_dir)
  return db_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBServerConfig::set_db_dir(const ::std::string& value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBServerConfig.db_dir)
}
inline void DBServerConfig::set_db_dir(const char* value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBServerConfig.db_dir)
}
inline void DBServerConfig::set_db_dir(const char* value, size_t size) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBServerConfig.db_dir)
}
inline ::std::string* DBServerConfig::mutable_db_dir() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBServerConfig.db_dir)
  return db_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBServerConfig::release_db_dir() {
  
  return db_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBServerConfig::set_allocated_db_dir(::std::string* db_dir) {
  if (db_dir != NULL) {
    
  } else {
    
  }
  db_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBServerConfig.db_dir)
}

// -------------------------------------------------------------------

// DBConfig

// optional string db_name = 1;
inline void DBConfig::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DBConfig::db_name() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.db_name)
}
inline void DBConfig::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBConfig.db_name)
}
inline void DBConfig::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBConfig.db_name)
}
inline ::std::string* DBConfig::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.db_name)
}

// optional string db_description = 2;
inline void DBConfig::clear_db_description() {
  db_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DBConfig::db_description() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.db_description)
  return db_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_db_description(const ::std::string& value) {
  
  db_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.db_description)
}
inline void DBConfig::set_db_description(const char* value) {
  
  db_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBConfig.db_description)
}
inline void DBConfig::set_db_description(const char* value, size_t size) {
  
  db_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBConfig.db_description)
}
inline ::std::string* DBConfig::mutable_db_description() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.db_description)
  return db_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_db_description() {
  
  return db_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_db_description(::std::string* db_description) {
  if (db_description != NULL) {
    
  } else {
    
  }
  db_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_description);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.db_description)
}

// optional .hotbox.SchemaConfig schema_config = 3;
inline bool DBConfig::has_schema_config() const {
  return !_is_default_instance_ && schema_config_ != NULL;
}
inline void DBConfig::clear_schema_config() {
  if (GetArenaNoVirtual() == NULL && schema_config_ != NULL) delete schema_config_;
  schema_config_ = NULL;
}
inline const ::hotbox::SchemaConfig& DBConfig::schema_config() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.schema_config)
  return schema_config_ != NULL ? *schema_config_ : *default_instance_->schema_config_;
}
inline ::hotbox::SchemaConfig* DBConfig::mutable_schema_config() {
  
  if (schema_config_ == NULL) {
    schema_config_ = new ::hotbox::SchemaConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.schema_config)
  return schema_config_;
}
inline ::hotbox::SchemaConfig* DBConfig::release_schema_config() {
  
  ::hotbox::SchemaConfig* temp = schema_config_;
  schema_config_ = NULL;
  return temp;
}
inline void DBConfig::set_allocated_schema_config(::hotbox::SchemaConfig* schema_config) {
  delete schema_config_;
  schema_config_ = schema_config;
  if (schema_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.schema_config)
}

// optional .hotbox.Compressor compressor = 5;
inline void DBConfig::clear_compressor() {
  compressor_ = 0;
}
inline ::hotbox::Compressor DBConfig::compressor() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.compressor)
  return static_cast< ::hotbox::Compressor >(compressor_);
}
inline void DBConfig::set_compressor(::hotbox::Compressor value) {
  
  compressor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.compressor)
}

// optional string db_dir = 4;
inline void DBConfig::clear_db_dir() {
  db_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DBConfig::db_dir() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.db_dir)
  return db_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_db_dir(const ::std::string& value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.db_dir)
}
inline void DBConfig::set_db_dir(const char* value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBConfig.db_dir)
}
inline void DBConfig::set_db_dir(const char* value, size_t size) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBConfig.db_dir)
}
inline ::std::string* DBConfig::mutable_db_dir() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.db_dir)
  return db_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_db_dir() {
  
  return db_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_db_dir(::std::string* db_dir) {
  if (db_dir != NULL) {
    
  } else {
    
  }
  db_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.db_dir)
}

// -------------------------------------------------------------------

// FileMap

// optional string atom_path = 3;
inline void FileMap::clear_atom_path() {
  atom_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMap::atom_path() const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.atom_path)
  return atom_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMap::set_atom_path(const ::std::string& value) {
  
  atom_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.FileMap.atom_path)
}
inline void FileMap::set_atom_path(const char* value) {
  
  atom_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.FileMap.atom_path)
}
inline void FileMap::set_atom_path(const char* value, size_t size) {
  
  atom_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.FileMap.atom_path)
}
inline ::std::string* FileMap::mutable_atom_path() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.FileMap.atom_path)
  return atom_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMap::release_atom_path() {
  
  return atom_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMap::set_allocated_atom_path(::std::string* atom_path) {
  if (atom_path != NULL) {
    
  } else {
    
  }
  atom_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), atom_path);
  // @@protoc_insertion_point(field_set_allocated:hotbox.FileMap.atom_path)
}

// repeated int64 data_idx = 4;
inline int FileMap::data_idx_size() const {
  return data_idx_.size();
}
inline void FileMap::clear_data_idx() {
  data_idx_.Clear();
}
inline ::google::protobuf::int64 FileMap::data_idx(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.data_idx)
  return data_idx_.Get(index);
}
inline void FileMap::set_data_idx(int index, ::google::protobuf::int64 value) {
  data_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FileMap.data_idx)
}
inline void FileMap::add_data_idx(::google::protobuf::int64 value) {
  data_idx_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FileMap.data_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FileMap::data_idx() const {
  // @@protoc_insertion_point(field_list:hotbox.FileMap.data_idx)
  return data_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FileMap::mutable_data_idx() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FileMap.data_idx)
  return &data_idx_;
}

// repeated int64 datum_ids = 1;
inline int FileMap::datum_ids_size() const {
  return datum_ids_.size();
}
inline void FileMap::clear_datum_ids() {
  datum_ids_.Clear();
}
inline ::google::protobuf::int64 FileMap::datum_ids(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.datum_ids)
  return datum_ids_.Get(index);
}
inline void FileMap::set_datum_ids(int index, ::google::protobuf::int64 value) {
  datum_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FileMap.datum_ids)
}
inline void FileMap::add_datum_ids(::google::protobuf::int64 value) {
  datum_ids_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FileMap.datum_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FileMap::datum_ids() const {
  // @@protoc_insertion_point(field_list:hotbox.FileMap.datum_ids)
  return datum_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FileMap::mutable_datum_ids() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FileMap.datum_ids)
  return &datum_ids_;
}

// optional int64 num_data = 2;
inline void FileMap::clear_num_data() {
  num_data_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileMap::num_data() const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.num_data)
  return num_data_;
}
inline void FileMap::set_num_data(::google::protobuf::int64 value) {
  
  num_data_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FileMap.num_data)
}

// -------------------------------------------------------------------

// DBMetaData

// optional .hotbox.DBConfig db_config = 1;
inline bool DBMetaData::has_db_config() const {
  return !_is_default_instance_ && db_config_ != NULL;
}
inline void DBMetaData::clear_db_config() {
  if (GetArenaNoVirtual() == NULL && db_config_ != NULL) delete db_config_;
  db_config_ = NULL;
}
inline const ::hotbox::DBConfig& DBMetaData::db_config() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.db_config)
  return db_config_ != NULL ? *db_config_ : *default_instance_->db_config_;
}
inline ::hotbox::DBConfig* DBMetaData::mutable_db_config() {
  
  if (db_config_ == NULL) {
    db_config_ = new ::hotbox::DBConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBMetaData.db_config)
  return db_config_;
}
inline ::hotbox::DBConfig* DBMetaData::release_db_config() {
  
  ::hotbox::DBConfig* temp = db_config_;
  db_config_ = NULL;
  return temp;
}
inline void DBMetaData::set_allocated_db_config(::hotbox::DBConfig* db_config) {
  delete db_config_;
  db_config_ = db_config;
  if (db_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBMetaData.db_config)
}

// optional uint32 num_epoch = 5;
inline void DBMetaData::clear_num_epoch() {
  num_epoch_ = 0u;
}
inline ::google::protobuf::uint32 DBMetaData::num_epoch() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.num_epoch)
  return num_epoch_;
}
inline void DBMetaData::set_num_epoch(::google::protobuf::uint32 value) {
  
  num_epoch_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBMetaData.num_epoch)
}

// optional uint64 creation_time = 8;
inline void DBMetaData::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DBMetaData::creation_time() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.creation_time)
  return creation_time_;
}
inline void DBMetaData::set_creation_time(::google::protobuf::uint64 value) {
  
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBMetaData.creation_time)
}

// optional .hotbox.FeatureIndexType feature_index_type = 2;
inline void DBMetaData::clear_feature_index_type() {
  feature_index_type_ = 0;
}
inline ::hotbox::FeatureIndexType DBMetaData::feature_index_type() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.feature_index_type)
  return static_cast< ::hotbox::FeatureIndexType >(feature_index_type_);
}
inline void DBMetaData::set_feature_index_type(::hotbox::FeatureIndexType value) {
  
  feature_index_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBMetaData.feature_index_type)
}

// optional .hotbox.FileMap file_map = 6;
inline bool DBMetaData::has_file_map() const {
  return !_is_default_instance_ && file_map_ != NULL;
}
inline void DBMetaData::clear_file_map() {
  if (GetArenaNoVirtual() == NULL && file_map_ != NULL) delete file_map_;
  file_map_ = NULL;
}
inline const ::hotbox::FileMap& DBMetaData::file_map() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.file_map)
  return file_map_ != NULL ? *file_map_ : *default_instance_->file_map_;
}
inline ::hotbox::FileMap* DBMetaData::mutable_file_map() {
  
  if (file_map_ == NULL) {
    file_map_ = new ::hotbox::FileMap;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBMetaData.file_map)
  return file_map_;
}
inline ::hotbox::FileMap* DBMetaData::release_file_map() {
  
  ::hotbox::FileMap* temp = file_map_;
  file_map_ = NULL;
  return temp;
}
inline void DBMetaData::set_allocated_file_map(::hotbox::FileMap* file_map) {
  delete file_map_;
  file_map_ = file_map;
  if (file_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBMetaData.file_map)
}

// -------------------------------------------------------------------

// DBAtom

// repeated .hotbox.DatumProto datum_protos = 1;
inline int DBAtom::datum_protos_size() const {
  return datum_protos_.size();
}
inline void DBAtom::clear_datum_protos() {
  datum_protos_.Clear();
}
inline const ::hotbox::DatumProto& DBAtom::datum_protos(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DBAtom.datum_protos)
  return datum_protos_.Get(index);
}
inline ::hotbox::DatumProto* DBAtom::mutable_datum_protos(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DBAtom.datum_protos)
  return datum_protos_.Mutable(index);
}
inline ::hotbox::DatumProto* DBAtom::add_datum_protos() {
  // @@protoc_insertion_point(field_add:hotbox.DBAtom.datum_protos)
  return datum_protos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto >*
DBAtom::mutable_datum_protos() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DBAtom.datum_protos)
  return &datum_protos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto >&
DBAtom::datum_protos() const {
  // @@protoc_insertion_point(field_list:hotbox.DBAtom.datum_protos)
  return datum_protos_;
}

// -------------------------------------------------------------------

// DBProto

// optional .hotbox.DBMetaData meta_data = 1;
inline bool DBProto::has_meta_data() const {
  return !_is_default_instance_ && meta_data_ != NULL;
}
inline void DBProto::clear_meta_data() {
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) delete meta_data_;
  meta_data_ = NULL;
}
inline const ::hotbox::DBMetaData& DBProto::meta_data() const {
  // @@protoc_insertion_point(field_get:hotbox.DBProto.meta_data)
  return meta_data_ != NULL ? *meta_data_ : *default_instance_->meta_data_;
}
inline ::hotbox::DBMetaData* DBProto::mutable_meta_data() {
  
  if (meta_data_ == NULL) {
    meta_data_ = new ::hotbox::DBMetaData;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBProto.meta_data)
  return meta_data_;
}
inline ::hotbox::DBMetaData* DBProto::release_meta_data() {
  
  ::hotbox::DBMetaData* temp = meta_data_;
  meta_data_ = NULL;
  return temp;
}
inline void DBProto::set_allocated_meta_data(::hotbox::DBMetaData* meta_data) {
  delete meta_data_;
  meta_data_ = meta_data;
  if (meta_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBProto.meta_data)
}

// optional .hotbox.SchemaProto schema_proto = 2;
inline bool DBProto::has_schema_proto() const {
  return !_is_default_instance_ && schema_proto_ != NULL;
}
inline void DBProto::clear_schema_proto() {
  if (GetArenaNoVirtual() == NULL && schema_proto_ != NULL) delete schema_proto_;
  schema_proto_ = NULL;
}
inline const ::hotbox::SchemaProto& DBProto::schema_proto() const {
  // @@protoc_insertion_point(field_get:hotbox.DBProto.schema_proto)
  return schema_proto_ != NULL ? *schema_proto_ : *default_instance_->schema_proto_;
}
inline ::hotbox::SchemaProto* DBProto::mutable_schema_proto() {
  
  if (schema_proto_ == NULL) {
    schema_proto_ = new ::hotbox::SchemaProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBProto.schema_proto)
  return schema_proto_;
}
inline ::hotbox::SchemaProto* DBProto::release_schema_proto() {
  
  ::hotbox::SchemaProto* temp = schema_proto_;
  schema_proto_ = NULL;
  return temp;
}
inline void DBProto::set_allocated_schema_proto(::hotbox::SchemaProto* schema_proto) {
  delete schema_proto_;
  schema_proto_ = schema_proto;
  if (schema_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBProto.schema_proto)
}

// repeated .hotbox.StatProto stats = 3;
inline int DBProto::stats_size() const {
  return stats_.size();
}
inline void DBProto::clear_stats() {
  stats_.Clear();
}
inline const ::hotbox::StatProto& DBProto::stats(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DBProto.stats)
  return stats_.Get(index);
}
inline ::hotbox::StatProto* DBProto::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DBProto.stats)
  return stats_.Mutable(index);
}
inline ::hotbox::StatProto* DBProto::add_stats() {
  // @@protoc_insertion_point(field_add:hotbox.DBProto.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::StatProto >*
DBProto::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DBProto.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::StatProto >&
DBProto::stats() const {
  // @@protoc_insertion_point(field_list:hotbox.DBProto.stats)
  return stats_;
}

// -------------------------------------------------------------------

// DBRootFile

// repeated string db_names = 1;
inline int DBRootFile::db_names_size() const {
  return db_names_.size();
}
inline void DBRootFile::clear_db_names() {
  db_names_.Clear();
}
inline const ::std::string& DBRootFile::db_names(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DBRootFile.db_names)
  return db_names_.Get(index);
}
inline ::std::string* DBRootFile::mutable_db_names(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DBRootFile.db_names)
  return db_names_.Mutable(index);
}
inline void DBRootFile::set_db_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.DBRootFile.db_names)
  db_names_.Mutable(index)->assign(value);
}
inline void DBRootFile::set_db_names(int index, const char* value) {
  db_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.DBRootFile.db_names)
}
inline void DBRootFile::set_db_names(int index, const char* value, size_t size) {
  db_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBRootFile.db_names)
}
inline ::std::string* DBRootFile::add_db_names() {
  return db_names_.Add();
}
inline void DBRootFile::add_db_names(const ::std::string& value) {
  db_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.DBRootFile.db_names)
}
inline void DBRootFile::add_db_names(const char* value) {
  db_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.DBRootFile.db_names)
}
inline void DBRootFile::add_db_names(const char* value, size_t size) {
  db_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.DBRootFile.db_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DBRootFile::db_names() const {
  // @@protoc_insertion_point(field_list:hotbox.DBRootFile.db_names)
  return db_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DBRootFile::mutable_db_names() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DBRootFile.db_names)
  return &db_names_;
}

// -------------------------------------------------------------------

// TransformOutputRange

// optional int64 store_offset_begin = 1;
inline void TransformOutputRange::clear_store_offset_begin() {
  store_offset_begin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransformOutputRange::store_offset_begin() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformOutputRange.store_offset_begin)
  return store_offset_begin_;
}
inline void TransformOutputRange::set_store_offset_begin(::google::protobuf::int64 value) {
  
  store_offset_begin_ = value;
  // @@protoc_insertion_point(field_set:hotbox.TransformOutputRange.store_offset_begin)
}

// optional int64 store_offset_end = 2;
inline void TransformOutputRange::clear_store_offset_end() {
  store_offset_end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransformOutputRange::store_offset_end() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformOutputRange.store_offset_end)
  return store_offset_end_;
}
inline void TransformOutputRange::set_store_offset_end(::google::protobuf::int64 value) {
  
  store_offset_end_ = value;
  // @@protoc_insertion_point(field_set:hotbox.TransformOutputRange.store_offset_end)
}

// optional .hotbox.FeatureStoreType store_type = 3;
inline void TransformOutputRange::clear_store_type() {
  store_type_ = 0;
}
inline ::hotbox::FeatureStoreType TransformOutputRange::store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformOutputRange.store_type)
  return static_cast< ::hotbox::FeatureStoreType >(store_type_);
}
inline void TransformOutputRange::set_store_type(::hotbox::FeatureStoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.TransformOutputRange.store_type)
}

// -------------------------------------------------------------------

// SessionOptionsProto

// optional string db_name = 1;
inline void SessionOptionsProto::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionOptionsProto::db_name() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionOptionsProto::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SessionOptionsProto.db_name)
}
inline void SessionOptionsProto::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SessionOptionsProto.db_name)
}
inline void SessionOptionsProto::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SessionOptionsProto.db_name)
}
inline ::std::string* SessionOptionsProto::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SessionOptionsProto.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionOptionsProto::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionOptionsProto::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionOptionsProto.db_name)
}

// optional string session_id = 2;
inline void SessionOptionsProto::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionOptionsProto::session_id() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionOptionsProto::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SessionOptionsProto.session_id)
}
inline void SessionOptionsProto::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SessionOptionsProto.session_id)
}
inline void SessionOptionsProto::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SessionOptionsProto.session_id)
}
inline ::std::string* SessionOptionsProto::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SessionOptionsProto.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionOptionsProto::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionOptionsProto::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionOptionsProto.session_id)
}

// optional .hotbox.TransformConfigList transform_config_list = 3;
inline bool SessionOptionsProto::has_transform_config_list() const {
  return !_is_default_instance_ && transform_config_list_ != NULL;
}
inline void SessionOptionsProto::clear_transform_config_list() {
  if (GetArenaNoVirtual() == NULL && transform_config_list_ != NULL) delete transform_config_list_;
  transform_config_list_ = NULL;
}
inline const ::hotbox::TransformConfigList& SessionOptionsProto::transform_config_list() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.transform_config_list)
  return transform_config_list_ != NULL ? *transform_config_list_ : *default_instance_->transform_config_list_;
}
inline ::hotbox::TransformConfigList* SessionOptionsProto::mutable_transform_config_list() {
  
  if (transform_config_list_ == NULL) {
    transform_config_list_ = new ::hotbox::TransformConfigList;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionOptionsProto.transform_config_list)
  return transform_config_list_;
}
inline ::hotbox::TransformConfigList* SessionOptionsProto::release_transform_config_list() {
  
  ::hotbox::TransformConfigList* temp = transform_config_list_;
  transform_config_list_ = NULL;
  return temp;
}
inline void SessionOptionsProto::set_allocated_transform_config_list(::hotbox::TransformConfigList* transform_config_list) {
  delete transform_config_list_;
  transform_config_list_ = transform_config_list;
  if (transform_config_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionOptionsProto.transform_config_list)
}

// optional .hotbox.OutputStoreType output_store_type = 4;
inline void SessionOptionsProto::clear_output_store_type() {
  output_store_type_ = 0;
}
inline ::hotbox::OutputStoreType SessionOptionsProto::output_store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.output_store_type)
  return static_cast< ::hotbox::OutputStoreType >(output_store_type_);
}
inline void SessionOptionsProto::set_output_store_type(::hotbox::OutputStoreType value) {
  
  output_store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionOptionsProto.output_store_type)
}

// -------------------------------------------------------------------

// SessionProto

// optional string session_id = 1;
inline void SessionProto::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionProto::session_id() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionProto::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.session_id)
}
inline void SessionProto::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SessionProto.session_id)
}
inline void SessionProto::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SessionProto.session_id)
}
inline ::std::string* SessionProto::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionProto::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionProto::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.session_id)
}

// repeated .hotbox.TransformParamProto trans_params = 6;
inline int SessionProto::trans_params_size() const {
  return trans_params_.size();
}
inline void SessionProto::clear_trans_params() {
  trans_params_.Clear();
}
inline const ::hotbox::TransformParamProto& SessionProto::trans_params(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.trans_params)
  return trans_params_.Get(index);
}
inline ::hotbox::TransformParamProto* SessionProto::mutable_trans_params(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.trans_params)
  return trans_params_.Mutable(index);
}
inline ::hotbox::TransformParamProto* SessionProto::add_trans_params() {
  // @@protoc_insertion_point(field_add:hotbox.SessionProto.trans_params)
  return trans_params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto >*
SessionProto::mutable_trans_params() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SessionProto.trans_params)
  return &trans_params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto >&
SessionProto::trans_params() const {
  // @@protoc_insertion_point(field_list:hotbox.SessionProto.trans_params)
  return trans_params_;
}

// repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
inline int SessionProto::transform_output_ranges_size() const {
  return transform_output_ranges_.size();
}
inline void SessionProto::clear_transform_output_ranges() {
  transform_output_ranges_.Clear();
}
inline const ::hotbox::TransformOutputRange& SessionProto::transform_output_ranges(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_.Get(index);
}
inline ::hotbox::TransformOutputRange* SessionProto::mutable_transform_output_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_.Mutable(index);
}
inline ::hotbox::TransformOutputRange* SessionProto::add_transform_output_ranges() {
  // @@protoc_insertion_point(field_add:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange >*
SessionProto::mutable_transform_output_ranges() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SessionProto.transform_output_ranges)
  return &transform_output_ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange >&
SessionProto::transform_output_ranges() const {
  // @@protoc_insertion_point(field_list:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_;
}

// optional .hotbox.OSchemaProto o_schema = 3;
inline bool SessionProto::has_o_schema() const {
  return !_is_default_instance_ && o_schema_ != NULL;
}
inline void SessionProto::clear_o_schema() {
  if (GetArenaNoVirtual() == NULL && o_schema_ != NULL) delete o_schema_;
  o_schema_ = NULL;
}
inline const ::hotbox::OSchemaProto& SessionProto::o_schema() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.o_schema)
  return o_schema_ != NULL ? *o_schema_ : *default_instance_->o_schema_;
}
inline ::hotbox::OSchemaProto* SessionProto::mutable_o_schema() {
  
  if (o_schema_ == NULL) {
    o_schema_ = new ::hotbox::OSchemaProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.o_schema)
  return o_schema_;
}
inline ::hotbox::OSchemaProto* SessionProto::release_o_schema() {
  
  ::hotbox::OSchemaProto* temp = o_schema_;
  o_schema_ = NULL;
  return temp;
}
inline void SessionProto::set_allocated_o_schema(::hotbox::OSchemaProto* o_schema) {
  delete o_schema_;
  o_schema_ = o_schema;
  if (o_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.o_schema)
}

// optional .hotbox.SelfContainedFeatureFamilyProto internal_family_proto = 7;
inline bool SessionProto::has_internal_family_proto() const {
  return !_is_default_instance_ && internal_family_proto_ != NULL;
}
inline void SessionProto::clear_internal_family_proto() {
  if (GetArenaNoVirtual() == NULL && internal_family_proto_ != NULL) delete internal_family_proto_;
  internal_family_proto_ = NULL;
}
inline const ::hotbox::SelfContainedFeatureFamilyProto& SessionProto::internal_family_proto() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.internal_family_proto)
  return internal_family_proto_ != NULL ? *internal_family_proto_ : *default_instance_->internal_family_proto_;
}
inline ::hotbox::SelfContainedFeatureFamilyProto* SessionProto::mutable_internal_family_proto() {
  
  if (internal_family_proto_ == NULL) {
    internal_family_proto_ = new ::hotbox::SelfContainedFeatureFamilyProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.internal_family_proto)
  return internal_family_proto_;
}
inline ::hotbox::SelfContainedFeatureFamilyProto* SessionProto::release_internal_family_proto() {
  
  ::hotbox::SelfContainedFeatureFamilyProto* temp = internal_family_proto_;
  internal_family_proto_ = NULL;
  return temp;
}
inline void SessionProto::set_allocated_internal_family_proto(::hotbox::SelfContainedFeatureFamilyProto* internal_family_proto) {
  delete internal_family_proto_;
  internal_family_proto_ = internal_family_proto;
  if (internal_family_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.internal_family_proto)
}

// optional .hotbox.Compressor compressor = 4;
inline void SessionProto::clear_compressor() {
  compressor_ = 0;
}
inline ::hotbox::Compressor SessionProto::compressor() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.compressor)
  return static_cast< ::hotbox::Compressor >(compressor_);
}
inline void SessionProto::set_compressor(::hotbox::Compressor value) {
  
  compressor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.compressor)
}

// optional .hotbox.FileMap file_map = 5;
inline bool SessionProto::has_file_map() const {
  return !_is_default_instance_ && file_map_ != NULL;
}
inline void SessionProto::clear_file_map() {
  if (GetArenaNoVirtual() == NULL && file_map_ != NULL) delete file_map_;
  file_map_ = NULL;
}
inline const ::hotbox::FileMap& SessionProto::file_map() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.file_map)
  return file_map_ != NULL ? *file_map_ : *default_instance_->file_map_;
}
inline ::hotbox::FileMap* SessionProto::mutable_file_map() {
  
  if (file_map_ == NULL) {
    file_map_ = new ::hotbox::FileMap;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.file_map)
  return file_map_;
}
inline ::hotbox::FileMap* SessionProto::release_file_map() {
  
  ::hotbox::FileMap* temp = file_map_;
  file_map_ = NULL;
  return temp;
}
inline void SessionProto::set_allocated_file_map(::hotbox::FileMap* file_map) {
  delete file_map_;
  file_map_ = file_map;
  if (file_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.file_map)
}

// optional .hotbox.OutputStoreType output_store_type = 8;
inline void SessionProto::clear_output_store_type() {
  output_store_type_ = 0;
}
inline ::hotbox::OutputStoreType SessionProto::output_store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.output_store_type)
  return static_cast< ::hotbox::OutputStoreType >(output_store_type_);
}
inline void SessionProto::set_output_store_type(::hotbox::OutputStoreType value) {
  
  output_store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.output_store_type)
}

// optional int64 output_dim = 9;
inline void SessionProto::clear_output_dim() {
  output_dim_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SessionProto::output_dim() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.output_dim)
  return output_dim_;
}
inline void SessionProto::set_output_dim(::google::protobuf::int64 value) {
  
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.output_dim)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2fproto_2fdb_2eproto__INCLUDED
