// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/proto/db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db/proto/db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

namespace {

const ::google::protobuf::Descriptor* FeatureStatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureStatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAtom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAtom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBRootFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBRootFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformOutputRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformOutputRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionOptionsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionOptionsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_2fproto_2fdb_2eproto() {
  protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db/proto/db.proto");
  GOOGLE_CHECK(file != NULL);
  FeatureStatProto_descriptor_ = file->message_type(0);
  static const int FeatureStatProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, std_),
  };
  FeatureStatProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureStatProto_descriptor_,
      FeatureStatProto::default_instance_,
      FeatureStatProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureStatProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStatProto, _is_default_instance_));
  DBServerConfig_descriptor_ = file->message_type(1);
  static const int DBServerConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, db_dir_),
  };
  DBServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBServerConfig_descriptor_,
      DBServerConfig::default_instance_,
      DBServerConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBServerConfig, _is_default_instance_));
  DBConfig_descriptor_ = file->message_type(2);
  static const int DBConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, db_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, schema_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, compressor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, db_dir_),
  };
  DBConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBConfig_descriptor_,
      DBConfig::default_instance_,
      DBConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, _is_default_instance_));
  FileMap_descriptor_ = file->message_type(3);
  static const int FileMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMap, atom_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMap, datum_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMap, num_data_),
  };
  FileMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileMap_descriptor_,
      FileMap::default_instance_,
      FileMap_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMap, _is_default_instance_));
  DBMetaData_descriptor_ = file->message_type(4);
  static const int DBMetaData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, db_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, num_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, feature_index_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, file_map_),
  };
  DBMetaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBMetaData_descriptor_,
      DBMetaData::default_instance_,
      DBMetaData_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBMetaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBMetaData, _is_default_instance_));
  DBAtom_descriptor_ = file->message_type(5);
  static const int DBAtom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAtom, datum_protos_),
  };
  DBAtom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBAtom_descriptor_,
      DBAtom::default_instance_,
      DBAtom_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBAtom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAtom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAtom, _is_default_instance_));
  DBProto_descriptor_ = file->message_type(6);
  static const int DBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProto, meta_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProto, schema_proto_),
  };
  DBProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBProto_descriptor_,
      DBProto::default_instance_,
      DBProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProto, _is_default_instance_));
  DBRootFile_descriptor_ = file->message_type(7);
  static const int DBRootFile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRootFile, db_names_),
  };
  DBRootFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBRootFile_descriptor_,
      DBRootFile::default_instance_,
      DBRootFile_offsets_,
      -1,
      -1,
      -1,
      sizeof(DBRootFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRootFile, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRootFile, _is_default_instance_));
  TransformOutputRange_descriptor_ = file->message_type(8);
  static const int TransformOutputRange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformOutputRange, offset_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformOutputRange, offset_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformOutputRange, store_type_),
  };
  TransformOutputRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformOutputRange_descriptor_,
      TransformOutputRange::default_instance_,
      TransformOutputRange_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransformOutputRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformOutputRange, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformOutputRange, _is_default_instance_));
  SessionOptionsProto_descriptor_ = file->message_type(9);
  static const int SessionOptionsProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOptionsProto, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOptionsProto, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOptionsProto, transform_config_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOptionsProto, output_store_type_),
  };
  SessionOptionsProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionOptionsProto_descriptor_,
      SessionOptionsProto::default_instance_,
      SessionOptionsProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionOptionsProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOptionsProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionOptionsProto, _is_default_instance_));
  SessionProto_descriptor_ = file->message_type(10);
  static const int SessionProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, trans_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, transform_output_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, o_schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, internal_family_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, compressor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, file_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, output_store_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, output_dim_),
  };
  SessionProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionProto_descriptor_,
      SessionProto::default_instance_,
      SessionProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(SessionProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionProto, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_2fproto_2fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureStatProto_descriptor_, &FeatureStatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBServerConfig_descriptor_, &DBServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBConfig_descriptor_, &DBConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileMap_descriptor_, &FileMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBMetaData_descriptor_, &DBMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBAtom_descriptor_, &DBAtom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBProto_descriptor_, &DBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBRootFile_descriptor_, &DBRootFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformOutputRange_descriptor_, &TransformOutputRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionOptionsProto_descriptor_, &SessionOptionsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionProto_descriptor_, &SessionProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_2fproto_2fdb_2eproto() {
  delete FeatureStatProto::default_instance_;
  delete FeatureStatProto_reflection_;
  delete DBServerConfig::default_instance_;
  delete DBServerConfig_reflection_;
  delete DBConfig::default_instance_;
  delete DBConfig_reflection_;
  delete FileMap::default_instance_;
  delete FileMap_reflection_;
  delete DBMetaData::default_instance_;
  delete DBMetaData_reflection_;
  delete DBAtom::default_instance_;
  delete DBAtom_reflection_;
  delete DBProto::default_instance_;
  delete DBProto_reflection_;
  delete DBRootFile::default_instance_;
  delete DBRootFile_reflection_;
  delete TransformOutputRange::default_instance_;
  delete TransformOutputRange_reflection_;
  delete SessionOptionsProto::default_instance_;
  delete SessionOptionsProto_reflection_;
  delete SessionProto::default_instance_;
  delete SessionProto_reflection_;
}

void protobuf_AddDesc_db_2fproto_2fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hotbox::protobuf_AddDesc_util_2fproto_2futil_2eproto();
  ::hotbox::protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  ::hotbox::protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021db/proto/db.proto\022\006hotbox\032\025util/proto/"
    "util.proto\032\031schema/proto/schema.proto\032\037t"
    "ransform/proto/transform.proto\"G\n\020Featur"
    "eStatProto\022\013\n\003max\030\005 \001(\001\022\013\n\003min\030\006 \001(\001\022\014\n\004"
    "mean\030\001 \001(\001\022\013\n\003std\030\002 \001(\001\" \n\016DBServerConfi"
    "g\022\016\n\006db_dir\030\001 \001(\t\"\230\001\n\010DBConfig\022\017\n\007db_nam"
    "e\030\001 \001(\t\022\026\n\016db_description\030\002 \001(\t\022+\n\rschem"
    "a_config\030\003 \001(\0132\024.hotbox.SchemaConfig\022&\n\n"
    "compressor\030\005 \001(\0162\022.hotbox.Compressor\022\016\n\006"
    "db_dir\030\004 \001(\t\"A\n\007FileMap\022\021\n\tatom_path\030\003 \001"
    "(\t\022\021\n\tdatum_ids\030\001 \003(\003\022\020\n\010num_data\030\002 \001(\003\""
    "\264\001\n\nDBMetaData\022#\n\tdb_config\030\001 \001(\0132\020.hotb"
    "ox.DBConfig\022\021\n\tnum_epoch\030\005 \001(\r\022\025\n\rcreati"
    "on_time\030\010 \001(\004\0224\n\022feature_index_type\030\002 \001("
    "\0162\030.hotbox.FeatureIndexType\022!\n\010file_map\030"
    "\006 \001(\0132\017.hotbox.FileMap\"2\n\006DBAtom\022(\n\014datu"
    "m_protos\030\001 \003(\0132\022.hotbox.DatumProto\"[\n\007DB"
    "Proto\022%\n\tmeta_data\030\001 \001(\0132\022.hotbox.DBMeta"
    "Data\022)\n\014schema_proto\030\002 \001(\0132\023.hotbox.Sche"
    "maProto\"\036\n\nDBRootFile\022\020\n\010db_names\030\001 \003(\t\""
    "n\n\024TransformOutputRange\022\024\n\014offset_begin\030"
    "\001 \001(\003\022\022\n\noffset_end\030\002 \001(\003\022,\n\nstore_type\030"
    "\003 \001(\0162\030.hotbox.FeatureStoreType\"\252\001\n\023Sess"
    "ionOptionsProto\022\017\n\007db_name\030\001 \001(\t\022\022\n\nsess"
    "ion_id\030\002 \001(\t\022:\n\025transform_config_list\030\003 "
    "\001(\0132\033.hotbox.TransformConfigList\0222\n\021outp"
    "ut_store_type\030\004 \001(\0162\027.hotbox.OutputStore"
    "Type\"\212\003\n\014SessionProto\022\022\n\nsession_id\030\001 \001("
    "\t\0221\n\014trans_params\030\006 \003(\0132\033.hotbox.Transfo"
    "rmParamProto\022=\n\027transform_output_ranges\030"
    "\002 \003(\0132\034.hotbox.TransformOutputRange\022&\n\010o"
    "_schema\030\003 \001(\0132\024.hotbox.OSchemaProto\0229\n\025i"
    "nternal_family_proto\030\007 \001(\0132\032.hotbox.Feat"
    "ureFamilyProto\022&\n\ncompressor\030\004 \001(\0162\022.hot"
    "box.Compressor\022!\n\010file_map\030\005 \001(\0132\017.hotbo"
    "x.FileMap\0222\n\021output_store_type\030\010 \001(\0162\027.h"
    "otbox.OutputStoreType\022\022\n\noutput_dim\030\t \001("
    "\003b\006proto3", 1489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db/proto/db.proto", &protobuf_RegisterTypes);
  FeatureStatProto::default_instance_ = new FeatureStatProto();
  DBServerConfig::default_instance_ = new DBServerConfig();
  DBConfig::default_instance_ = new DBConfig();
  FileMap::default_instance_ = new FileMap();
  DBMetaData::default_instance_ = new DBMetaData();
  DBAtom::default_instance_ = new DBAtom();
  DBProto::default_instance_ = new DBProto();
  DBRootFile::default_instance_ = new DBRootFile();
  TransformOutputRange::default_instance_ = new TransformOutputRange();
  SessionOptionsProto::default_instance_ = new SessionOptionsProto();
  SessionProto::default_instance_ = new SessionProto();
  FeatureStatProto::default_instance_->InitAsDefaultInstance();
  DBServerConfig::default_instance_->InitAsDefaultInstance();
  DBConfig::default_instance_->InitAsDefaultInstance();
  FileMap::default_instance_->InitAsDefaultInstance();
  DBMetaData::default_instance_->InitAsDefaultInstance();
  DBAtom::default_instance_->InitAsDefaultInstance();
  DBProto::default_instance_->InitAsDefaultInstance();
  DBRootFile::default_instance_->InitAsDefaultInstance();
  TransformOutputRange::default_instance_->InitAsDefaultInstance();
  SessionOptionsProto::default_instance_->InitAsDefaultInstance();
  SessionProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_2fproto_2fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_2fproto_2fdb_2eproto {
  StaticDescriptorInitializer_db_2fproto_2fdb_2eproto() {
    protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  }
} static_descriptor_initializer_db_2fproto_2fdb_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int FeatureStatProto::kMaxFieldNumber;
const int FeatureStatProto::kMinFieldNumber;
const int FeatureStatProto::kMeanFieldNumber;
const int FeatureStatProto::kStdFieldNumber;
#endif  // !_MSC_VER

FeatureStatProto::FeatureStatProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.FeatureStatProto)
}

void FeatureStatProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureStatProto::FeatureStatProto(const FeatureStatProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.FeatureStatProto)
}

void FeatureStatProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_ = 0;
  min_ = 0;
  mean_ = 0;
  std_ = 0;
}

FeatureStatProto::~FeatureStatProto() {
  // @@protoc_insertion_point(destructor:hotbox.FeatureStatProto)
  SharedDtor();
}

void FeatureStatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureStatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureStatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureStatProto_descriptor_;
}

const FeatureStatProto& FeatureStatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

FeatureStatProto* FeatureStatProto::default_instance_ = NULL;

FeatureStatProto* FeatureStatProto::New(::google::protobuf::Arena* arena) const {
  FeatureStatProto* n = new FeatureStatProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureStatProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FeatureStatProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_, std_);

#undef ZR_HELPER_
#undef ZR_

}

bool FeatureStatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.FeatureStatProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mean = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_std;
        break;
      }

      // optional double std = 2;
      case 2: {
        if (tag == 17) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max;
        break;
      }

      // optional double max = 5;
      case 5: {
        if (tag == 41) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min;
        break;
      }

      // optional double min = 6;
      case 6: {
        if (tag == 49) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.FeatureStatProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.FeatureStatProto)
  return false;
#undef DO_
}

void FeatureStatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.FeatureStatProto)
  // optional double mean = 1;
  if (this->mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mean(), output);
  }

  // optional double std = 2;
  if (this->std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->std(), output);
  }

  // optional double max = 5;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max(), output);
  }

  // optional double min = 6;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.FeatureStatProto)
}

::google::protobuf::uint8* FeatureStatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.FeatureStatProto)
  // optional double mean = 1;
  if (this->mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mean(), target);
  }

  // optional double std = 2;
  if (this->std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->std(), target);
  }

  // optional double max = 5;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max(), target);
  }

  // optional double min = 6;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.FeatureStatProto)
  return target;
}

int FeatureStatProto::ByteSize() const {
  int total_size = 0;

  // optional double max = 5;
  if (this->max() != 0) {
    total_size += 1 + 8;
  }

  // optional double min = 6;
  if (this->min() != 0) {
    total_size += 1 + 8;
  }

  // optional double mean = 1;
  if (this->mean() != 0) {
    total_size += 1 + 8;
  }

  // optional double std = 2;
  if (this->std() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureStatProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureStatProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureStatProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureStatProto::MergeFrom(const FeatureStatProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.mean() != 0) {
    set_mean(from.mean());
  }
  if (from.std() != 0) {
    set_std(from.std());
  }
}

void FeatureStatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureStatProto::CopyFrom(const FeatureStatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureStatProto::IsInitialized() const {

  return true;
}

void FeatureStatProto::Swap(FeatureStatProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureStatProto::InternalSwap(FeatureStatProto* other) {
  std::swap(max_, other->max_);
  std::swap(min_, other->min_);
  std::swap(mean_, other->mean_);
  std::swap(std_, other->std_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureStatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureStatProto_descriptor_;
  metadata.reflection = FeatureStatProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureStatProto

// optional double max = 5;
void FeatureStatProto::clear_max() {
  max_ = 0;
}
 double FeatureStatProto::max() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.max)
  return max_;
}
 void FeatureStatProto::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.max)
}

// optional double min = 6;
void FeatureStatProto::clear_min() {
  min_ = 0;
}
 double FeatureStatProto::min() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.min)
  return min_;
}
 void FeatureStatProto::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.min)
}

// optional double mean = 1;
void FeatureStatProto::clear_mean() {
  mean_ = 0;
}
 double FeatureStatProto::mean() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.mean)
  return mean_;
}
 void FeatureStatProto::set_mean(double value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.mean)
}

// optional double std = 2;
void FeatureStatProto::clear_std() {
  std_ = 0;
}
 double FeatureStatProto::std() const {
  // @@protoc_insertion_point(field_get:hotbox.FeatureStatProto.std)
  return std_;
}
 void FeatureStatProto::set_std(double value) {
  
  std_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FeatureStatProto.std)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DBServerConfig::kDbDirFieldNumber;
#endif  // !_MSC_VER

DBServerConfig::DBServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBServerConfig)
}

void DBServerConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DBServerConfig::DBServerConfig(const DBServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBServerConfig)
}

void DBServerConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBServerConfig::~DBServerConfig() {
  // @@protoc_insertion_point(destructor:hotbox.DBServerConfig)
  SharedDtor();
}

void DBServerConfig::SharedDtor() {
  db_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DBServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBServerConfig_descriptor_;
}

const DBServerConfig& DBServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

DBServerConfig* DBServerConfig::default_instance_ = NULL;

DBServerConfig* DBServerConfig::New(::google::protobuf::Arena* arena) const {
  DBServerConfig* n = new DBServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBServerConfig::Clear() {
  db_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DBServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_dir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_dir().data(), this->db_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.DBServerConfig.db_dir"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBServerConfig)
  return false;
#undef DO_
}

void DBServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBServerConfig)
  // optional string db_dir = 1;
  if (this->db_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_dir().data(), this->db_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBServerConfig.db_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_dir(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DBServerConfig)
}

::google::protobuf::uint8* DBServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBServerConfig)
  // optional string db_dir = 1;
  if (this->db_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_dir().data(), this->db_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBServerConfig.db_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_dir(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBServerConfig)
  return target;
}

int DBServerConfig::ByteSize() const {
  int total_size = 0;

  // optional string db_dir = 1;
  if (this->db_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_dir());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBServerConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBServerConfig::MergeFrom(const DBServerConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.db_dir().size() > 0) {

    db_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_dir_);
  }
}

void DBServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBServerConfig::CopyFrom(const DBServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBServerConfig::IsInitialized() const {

  return true;
}

void DBServerConfig::Swap(DBServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBServerConfig::InternalSwap(DBServerConfig* other) {
  db_dir_.Swap(&other->db_dir_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBServerConfig_descriptor_;
  metadata.reflection = DBServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBServerConfig

// optional string db_dir = 1;
void DBServerConfig::clear_db_dir() {
  db_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DBServerConfig::db_dir() const {
  // @@protoc_insertion_point(field_get:hotbox.DBServerConfig.db_dir)
  return db_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBServerConfig::set_db_dir(const ::std::string& value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBServerConfig.db_dir)
}
 void DBServerConfig::set_db_dir(const char* value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBServerConfig.db_dir)
}
 void DBServerConfig::set_db_dir(const char* value, size_t size) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBServerConfig.db_dir)
}
 ::std::string* DBServerConfig::mutable_db_dir() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBServerConfig.db_dir)
  return db_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBServerConfig::release_db_dir() {
  
  return db_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBServerConfig::set_allocated_db_dir(::std::string* db_dir) {
  if (db_dir != NULL) {
    
  } else {
    
  }
  db_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBServerConfig.db_dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DBConfig::kDbNameFieldNumber;
const int DBConfig::kDbDescriptionFieldNumber;
const int DBConfig::kSchemaConfigFieldNumber;
const int DBConfig::kCompressorFieldNumber;
const int DBConfig::kDbDirFieldNumber;
#endif  // !_MSC_VER

DBConfig::DBConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBConfig)
}

void DBConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  schema_config_ = const_cast< ::hotbox::SchemaConfig*>(&::hotbox::SchemaConfig::default_instance());
}

DBConfig::DBConfig(const DBConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBConfig)
}

void DBConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_config_ = NULL;
  compressor_ = 0;
  db_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DBConfig::~DBConfig() {
  // @@protoc_insertion_point(destructor:hotbox.DBConfig)
  SharedDtor();
}

void DBConfig::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete schema_config_;
  }
}

void DBConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBConfig_descriptor_;
}

const DBConfig& DBConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

DBConfig* DBConfig::default_instance_ = NULL;

DBConfig* DBConfig::New(::google::protobuf::Arena* arena) const {
  DBConfig* n = new DBConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBConfig::Clear() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schema_config_ != NULL) delete schema_config_;
  schema_config_ = NULL;
  compressor_ = 0;
  db_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DBConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.DBConfig.db_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_description;
        break;
      }

      // optional string db_description = 2;
      case 2: {
        if (tag == 18) {
         parse_db_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_description().data(), this->db_description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.DBConfig.db_description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_schema_config;
        break;
      }

      // optional .hotbox.SchemaConfig schema_config = 3;
      case 3: {
        if (tag == 26) {
         parse_schema_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_db_dir;
        break;
      }

      // optional string db_dir = 4;
      case 4: {
        if (tag == 34) {
         parse_db_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_dir().data(), this->db_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.DBConfig.db_dir"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_compressor;
        break;
      }

      // optional .hotbox.Compressor compressor = 5;
      case 5: {
        if (tag == 40) {
         parse_compressor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compressor(static_cast< ::hotbox::Compressor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBConfig)
  return false;
#undef DO_
}

void DBConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBConfig)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBConfig.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // optional string db_description = 2;
  if (this->db_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_description().data(), this->db_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBConfig.db_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_description(), output);
  }

  // optional .hotbox.SchemaConfig schema_config = 3;
  if (this->has_schema_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->schema_config_, output);
  }

  // optional string db_dir = 4;
  if (this->db_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_dir().data(), this->db_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBConfig.db_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->db_dir(), output);
  }

  // optional .hotbox.Compressor compressor = 5;
  if (this->compressor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->compressor(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DBConfig)
}

::google::protobuf::uint8* DBConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBConfig)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBConfig.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // optional string db_description = 2;
  if (this->db_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_description().data(), this->db_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBConfig.db_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_description(), target);
  }

  // optional .hotbox.SchemaConfig schema_config = 3;
  if (this->has_schema_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->schema_config_, target);
  }

  // optional string db_dir = 4;
  if (this->db_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_dir().data(), this->db_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBConfig.db_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->db_dir(), target);
  }

  // optional .hotbox.Compressor compressor = 5;
  if (this->compressor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->compressor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBConfig)
  return target;
}

int DBConfig::ByteSize() const {
  int total_size = 0;

  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // optional string db_description = 2;
  if (this->db_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_description());
  }

  // optional .hotbox.SchemaConfig schema_config = 3;
  if (this->has_schema_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->schema_config_);
  }

  // optional .hotbox.Compressor compressor = 5;
  if (this->compressor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compressor());
  }

  // optional string db_dir = 4;
  if (this->db_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_dir());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBConfig::MergeFrom(const DBConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.db_description().size() > 0) {

    db_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_description_);
  }
  if (from.has_schema_config()) {
    mutable_schema_config()->::hotbox::SchemaConfig::MergeFrom(from.schema_config());
  }
  if (from.compressor() != 0) {
    set_compressor(from.compressor());
  }
  if (from.db_dir().size() > 0) {

    db_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_dir_);
  }
}

void DBConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBConfig::CopyFrom(const DBConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBConfig::IsInitialized() const {

  return true;
}

void DBConfig::Swap(DBConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBConfig::InternalSwap(DBConfig* other) {
  db_name_.Swap(&other->db_name_);
  db_description_.Swap(&other->db_description_);
  std::swap(schema_config_, other->schema_config_);
  std::swap(compressor_, other->compressor_);
  db_dir_.Swap(&other->db_dir_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBConfig_descriptor_;
  metadata.reflection = DBConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBConfig

// optional string db_name = 1;
void DBConfig::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DBConfig::db_name() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.db_name)
}
 void DBConfig::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBConfig.db_name)
}
 void DBConfig::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBConfig.db_name)
}
 ::std::string* DBConfig::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.db_name)
}

// optional string db_description = 2;
void DBConfig::clear_db_description() {
  db_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DBConfig::db_description() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.db_description)
  return db_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_db_description(const ::std::string& value) {
  
  db_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.db_description)
}
 void DBConfig::set_db_description(const char* value) {
  
  db_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBConfig.db_description)
}
 void DBConfig::set_db_description(const char* value, size_t size) {
  
  db_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBConfig.db_description)
}
 ::std::string* DBConfig::mutable_db_description() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.db_description)
  return db_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_db_description() {
  
  return db_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_db_description(::std::string* db_description) {
  if (db_description != NULL) {
    
  } else {
    
  }
  db_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_description);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.db_description)
}

// optional .hotbox.SchemaConfig schema_config = 3;
bool DBConfig::has_schema_config() const {
  return !_is_default_instance_ && schema_config_ != NULL;
}
void DBConfig::clear_schema_config() {
  if (GetArenaNoVirtual() == NULL && schema_config_ != NULL) delete schema_config_;
  schema_config_ = NULL;
}
const ::hotbox::SchemaConfig& DBConfig::schema_config() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.schema_config)
  return schema_config_ != NULL ? *schema_config_ : *default_instance_->schema_config_;
}
::hotbox::SchemaConfig* DBConfig::mutable_schema_config() {
  
  if (schema_config_ == NULL) {
    schema_config_ = new ::hotbox::SchemaConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.schema_config)
  return schema_config_;
}
::hotbox::SchemaConfig* DBConfig::release_schema_config() {
  
  ::hotbox::SchemaConfig* temp = schema_config_;
  schema_config_ = NULL;
  return temp;
}
void DBConfig::set_allocated_schema_config(::hotbox::SchemaConfig* schema_config) {
  delete schema_config_;
  schema_config_ = schema_config;
  if (schema_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.schema_config)
}

// optional .hotbox.Compressor compressor = 5;
void DBConfig::clear_compressor() {
  compressor_ = 0;
}
 ::hotbox::Compressor DBConfig::compressor() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.compressor)
  return static_cast< ::hotbox::Compressor >(compressor_);
}
 void DBConfig::set_compressor(::hotbox::Compressor value) {
  
  compressor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.compressor)
}

// optional string db_dir = 4;
void DBConfig::clear_db_dir() {
  db_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DBConfig::db_dir() const {
  // @@protoc_insertion_point(field_get:hotbox.DBConfig.db_dir)
  return db_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_db_dir(const ::std::string& value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.DBConfig.db_dir)
}
 void DBConfig::set_db_dir(const char* value) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.DBConfig.db_dir)
}
 void DBConfig::set_db_dir(const char* value, size_t size) {
  
  db_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBConfig.db_dir)
}
 ::std::string* DBConfig::mutable_db_dir() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.DBConfig.db_dir)
  return db_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_db_dir() {
  
  return db_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_db_dir(::std::string* db_dir) {
  if (db_dir != NULL) {
    
  } else {
    
  }
  db_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir);
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBConfig.db_dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FileMap::kAtomPathFieldNumber;
const int FileMap::kDatumIdsFieldNumber;
const int FileMap::kNumDataFieldNumber;
#endif  // !_MSC_VER

FileMap::FileMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.FileMap)
}

void FileMap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileMap::FileMap(const FileMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.FileMap)
}

void FileMap::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  atom_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_data_ = GOOGLE_LONGLONG(0);
}

FileMap::~FileMap() {
  // @@protoc_insertion_point(destructor:hotbox.FileMap)
  SharedDtor();
}

void FileMap::SharedDtor() {
  atom_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMap_descriptor_;
}

const FileMap& FileMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

FileMap* FileMap::default_instance_ = NULL;

FileMap* FileMap::New(::google::protobuf::Arena* arena) const {
  FileMap* n = new FileMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileMap::Clear() {
  atom_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_data_ = GOOGLE_LONGLONG(0);
  datum_ids_.Clear();
}

bool FileMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.FileMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 datum_ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_datum_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_datum_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_data;
        break;
      }

      // optional int64 num_data = 2;
      case 2: {
        if (tag == 16) {
         parse_num_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_atom_path;
        break;
      }

      // optional string atom_path = 3;
      case 3: {
        if (tag == 26) {
         parse_atom_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atom_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->atom_path().data(), this->atom_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.FileMap.atom_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.FileMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.FileMap)
  return false;
#undef DO_
}

void FileMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.FileMap)
  // repeated int64 datum_ids = 1;
  if (this->datum_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_datum_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->datum_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->datum_ids(i), output);
  }

  // optional int64 num_data = 2;
  if (this->num_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_data(), output);
  }

  // optional string atom_path = 3;
  if (this->atom_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->atom_path().data(), this->atom_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.FileMap.atom_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->atom_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.FileMap)
}

::google::protobuf::uint8* FileMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.FileMap)
  // repeated int64 datum_ids = 1;
  if (this->datum_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _datum_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->datum_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->datum_ids(i), target);
  }

  // optional int64 num_data = 2;
  if (this->num_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_data(), target);
  }

  // optional string atom_path = 3;
  if (this->atom_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->atom_path().data(), this->atom_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.FileMap.atom_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->atom_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.FileMap)
  return target;
}

int FileMap::ByteSize() const {
  int total_size = 0;

  // optional string atom_path = 3;
  if (this->atom_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->atom_path());
  }

  // optional int64 num_data = 2;
  if (this->num_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_data());
  }

  // repeated int64 datum_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->datum_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->datum_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _datum_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMap::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FileMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileMap>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileMap::MergeFrom(const FileMap& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  datum_ids_.MergeFrom(from.datum_ids_);
  if (from.atom_path().size() > 0) {

    atom_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.atom_path_);
  }
  if (from.num_data() != 0) {
    set_num_data(from.num_data());
  }
}

void FileMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMap::CopyFrom(const FileMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMap::IsInitialized() const {

  return true;
}

void FileMap::Swap(FileMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileMap::InternalSwap(FileMap* other) {
  atom_path_.Swap(&other->atom_path_);
  datum_ids_.UnsafeArenaSwap(&other->datum_ids_);
  std::swap(num_data_, other->num_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMap_descriptor_;
  metadata.reflection = FileMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileMap

// optional string atom_path = 3;
void FileMap::clear_atom_path() {
  atom_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileMap::atom_path() const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.atom_path)
  return atom_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileMap::set_atom_path(const ::std::string& value) {
  
  atom_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.FileMap.atom_path)
}
 void FileMap::set_atom_path(const char* value) {
  
  atom_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.FileMap.atom_path)
}
 void FileMap::set_atom_path(const char* value, size_t size) {
  
  atom_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.FileMap.atom_path)
}
 ::std::string* FileMap::mutable_atom_path() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.FileMap.atom_path)
  return atom_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileMap::release_atom_path() {
  
  return atom_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileMap::set_allocated_atom_path(::std::string* atom_path) {
  if (atom_path != NULL) {
    
  } else {
    
  }
  atom_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), atom_path);
  // @@protoc_insertion_point(field_set_allocated:hotbox.FileMap.atom_path)
}

// repeated int64 datum_ids = 1;
int FileMap::datum_ids_size() const {
  return datum_ids_.size();
}
void FileMap::clear_datum_ids() {
  datum_ids_.Clear();
}
 ::google::protobuf::int64 FileMap::datum_ids(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.datum_ids)
  return datum_ids_.Get(index);
}
 void FileMap::set_datum_ids(int index, ::google::protobuf::int64 value) {
  datum_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.FileMap.datum_ids)
}
 void FileMap::add_datum_ids(::google::protobuf::int64 value) {
  datum_ids_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.FileMap.datum_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FileMap::datum_ids() const {
  // @@protoc_insertion_point(field_list:hotbox.FileMap.datum_ids)
  return datum_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FileMap::mutable_datum_ids() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.FileMap.datum_ids)
  return &datum_ids_;
}

// optional int64 num_data = 2;
void FileMap::clear_num_data() {
  num_data_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FileMap::num_data() const {
  // @@protoc_insertion_point(field_get:hotbox.FileMap.num_data)
  return num_data_;
}
 void FileMap::set_num_data(::google::protobuf::int64 value) {
  
  num_data_ = value;
  // @@protoc_insertion_point(field_set:hotbox.FileMap.num_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DBMetaData::kDbConfigFieldNumber;
const int DBMetaData::kNumEpochFieldNumber;
const int DBMetaData::kCreationTimeFieldNumber;
const int DBMetaData::kFeatureIndexTypeFieldNumber;
const int DBMetaData::kFileMapFieldNumber;
#endif  // !_MSC_VER

DBMetaData::DBMetaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBMetaData)
}

void DBMetaData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  db_config_ = const_cast< ::hotbox::DBConfig*>(&::hotbox::DBConfig::default_instance());
  file_map_ = const_cast< ::hotbox::FileMap*>(&::hotbox::FileMap::default_instance());
}

DBMetaData::DBMetaData(const DBMetaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBMetaData)
}

void DBMetaData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  db_config_ = NULL;
  num_epoch_ = 0u;
  creation_time_ = GOOGLE_ULONGLONG(0);
  feature_index_type_ = 0;
  file_map_ = NULL;
}

DBMetaData::~DBMetaData() {
  // @@protoc_insertion_point(destructor:hotbox.DBMetaData)
  SharedDtor();
}

void DBMetaData::SharedDtor() {
  if (this != default_instance_) {
    delete db_config_;
    delete file_map_;
  }
}

void DBMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBMetaData_descriptor_;
}

const DBMetaData& DBMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

DBMetaData* DBMetaData::default_instance_ = NULL;

DBMetaData* DBMetaData::New(::google::protobuf::Arena* arena) const {
  DBMetaData* n = new DBMetaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBMetaData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DBMetaData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(creation_time_, feature_index_type_);
  if (GetArenaNoVirtual() == NULL && db_config_ != NULL) delete db_config_;
  db_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_map_ != NULL) delete file_map_;
  file_map_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool DBMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBMetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.DBConfig db_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_feature_index_type;
        break;
      }

      // optional .hotbox.FeatureIndexType feature_index_type = 2;
      case 2: {
        if (tag == 16) {
         parse_feature_index_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_feature_index_type(static_cast< ::hotbox::FeatureIndexType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_epoch;
        break;
      }

      // optional uint32 num_epoch = 5;
      case 5: {
        if (tag == 40) {
         parse_num_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_epoch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_file_map;
        break;
      }

      // optional .hotbox.FileMap file_map = 6;
      case 6: {
        if (tag == 50) {
         parse_file_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 8;
      case 8: {
        if (tag == 64) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBMetaData)
  return false;
#undef DO_
}

void DBMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBMetaData)
  // optional .hotbox.DBConfig db_config = 1;
  if (this->has_db_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->db_config_, output);
  }

  // optional .hotbox.FeatureIndexType feature_index_type = 2;
  if (this->feature_index_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->feature_index_type(), output);
  }

  // optional uint32 num_epoch = 5;
  if (this->num_epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_epoch(), output);
  }

  // optional .hotbox.FileMap file_map = 6;
  if (this->has_file_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->file_map_, output);
  }

  // optional uint64 creation_time = 8;
  if (this->creation_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->creation_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DBMetaData)
}

::google::protobuf::uint8* DBMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBMetaData)
  // optional .hotbox.DBConfig db_config = 1;
  if (this->has_db_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->db_config_, target);
  }

  // optional .hotbox.FeatureIndexType feature_index_type = 2;
  if (this->feature_index_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->feature_index_type(), target);
  }

  // optional uint32 num_epoch = 5;
  if (this->num_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_epoch(), target);
  }

  // optional .hotbox.FileMap file_map = 6;
  if (this->has_file_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->file_map_, target);
  }

  // optional uint64 creation_time = 8;
  if (this->creation_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->creation_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBMetaData)
  return target;
}

int DBMetaData::ByteSize() const {
  int total_size = 0;

  // optional .hotbox.DBConfig db_config = 1;
  if (this->has_db_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->db_config_);
  }

  // optional uint32 num_epoch = 5;
  if (this->num_epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_epoch());
  }

  // optional uint64 creation_time = 8;
  if (this->creation_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->creation_time());
  }

  // optional .hotbox.FeatureIndexType feature_index_type = 2;
  if (this->feature_index_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature_index_type());
  }

  // optional .hotbox.FileMap file_map = 6;
  if (this->has_file_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_map_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBMetaData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBMetaData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBMetaData::MergeFrom(const DBMetaData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_db_config()) {
    mutable_db_config()->::hotbox::DBConfig::MergeFrom(from.db_config());
  }
  if (from.num_epoch() != 0) {
    set_num_epoch(from.num_epoch());
  }
  if (from.creation_time() != 0) {
    set_creation_time(from.creation_time());
  }
  if (from.feature_index_type() != 0) {
    set_feature_index_type(from.feature_index_type());
  }
  if (from.has_file_map()) {
    mutable_file_map()->::hotbox::FileMap::MergeFrom(from.file_map());
  }
}

void DBMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMetaData::CopyFrom(const DBMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMetaData::IsInitialized() const {

  return true;
}

void DBMetaData::Swap(DBMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBMetaData::InternalSwap(DBMetaData* other) {
  std::swap(db_config_, other->db_config_);
  std::swap(num_epoch_, other->num_epoch_);
  std::swap(creation_time_, other->creation_time_);
  std::swap(feature_index_type_, other->feature_index_type_);
  std::swap(file_map_, other->file_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBMetaData_descriptor_;
  metadata.reflection = DBMetaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBMetaData

// optional .hotbox.DBConfig db_config = 1;
bool DBMetaData::has_db_config() const {
  return !_is_default_instance_ && db_config_ != NULL;
}
void DBMetaData::clear_db_config() {
  if (GetArenaNoVirtual() == NULL && db_config_ != NULL) delete db_config_;
  db_config_ = NULL;
}
const ::hotbox::DBConfig& DBMetaData::db_config() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.db_config)
  return db_config_ != NULL ? *db_config_ : *default_instance_->db_config_;
}
::hotbox::DBConfig* DBMetaData::mutable_db_config() {
  
  if (db_config_ == NULL) {
    db_config_ = new ::hotbox::DBConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBMetaData.db_config)
  return db_config_;
}
::hotbox::DBConfig* DBMetaData::release_db_config() {
  
  ::hotbox::DBConfig* temp = db_config_;
  db_config_ = NULL;
  return temp;
}
void DBMetaData::set_allocated_db_config(::hotbox::DBConfig* db_config) {
  delete db_config_;
  db_config_ = db_config;
  if (db_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBMetaData.db_config)
}

// optional uint32 num_epoch = 5;
void DBMetaData::clear_num_epoch() {
  num_epoch_ = 0u;
}
 ::google::protobuf::uint32 DBMetaData::num_epoch() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.num_epoch)
  return num_epoch_;
}
 void DBMetaData::set_num_epoch(::google::protobuf::uint32 value) {
  
  num_epoch_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBMetaData.num_epoch)
}

// optional uint64 creation_time = 8;
void DBMetaData::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DBMetaData::creation_time() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.creation_time)
  return creation_time_;
}
 void DBMetaData::set_creation_time(::google::protobuf::uint64 value) {
  
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBMetaData.creation_time)
}

// optional .hotbox.FeatureIndexType feature_index_type = 2;
void DBMetaData::clear_feature_index_type() {
  feature_index_type_ = 0;
}
 ::hotbox::FeatureIndexType DBMetaData::feature_index_type() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.feature_index_type)
  return static_cast< ::hotbox::FeatureIndexType >(feature_index_type_);
}
 void DBMetaData::set_feature_index_type(::hotbox::FeatureIndexType value) {
  
  feature_index_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.DBMetaData.feature_index_type)
}

// optional .hotbox.FileMap file_map = 6;
bool DBMetaData::has_file_map() const {
  return !_is_default_instance_ && file_map_ != NULL;
}
void DBMetaData::clear_file_map() {
  if (GetArenaNoVirtual() == NULL && file_map_ != NULL) delete file_map_;
  file_map_ = NULL;
}
const ::hotbox::FileMap& DBMetaData::file_map() const {
  // @@protoc_insertion_point(field_get:hotbox.DBMetaData.file_map)
  return file_map_ != NULL ? *file_map_ : *default_instance_->file_map_;
}
::hotbox::FileMap* DBMetaData::mutable_file_map() {
  
  if (file_map_ == NULL) {
    file_map_ = new ::hotbox::FileMap;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBMetaData.file_map)
  return file_map_;
}
::hotbox::FileMap* DBMetaData::release_file_map() {
  
  ::hotbox::FileMap* temp = file_map_;
  file_map_ = NULL;
  return temp;
}
void DBMetaData::set_allocated_file_map(::hotbox::FileMap* file_map) {
  delete file_map_;
  file_map_ = file_map;
  if (file_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBMetaData.file_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DBAtom::kDatumProtosFieldNumber;
#endif  // !_MSC_VER

DBAtom::DBAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBAtom)
}

void DBAtom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DBAtom::DBAtom(const DBAtom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBAtom)
}

void DBAtom::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DBAtom::~DBAtom() {
  // @@protoc_insertion_point(destructor:hotbox.DBAtom)
  SharedDtor();
}

void DBAtom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAtom_descriptor_;
}

const DBAtom& DBAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

DBAtom* DBAtom::default_instance_ = NULL;

DBAtom* DBAtom::New(::google::protobuf::Arena* arena) const {
  DBAtom* n = new DBAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBAtom::Clear() {
  datum_protos_.Clear();
}

bool DBAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hotbox.DatumProto datum_protos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datum_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datum_protos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_datum_protos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBAtom)
  return false;
#undef DO_
}

void DBAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBAtom)
  // repeated .hotbox.DatumProto datum_protos = 1;
  for (unsigned int i = 0, n = this->datum_protos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datum_protos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DBAtom)
}

::google::protobuf::uint8* DBAtom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBAtom)
  // repeated .hotbox.DatumProto datum_protos = 1;
  for (unsigned int i = 0, n = this->datum_protos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datum_protos(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBAtom)
  return target;
}

int DBAtom::ByteSize() const {
  int total_size = 0;

  // repeated .hotbox.DatumProto datum_protos = 1;
  total_size += 1 * this->datum_protos_size();
  for (int i = 0; i < this->datum_protos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datum_protos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAtom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBAtom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBAtom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAtom::MergeFrom(const DBAtom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  datum_protos_.MergeFrom(from.datum_protos_);
}

void DBAtom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAtom::CopyFrom(const DBAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAtom::IsInitialized() const {

  return true;
}

void DBAtom::Swap(DBAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBAtom::InternalSwap(DBAtom* other) {
  datum_protos_.UnsafeArenaSwap(&other->datum_protos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAtom_descriptor_;
  metadata.reflection = DBAtom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBAtom

// repeated .hotbox.DatumProto datum_protos = 1;
int DBAtom::datum_protos_size() const {
  return datum_protos_.size();
}
void DBAtom::clear_datum_protos() {
  datum_protos_.Clear();
}
const ::hotbox::DatumProto& DBAtom::datum_protos(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DBAtom.datum_protos)
  return datum_protos_.Get(index);
}
::hotbox::DatumProto* DBAtom::mutable_datum_protos(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DBAtom.datum_protos)
  return datum_protos_.Mutable(index);
}
::hotbox::DatumProto* DBAtom::add_datum_protos() {
  // @@protoc_insertion_point(field_add:hotbox.DBAtom.datum_protos)
  return datum_protos_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto >*
DBAtom::mutable_datum_protos() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DBAtom.datum_protos)
  return &datum_protos_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::DatumProto >&
DBAtom::datum_protos() const {
  // @@protoc_insertion_point(field_list:hotbox.DBAtom.datum_protos)
  return datum_protos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DBProto::kMetaDataFieldNumber;
const int DBProto::kSchemaProtoFieldNumber;
#endif  // !_MSC_VER

DBProto::DBProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBProto)
}

void DBProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  meta_data_ = const_cast< ::hotbox::DBMetaData*>(&::hotbox::DBMetaData::default_instance());
  schema_proto_ = const_cast< ::hotbox::SchemaProto*>(&::hotbox::SchemaProto::default_instance());
}

DBProto::DBProto(const DBProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBProto)
}

void DBProto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  meta_data_ = NULL;
  schema_proto_ = NULL;
}

DBProto::~DBProto() {
  // @@protoc_insertion_point(destructor:hotbox.DBProto)
  SharedDtor();
}

void DBProto::SharedDtor() {
  if (this != default_instance_) {
    delete meta_data_;
    delete schema_proto_;
  }
}

void DBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBProto_descriptor_;
}

const DBProto& DBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

DBProto* DBProto::default_instance_ = NULL;

DBProto* DBProto::New(::google::protobuf::Arena* arena) const {
  DBProto* n = new DBProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBProto::Clear() {
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) delete meta_data_;
  meta_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && schema_proto_ != NULL) delete schema_proto_;
  schema_proto_ = NULL;
}

bool DBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.DBMetaData meta_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_schema_proto;
        break;
      }

      // optional .hotbox.SchemaProto schema_proto = 2;
      case 2: {
        if (tag == 18) {
         parse_schema_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema_proto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBProto)
  return false;
#undef DO_
}

void DBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBProto)
  // optional .hotbox.DBMetaData meta_data = 1;
  if (this->has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_data_, output);
  }

  // optional .hotbox.SchemaProto schema_proto = 2;
  if (this->has_schema_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->schema_proto_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DBProto)
}

::google::protobuf::uint8* DBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBProto)
  // optional .hotbox.DBMetaData meta_data = 1;
  if (this->has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->meta_data_, target);
  }

  // optional .hotbox.SchemaProto schema_proto = 2;
  if (this->has_schema_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->schema_proto_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBProto)
  return target;
}

int DBProto::ByteSize() const {
  int total_size = 0;

  // optional .hotbox.DBMetaData meta_data = 1;
  if (this->has_meta_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_data_);
  }

  // optional .hotbox.SchemaProto schema_proto = 2;
  if (this->has_schema_proto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->schema_proto_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBProto::MergeFrom(const DBProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_meta_data()) {
    mutable_meta_data()->::hotbox::DBMetaData::MergeFrom(from.meta_data());
  }
  if (from.has_schema_proto()) {
    mutable_schema_proto()->::hotbox::SchemaProto::MergeFrom(from.schema_proto());
  }
}

void DBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBProto::CopyFrom(const DBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBProto::IsInitialized() const {

  return true;
}

void DBProto::Swap(DBProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBProto::InternalSwap(DBProto* other) {
  std::swap(meta_data_, other->meta_data_);
  std::swap(schema_proto_, other->schema_proto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBProto_descriptor_;
  metadata.reflection = DBProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBProto

// optional .hotbox.DBMetaData meta_data = 1;
bool DBProto::has_meta_data() const {
  return !_is_default_instance_ && meta_data_ != NULL;
}
void DBProto::clear_meta_data() {
  if (GetArenaNoVirtual() == NULL && meta_data_ != NULL) delete meta_data_;
  meta_data_ = NULL;
}
const ::hotbox::DBMetaData& DBProto::meta_data() const {
  // @@protoc_insertion_point(field_get:hotbox.DBProto.meta_data)
  return meta_data_ != NULL ? *meta_data_ : *default_instance_->meta_data_;
}
::hotbox::DBMetaData* DBProto::mutable_meta_data() {
  
  if (meta_data_ == NULL) {
    meta_data_ = new ::hotbox::DBMetaData;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBProto.meta_data)
  return meta_data_;
}
::hotbox::DBMetaData* DBProto::release_meta_data() {
  
  ::hotbox::DBMetaData* temp = meta_data_;
  meta_data_ = NULL;
  return temp;
}
void DBProto::set_allocated_meta_data(::hotbox::DBMetaData* meta_data) {
  delete meta_data_;
  meta_data_ = meta_data;
  if (meta_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBProto.meta_data)
}

// optional .hotbox.SchemaProto schema_proto = 2;
bool DBProto::has_schema_proto() const {
  return !_is_default_instance_ && schema_proto_ != NULL;
}
void DBProto::clear_schema_proto() {
  if (GetArenaNoVirtual() == NULL && schema_proto_ != NULL) delete schema_proto_;
  schema_proto_ = NULL;
}
const ::hotbox::SchemaProto& DBProto::schema_proto() const {
  // @@protoc_insertion_point(field_get:hotbox.DBProto.schema_proto)
  return schema_proto_ != NULL ? *schema_proto_ : *default_instance_->schema_proto_;
}
::hotbox::SchemaProto* DBProto::mutable_schema_proto() {
  
  if (schema_proto_ == NULL) {
    schema_proto_ = new ::hotbox::SchemaProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.DBProto.schema_proto)
  return schema_proto_;
}
::hotbox::SchemaProto* DBProto::release_schema_proto() {
  
  ::hotbox::SchemaProto* temp = schema_proto_;
  schema_proto_ = NULL;
  return temp;
}
void DBProto::set_allocated_schema_proto(::hotbox::SchemaProto* schema_proto) {
  delete schema_proto_;
  schema_proto_ = schema_proto;
  if (schema_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.DBProto.schema_proto)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DBRootFile::kDbNamesFieldNumber;
#endif  // !_MSC_VER

DBRootFile::DBRootFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.DBRootFile)
}

void DBRootFile::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DBRootFile::DBRootFile(const DBRootFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.DBRootFile)
}

void DBRootFile::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

DBRootFile::~DBRootFile() {
  // @@protoc_insertion_point(destructor:hotbox.DBRootFile)
  SharedDtor();
}

void DBRootFile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBRootFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBRootFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBRootFile_descriptor_;
}

const DBRootFile& DBRootFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

DBRootFile* DBRootFile::default_instance_ = NULL;

DBRootFile* DBRootFile::New(::google::protobuf::Arena* arena) const {
  DBRootFile* n = new DBRootFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBRootFile::Clear() {
  db_names_.Clear();
}

bool DBRootFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.DBRootFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string db_names = 1;
      case 1: {
        if (tag == 10) {
         parse_db_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_names(this->db_names_size() - 1).data(),
            this->db_names(this->db_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.DBRootFile.db_names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_db_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.DBRootFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.DBRootFile)
  return false;
#undef DO_
}

void DBRootFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.DBRootFile)
  // repeated string db_names = 1;
  for (int i = 0; i < this->db_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_names(i).data(), this->db_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBRootFile.db_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->db_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.DBRootFile)
}

::google::protobuf::uint8* DBRootFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.DBRootFile)
  // repeated string db_names = 1;
  for (int i = 0; i < this->db_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_names(i).data(), this->db_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.DBRootFile.db_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->db_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.DBRootFile)
  return target;
}

int DBRootFile::ByteSize() const {
  int total_size = 0;

  // repeated string db_names = 1;
  total_size += 1 * this->db_names_size();
  for (int i = 0; i < this->db_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBRootFile::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBRootFile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBRootFile>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBRootFile::MergeFrom(const DBRootFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  db_names_.MergeFrom(from.db_names_);
}

void DBRootFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRootFile::CopyFrom(const DBRootFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRootFile::IsInitialized() const {

  return true;
}

void DBRootFile::Swap(DBRootFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBRootFile::InternalSwap(DBRootFile* other) {
  db_names_.UnsafeArenaSwap(&other->db_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBRootFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBRootFile_descriptor_;
  metadata.reflection = DBRootFile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBRootFile

// repeated string db_names = 1;
int DBRootFile::db_names_size() const {
  return db_names_.size();
}
void DBRootFile::clear_db_names() {
  db_names_.Clear();
}
 const ::std::string& DBRootFile::db_names(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.DBRootFile.db_names)
  return db_names_.Get(index);
}
 ::std::string* DBRootFile::mutable_db_names(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.DBRootFile.db_names)
  return db_names_.Mutable(index);
}
 void DBRootFile::set_db_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.DBRootFile.db_names)
  db_names_.Mutable(index)->assign(value);
}
 void DBRootFile::set_db_names(int index, const char* value) {
  db_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.DBRootFile.db_names)
}
 void DBRootFile::set_db_names(int index, const char* value, size_t size) {
  db_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.DBRootFile.db_names)
}
 ::std::string* DBRootFile::add_db_names() {
  return db_names_.Add();
}
 void DBRootFile::add_db_names(const ::std::string& value) {
  db_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.DBRootFile.db_names)
}
 void DBRootFile::add_db_names(const char* value) {
  db_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.DBRootFile.db_names)
}
 void DBRootFile::add_db_names(const char* value, size_t size) {
  db_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.DBRootFile.db_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DBRootFile::db_names() const {
  // @@protoc_insertion_point(field_list:hotbox.DBRootFile.db_names)
  return db_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DBRootFile::mutable_db_names() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.DBRootFile.db_names)
  return &db_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TransformOutputRange::kOffsetBeginFieldNumber;
const int TransformOutputRange::kOffsetEndFieldNumber;
const int TransformOutputRange::kStoreTypeFieldNumber;
#endif  // !_MSC_VER

TransformOutputRange::TransformOutputRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.TransformOutputRange)
}

void TransformOutputRange::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransformOutputRange::TransformOutputRange(const TransformOutputRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.TransformOutputRange)
}

void TransformOutputRange::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  offset_begin_ = GOOGLE_LONGLONG(0);
  offset_end_ = GOOGLE_LONGLONG(0);
  store_type_ = 0;
}

TransformOutputRange::~TransformOutputRange() {
  // @@protoc_insertion_point(destructor:hotbox.TransformOutputRange)
  SharedDtor();
}

void TransformOutputRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransformOutputRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformOutputRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformOutputRange_descriptor_;
}

const TransformOutputRange& TransformOutputRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

TransformOutputRange* TransformOutputRange::default_instance_ = NULL;

TransformOutputRange* TransformOutputRange::New(::google::protobuf::Arena* arena) const {
  TransformOutputRange* n = new TransformOutputRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformOutputRange::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransformOutputRange*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(offset_begin_, store_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool TransformOutputRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.TransformOutputRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 offset_begin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_begin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset_end;
        break;
      }

      // optional int64 offset_end = 2;
      case 2: {
        if (tag == 16) {
         parse_offset_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_store_type;
        break;
      }

      // optional .hotbox.FeatureStoreType store_type = 3;
      case 3: {
        if (tag == 24) {
         parse_store_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_store_type(static_cast< ::hotbox::FeatureStoreType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.TransformOutputRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.TransformOutputRange)
  return false;
#undef DO_
}

void TransformOutputRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.TransformOutputRange)
  // optional int64 offset_begin = 1;
  if (this->offset_begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset_begin(), output);
  }

  // optional int64 offset_end = 2;
  if (this->offset_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset_end(), output);
  }

  // optional .hotbox.FeatureStoreType store_type = 3;
  if (this->store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->store_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.TransformOutputRange)
}

::google::protobuf::uint8* TransformOutputRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.TransformOutputRange)
  // optional int64 offset_begin = 1;
  if (this->offset_begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset_begin(), target);
  }

  // optional int64 offset_end = 2;
  if (this->offset_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset_end(), target);
  }

  // optional .hotbox.FeatureStoreType store_type = 3;
  if (this->store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->store_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.TransformOutputRange)
  return target;
}

int TransformOutputRange::ByteSize() const {
  int total_size = 0;

  // optional int64 offset_begin = 1;
  if (this->offset_begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset_begin());
  }

  // optional int64 offset_end = 2;
  if (this->offset_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset_end());
  }

  // optional .hotbox.FeatureStoreType store_type = 3;
  if (this->store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->store_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformOutputRange::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransformOutputRange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformOutputRange>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformOutputRange::MergeFrom(const TransformOutputRange& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.offset_begin() != 0) {
    set_offset_begin(from.offset_begin());
  }
  if (from.offset_end() != 0) {
    set_offset_end(from.offset_end());
  }
  if (from.store_type() != 0) {
    set_store_type(from.store_type());
  }
}

void TransformOutputRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformOutputRange::CopyFrom(const TransformOutputRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformOutputRange::IsInitialized() const {

  return true;
}

void TransformOutputRange::Swap(TransformOutputRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformOutputRange::InternalSwap(TransformOutputRange* other) {
  std::swap(offset_begin_, other->offset_begin_);
  std::swap(offset_end_, other->offset_end_);
  std::swap(store_type_, other->store_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformOutputRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformOutputRange_descriptor_;
  metadata.reflection = TransformOutputRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformOutputRange

// optional int64 offset_begin = 1;
void TransformOutputRange::clear_offset_begin() {
  offset_begin_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TransformOutputRange::offset_begin() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformOutputRange.offset_begin)
  return offset_begin_;
}
 void TransformOutputRange::set_offset_begin(::google::protobuf::int64 value) {
  
  offset_begin_ = value;
  // @@protoc_insertion_point(field_set:hotbox.TransformOutputRange.offset_begin)
}

// optional int64 offset_end = 2;
void TransformOutputRange::clear_offset_end() {
  offset_end_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TransformOutputRange::offset_end() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformOutputRange.offset_end)
  return offset_end_;
}
 void TransformOutputRange::set_offset_end(::google::protobuf::int64 value) {
  
  offset_end_ = value;
  // @@protoc_insertion_point(field_set:hotbox.TransformOutputRange.offset_end)
}

// optional .hotbox.FeatureStoreType store_type = 3;
void TransformOutputRange::clear_store_type() {
  store_type_ = 0;
}
 ::hotbox::FeatureStoreType TransformOutputRange::store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformOutputRange.store_type)
  return static_cast< ::hotbox::FeatureStoreType >(store_type_);
}
 void TransformOutputRange::set_store_type(::hotbox::FeatureStoreType value) {
  
  store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.TransformOutputRange.store_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SessionOptionsProto::kDbNameFieldNumber;
const int SessionOptionsProto::kSessionIdFieldNumber;
const int SessionOptionsProto::kTransformConfigListFieldNumber;
const int SessionOptionsProto::kOutputStoreTypeFieldNumber;
#endif  // !_MSC_VER

SessionOptionsProto::SessionOptionsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.SessionOptionsProto)
}

void SessionOptionsProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transform_config_list_ = const_cast< ::hotbox::TransformConfigList*>(&::hotbox::TransformConfigList::default_instance());
}

SessionOptionsProto::SessionOptionsProto(const SessionOptionsProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.SessionOptionsProto)
}

void SessionOptionsProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_config_list_ = NULL;
  output_store_type_ = 0;
}

SessionOptionsProto::~SessionOptionsProto() {
  // @@protoc_insertion_point(destructor:hotbox.SessionOptionsProto)
  SharedDtor();
}

void SessionOptionsProto::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete transform_config_list_;
  }
}

void SessionOptionsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionOptionsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionOptionsProto_descriptor_;
}

const SessionOptionsProto& SessionOptionsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

SessionOptionsProto* SessionOptionsProto::default_instance_ = NULL;

SessionOptionsProto* SessionOptionsProto::New(::google::protobuf::Arena* arena) const {
  SessionOptionsProto* n = new SessionOptionsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionOptionsProto::Clear() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transform_config_list_ != NULL) delete transform_config_list_;
  transform_config_list_ = NULL;
  output_store_type_ = 0;
}

bool SessionOptionsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.SessionOptionsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SessionOptionsProto.db_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SessionOptionsProto.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transform_config_list;
        break;
      }

      // optional .hotbox.TransformConfigList transform_config_list = 3;
      case 3: {
        if (tag == 26) {
         parse_transform_config_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_config_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_output_store_type;
        break;
      }

      // optional .hotbox.OutputStoreType output_store_type = 4;
      case 4: {
        if (tag == 32) {
         parse_output_store_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_store_type(static_cast< ::hotbox::OutputStoreType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.SessionOptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.SessionOptionsProto)
  return false;
#undef DO_
}

void SessionOptionsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.SessionOptionsProto)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SessionOptionsProto.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SessionOptionsProto.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional .hotbox.TransformConfigList transform_config_list = 3;
  if (this->has_transform_config_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transform_config_list_, output);
  }

  // optional .hotbox.OutputStoreType output_store_type = 4;
  if (this->output_store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->output_store_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.SessionOptionsProto)
}

::google::protobuf::uint8* SessionOptionsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.SessionOptionsProto)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SessionOptionsProto.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SessionOptionsProto.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional .hotbox.TransformConfigList transform_config_list = 3;
  if (this->has_transform_config_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->transform_config_list_, target);
  }

  // optional .hotbox.OutputStoreType output_store_type = 4;
  if (this->output_store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->output_store_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.SessionOptionsProto)
  return target;
}

int SessionOptionsProto::ByteSize() const {
  int total_size = 0;

  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional .hotbox.TransformConfigList transform_config_list = 3;
  if (this->has_transform_config_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_config_list_);
  }

  // optional .hotbox.OutputStoreType output_store_type = 4;
  if (this->output_store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_store_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionOptionsProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SessionOptionsProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionOptionsProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionOptionsProto::MergeFrom(const SessionOptionsProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_transform_config_list()) {
    mutable_transform_config_list()->::hotbox::TransformConfigList::MergeFrom(from.transform_config_list());
  }
  if (from.output_store_type() != 0) {
    set_output_store_type(from.output_store_type());
  }
}

void SessionOptionsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionOptionsProto::CopyFrom(const SessionOptionsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionOptionsProto::IsInitialized() const {

  return true;
}

void SessionOptionsProto::Swap(SessionOptionsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionOptionsProto::InternalSwap(SessionOptionsProto* other) {
  db_name_.Swap(&other->db_name_);
  session_id_.Swap(&other->session_id_);
  std::swap(transform_config_list_, other->transform_config_list_);
  std::swap(output_store_type_, other->output_store_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionOptionsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionOptionsProto_descriptor_;
  metadata.reflection = SessionOptionsProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionOptionsProto

// optional string db_name = 1;
void SessionOptionsProto::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SessionOptionsProto::db_name() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionOptionsProto::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SessionOptionsProto.db_name)
}
 void SessionOptionsProto::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SessionOptionsProto.db_name)
}
 void SessionOptionsProto::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SessionOptionsProto.db_name)
}
 ::std::string* SessionOptionsProto::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SessionOptionsProto.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionOptionsProto::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionOptionsProto::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionOptionsProto.db_name)
}

// optional string session_id = 2;
void SessionOptionsProto::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SessionOptionsProto::session_id() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionOptionsProto::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SessionOptionsProto.session_id)
}
 void SessionOptionsProto::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SessionOptionsProto.session_id)
}
 void SessionOptionsProto::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SessionOptionsProto.session_id)
}
 ::std::string* SessionOptionsProto::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SessionOptionsProto.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionOptionsProto::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionOptionsProto::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionOptionsProto.session_id)
}

// optional .hotbox.TransformConfigList transform_config_list = 3;
bool SessionOptionsProto::has_transform_config_list() const {
  return !_is_default_instance_ && transform_config_list_ != NULL;
}
void SessionOptionsProto::clear_transform_config_list() {
  if (GetArenaNoVirtual() == NULL && transform_config_list_ != NULL) delete transform_config_list_;
  transform_config_list_ = NULL;
}
const ::hotbox::TransformConfigList& SessionOptionsProto::transform_config_list() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.transform_config_list)
  return transform_config_list_ != NULL ? *transform_config_list_ : *default_instance_->transform_config_list_;
}
::hotbox::TransformConfigList* SessionOptionsProto::mutable_transform_config_list() {
  
  if (transform_config_list_ == NULL) {
    transform_config_list_ = new ::hotbox::TransformConfigList;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionOptionsProto.transform_config_list)
  return transform_config_list_;
}
::hotbox::TransformConfigList* SessionOptionsProto::release_transform_config_list() {
  
  ::hotbox::TransformConfigList* temp = transform_config_list_;
  transform_config_list_ = NULL;
  return temp;
}
void SessionOptionsProto::set_allocated_transform_config_list(::hotbox::TransformConfigList* transform_config_list) {
  delete transform_config_list_;
  transform_config_list_ = transform_config_list;
  if (transform_config_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionOptionsProto.transform_config_list)
}

// optional .hotbox.OutputStoreType output_store_type = 4;
void SessionOptionsProto::clear_output_store_type() {
  output_store_type_ = 0;
}
 ::hotbox::OutputStoreType SessionOptionsProto::output_store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionOptionsProto.output_store_type)
  return static_cast< ::hotbox::OutputStoreType >(output_store_type_);
}
 void SessionOptionsProto::set_output_store_type(::hotbox::OutputStoreType value) {
  
  output_store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionOptionsProto.output_store_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SessionProto::kSessionIdFieldNumber;
const int SessionProto::kTransParamsFieldNumber;
const int SessionProto::kTransformOutputRangesFieldNumber;
const int SessionProto::kOSchemaFieldNumber;
const int SessionProto::kInternalFamilyProtoFieldNumber;
const int SessionProto::kCompressorFieldNumber;
const int SessionProto::kFileMapFieldNumber;
const int SessionProto::kOutputStoreTypeFieldNumber;
const int SessionProto::kOutputDimFieldNumber;
#endif  // !_MSC_VER

SessionProto::SessionProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.SessionProto)
}

void SessionProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  o_schema_ = const_cast< ::hotbox::OSchemaProto*>(&::hotbox::OSchemaProto::default_instance());
  internal_family_proto_ = const_cast< ::hotbox::FeatureFamilyProto*>(&::hotbox::FeatureFamilyProto::default_instance());
  file_map_ = const_cast< ::hotbox::FileMap*>(&::hotbox::FileMap::default_instance());
}

SessionProto::SessionProto(const SessionProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.SessionProto)
}

void SessionProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  o_schema_ = NULL;
  internal_family_proto_ = NULL;
  compressor_ = 0;
  file_map_ = NULL;
  output_store_type_ = 0;
  output_dim_ = GOOGLE_LONGLONG(0);
}

SessionProto::~SessionProto() {
  // @@protoc_insertion_point(destructor:hotbox.SessionProto)
  SharedDtor();
}

void SessionProto::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete o_schema_;
    delete internal_family_proto_;
    delete file_map_;
  }
}

void SessionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionProto_descriptor_;
}

const SessionProto& SessionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_2fproto_2fdb_2eproto();
  return *default_instance_;
}

SessionProto* SessionProto::default_instance_ = NULL;

SessionProto* SessionProto::New(::google::protobuf::Arena* arena) const {
  SessionProto* n = new SessionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionProto::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SessionProto*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(compressor_, output_store_type_);
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && o_schema_ != NULL) delete o_schema_;
  o_schema_ = NULL;
  if (GetArenaNoVirtual() == NULL && internal_family_proto_ != NULL) delete internal_family_proto_;
  internal_family_proto_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_map_ != NULL) delete file_map_;
  file_map_ = NULL;
  output_dim_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  trans_params_.Clear();
  transform_output_ranges_.Clear();
}

bool SessionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.SessionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.SessionProto.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transform_output_ranges;
        break;
      }

      // repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
      case 2: {
        if (tag == 18) {
         parse_transform_output_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_transform_output_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transform_output_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_transform_output_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_o_schema;
        break;
      }

      // optional .hotbox.OSchemaProto o_schema = 3;
      case 3: {
        if (tag == 26) {
         parse_o_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_o_schema()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_compressor;
        break;
      }

      // optional .hotbox.Compressor compressor = 4;
      case 4: {
        if (tag == 32) {
         parse_compressor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compressor(static_cast< ::hotbox::Compressor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file_map;
        break;
      }

      // optional .hotbox.FileMap file_map = 5;
      case 5: {
        if (tag == 42) {
         parse_file_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trans_params;
        break;
      }

      // repeated .hotbox.TransformParamProto trans_params = 6;
      case 6: {
        if (tag == 50) {
         parse_trans_params:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trans_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trans_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_trans_params;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_internal_family_proto;
        break;
      }

      // optional .hotbox.FeatureFamilyProto internal_family_proto = 7;
      case 7: {
        if (tag == 58) {
         parse_internal_family_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_family_proto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_output_store_type;
        break;
      }

      // optional .hotbox.OutputStoreType output_store_type = 8;
      case 8: {
        if (tag == 64) {
         parse_output_store_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_store_type(static_cast< ::hotbox::OutputStoreType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_output_dim;
        break;
      }

      // optional int64 output_dim = 9;
      case 9: {
        if (tag == 72) {
         parse_output_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_dim_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.SessionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.SessionProto)
  return false;
#undef DO_
}

void SessionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.SessionProto)
  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SessionProto.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
  for (unsigned int i = 0, n = this->transform_output_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transform_output_ranges(i), output);
  }

  // optional .hotbox.OSchemaProto o_schema = 3;
  if (this->has_o_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->o_schema_, output);
  }

  // optional .hotbox.Compressor compressor = 4;
  if (this->compressor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compressor(), output);
  }

  // optional .hotbox.FileMap file_map = 5;
  if (this->has_file_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->file_map_, output);
  }

  // repeated .hotbox.TransformParamProto trans_params = 6;
  for (unsigned int i = 0, n = this->trans_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trans_params(i), output);
  }

  // optional .hotbox.FeatureFamilyProto internal_family_proto = 7;
  if (this->has_internal_family_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->internal_family_proto_, output);
  }

  // optional .hotbox.OutputStoreType output_store_type = 8;
  if (this->output_store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->output_store_type(), output);
  }

  // optional int64 output_dim = 9;
  if (this->output_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->output_dim(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.SessionProto)
}

::google::protobuf::uint8* SessionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.SessionProto)
  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.SessionProto.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
  for (unsigned int i = 0, n = this->transform_output_ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transform_output_ranges(i), target);
  }

  // optional .hotbox.OSchemaProto o_schema = 3;
  if (this->has_o_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->o_schema_, target);
  }

  // optional .hotbox.Compressor compressor = 4;
  if (this->compressor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compressor(), target);
  }

  // optional .hotbox.FileMap file_map = 5;
  if (this->has_file_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->file_map_, target);
  }

  // repeated .hotbox.TransformParamProto trans_params = 6;
  for (unsigned int i = 0, n = this->trans_params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trans_params(i), target);
  }

  // optional .hotbox.FeatureFamilyProto internal_family_proto = 7;
  if (this->has_internal_family_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->internal_family_proto_, target);
  }

  // optional .hotbox.OutputStoreType output_store_type = 8;
  if (this->output_store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->output_store_type(), target);
  }

  // optional int64 output_dim = 9;
  if (this->output_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->output_dim(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.SessionProto)
  return target;
}

int SessionProto::ByteSize() const {
  int total_size = 0;

  // optional string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional .hotbox.OSchemaProto o_schema = 3;
  if (this->has_o_schema()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->o_schema_);
  }

  // optional .hotbox.FeatureFamilyProto internal_family_proto = 7;
  if (this->has_internal_family_proto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->internal_family_proto_);
  }

  // optional .hotbox.Compressor compressor = 4;
  if (this->compressor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compressor());
  }

  // optional .hotbox.FileMap file_map = 5;
  if (this->has_file_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_map_);
  }

  // optional .hotbox.OutputStoreType output_store_type = 8;
  if (this->output_store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_store_type());
  }

  // optional int64 output_dim = 9;
  if (this->output_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_dim());
  }

  // repeated .hotbox.TransformParamProto trans_params = 6;
  total_size += 1 * this->trans_params_size();
  for (int i = 0; i < this->trans_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trans_params(i));
  }

  // repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
  total_size += 1 * this->transform_output_ranges_size();
  for (int i = 0; i < this->transform_output_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transform_output_ranges(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SessionProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionProto::MergeFrom(const SessionProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  trans_params_.MergeFrom(from.trans_params_);
  transform_output_ranges_.MergeFrom(from.transform_output_ranges_);
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_o_schema()) {
    mutable_o_schema()->::hotbox::OSchemaProto::MergeFrom(from.o_schema());
  }
  if (from.has_internal_family_proto()) {
    mutable_internal_family_proto()->::hotbox::FeatureFamilyProto::MergeFrom(from.internal_family_proto());
  }
  if (from.compressor() != 0) {
    set_compressor(from.compressor());
  }
  if (from.has_file_map()) {
    mutable_file_map()->::hotbox::FileMap::MergeFrom(from.file_map());
  }
  if (from.output_store_type() != 0) {
    set_output_store_type(from.output_store_type());
  }
  if (from.output_dim() != 0) {
    set_output_dim(from.output_dim());
  }
}

void SessionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionProto::CopyFrom(const SessionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionProto::IsInitialized() const {

  return true;
}

void SessionProto::Swap(SessionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionProto::InternalSwap(SessionProto* other) {
  session_id_.Swap(&other->session_id_);
  trans_params_.UnsafeArenaSwap(&other->trans_params_);
  transform_output_ranges_.UnsafeArenaSwap(&other->transform_output_ranges_);
  std::swap(o_schema_, other->o_schema_);
  std::swap(internal_family_proto_, other->internal_family_proto_);
  std::swap(compressor_, other->compressor_);
  std::swap(file_map_, other->file_map_);
  std::swap(output_store_type_, other->output_store_type_);
  std::swap(output_dim_, other->output_dim_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionProto_descriptor_;
  metadata.reflection = SessionProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionProto

// optional string session_id = 1;
void SessionProto::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SessionProto::session_id() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionProto::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.session_id)
}
 void SessionProto::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.SessionProto.session_id)
}
 void SessionProto::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.SessionProto.session_id)
}
 ::std::string* SessionProto::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionProto::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionProto::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.session_id)
}

// repeated .hotbox.TransformParamProto trans_params = 6;
int SessionProto::trans_params_size() const {
  return trans_params_.size();
}
void SessionProto::clear_trans_params() {
  trans_params_.Clear();
}
const ::hotbox::TransformParamProto& SessionProto::trans_params(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.trans_params)
  return trans_params_.Get(index);
}
::hotbox::TransformParamProto* SessionProto::mutable_trans_params(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.trans_params)
  return trans_params_.Mutable(index);
}
::hotbox::TransformParamProto* SessionProto::add_trans_params() {
  // @@protoc_insertion_point(field_add:hotbox.SessionProto.trans_params)
  return trans_params_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto >*
SessionProto::mutable_trans_params() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SessionProto.trans_params)
  return &trans_params_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformParamProto >&
SessionProto::trans_params() const {
  // @@protoc_insertion_point(field_list:hotbox.SessionProto.trans_params)
  return trans_params_;
}

// repeated .hotbox.TransformOutputRange transform_output_ranges = 2;
int SessionProto::transform_output_ranges_size() const {
  return transform_output_ranges_.size();
}
void SessionProto::clear_transform_output_ranges() {
  transform_output_ranges_.Clear();
}
const ::hotbox::TransformOutputRange& SessionProto::transform_output_ranges(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_.Get(index);
}
::hotbox::TransformOutputRange* SessionProto::mutable_transform_output_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_.Mutable(index);
}
::hotbox::TransformOutputRange* SessionProto::add_transform_output_ranges() {
  // @@protoc_insertion_point(field_add:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange >*
SessionProto::mutable_transform_output_ranges() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.SessionProto.transform_output_ranges)
  return &transform_output_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformOutputRange >&
SessionProto::transform_output_ranges() const {
  // @@protoc_insertion_point(field_list:hotbox.SessionProto.transform_output_ranges)
  return transform_output_ranges_;
}

// optional .hotbox.OSchemaProto o_schema = 3;
bool SessionProto::has_o_schema() const {
  return !_is_default_instance_ && o_schema_ != NULL;
}
void SessionProto::clear_o_schema() {
  if (GetArenaNoVirtual() == NULL && o_schema_ != NULL) delete o_schema_;
  o_schema_ = NULL;
}
const ::hotbox::OSchemaProto& SessionProto::o_schema() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.o_schema)
  return o_schema_ != NULL ? *o_schema_ : *default_instance_->o_schema_;
}
::hotbox::OSchemaProto* SessionProto::mutable_o_schema() {
  
  if (o_schema_ == NULL) {
    o_schema_ = new ::hotbox::OSchemaProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.o_schema)
  return o_schema_;
}
::hotbox::OSchemaProto* SessionProto::release_o_schema() {
  
  ::hotbox::OSchemaProto* temp = o_schema_;
  o_schema_ = NULL;
  return temp;
}
void SessionProto::set_allocated_o_schema(::hotbox::OSchemaProto* o_schema) {
  delete o_schema_;
  o_schema_ = o_schema;
  if (o_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.o_schema)
}

// optional .hotbox.FeatureFamilyProto internal_family_proto = 7;
bool SessionProto::has_internal_family_proto() const {
  return !_is_default_instance_ && internal_family_proto_ != NULL;
}
void SessionProto::clear_internal_family_proto() {
  if (GetArenaNoVirtual() == NULL && internal_family_proto_ != NULL) delete internal_family_proto_;
  internal_family_proto_ = NULL;
}
const ::hotbox::FeatureFamilyProto& SessionProto::internal_family_proto() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.internal_family_proto)
  return internal_family_proto_ != NULL ? *internal_family_proto_ : *default_instance_->internal_family_proto_;
}
::hotbox::FeatureFamilyProto* SessionProto::mutable_internal_family_proto() {
  
  if (internal_family_proto_ == NULL) {
    internal_family_proto_ = new ::hotbox::FeatureFamilyProto;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.internal_family_proto)
  return internal_family_proto_;
}
::hotbox::FeatureFamilyProto* SessionProto::release_internal_family_proto() {
  
  ::hotbox::FeatureFamilyProto* temp = internal_family_proto_;
  internal_family_proto_ = NULL;
  return temp;
}
void SessionProto::set_allocated_internal_family_proto(::hotbox::FeatureFamilyProto* internal_family_proto) {
  delete internal_family_proto_;
  internal_family_proto_ = internal_family_proto;
  if (internal_family_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.internal_family_proto)
}

// optional .hotbox.Compressor compressor = 4;
void SessionProto::clear_compressor() {
  compressor_ = 0;
}
 ::hotbox::Compressor SessionProto::compressor() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.compressor)
  return static_cast< ::hotbox::Compressor >(compressor_);
}
 void SessionProto::set_compressor(::hotbox::Compressor value) {
  
  compressor_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.compressor)
}

// optional .hotbox.FileMap file_map = 5;
bool SessionProto::has_file_map() const {
  return !_is_default_instance_ && file_map_ != NULL;
}
void SessionProto::clear_file_map() {
  if (GetArenaNoVirtual() == NULL && file_map_ != NULL) delete file_map_;
  file_map_ = NULL;
}
const ::hotbox::FileMap& SessionProto::file_map() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.file_map)
  return file_map_ != NULL ? *file_map_ : *default_instance_->file_map_;
}
::hotbox::FileMap* SessionProto::mutable_file_map() {
  
  if (file_map_ == NULL) {
    file_map_ = new ::hotbox::FileMap;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.SessionProto.file_map)
  return file_map_;
}
::hotbox::FileMap* SessionProto::release_file_map() {
  
  ::hotbox::FileMap* temp = file_map_;
  file_map_ = NULL;
  return temp;
}
void SessionProto::set_allocated_file_map(::hotbox::FileMap* file_map) {
  delete file_map_;
  file_map_ = file_map;
  if (file_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.SessionProto.file_map)
}

// optional .hotbox.OutputStoreType output_store_type = 8;
void SessionProto::clear_output_store_type() {
  output_store_type_ = 0;
}
 ::hotbox::OutputStoreType SessionProto::output_store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.output_store_type)
  return static_cast< ::hotbox::OutputStoreType >(output_store_type_);
}
 void SessionProto::set_output_store_type(::hotbox::OutputStoreType value) {
  
  output_store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.output_store_type)
}

// optional int64 output_dim = 9;
void SessionProto::clear_output_dim() {
  output_dim_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SessionProto::output_dim() const {
  // @@protoc_insertion_point(field_get:hotbox.SessionProto.output_dim)
  return output_dim_;
}
 void SessionProto::set_output_dim(::google::protobuf::int64 value) {
  
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:hotbox.SessionProto.output_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)
