// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform/proto/transform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transform/proto/transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hotbox {

namespace {

const ::google::protobuf::Descriptor* TransformParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformParamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformConfig_reflection_ = NULL;
struct TransformConfigOneofInstance {
  const ::hotbox::OneHotTransformConfig* one_hot_transform_;
  const ::hotbox::BucketizeTransformConfig* bucketize_transform_;
  const ::hotbox::NgramTransformConfig* ngram_transform_;
  const ::hotbox::LogitTransformConfig* logit_transform_;
  const ::hotbox::ConstantTransformConfig* constant_transform_;
}* TransformConfig_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TransformConfigList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformConfigList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseTransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseTransformConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BucketizeTransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BucketizeTransformConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneHotTransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneHotTransformConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstantTransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstantTransformConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NgramTransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NgramTransformConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogitTransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogitTransformConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto() {
  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transform/proto/transform.proto");
  GOOGLE_CHECK(file != NULL);
  TransformParamProto_descriptor_ = file->message_type(0);
  static const int TransformParamProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformParamProto, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformParamProto, input_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformParamProto, input_features_desc_),
  };
  TransformParamProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformParamProto_descriptor_,
      TransformParamProto::default_instance_,
      TransformParamProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransformParamProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformParamProto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformParamProto, _is_default_instance_));
  TransformConfig_descriptor_ = file->message_type(1);
  static const int TransformConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, base_config_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TransformConfig_default_oneof_instance_, one_hot_transform_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TransformConfig_default_oneof_instance_, bucketize_transform_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TransformConfig_default_oneof_instance_, ngram_transform_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TransformConfig_default_oneof_instance_, logit_transform_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TransformConfig_default_oneof_instance_, constant_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, config_),
  };
  TransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformConfig_descriptor_,
      TransformConfig::default_instance_,
      TransformConfig_offsets_,
      -1,
      -1,
      -1,
      TransformConfig_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _oneof_case_[0]),
      sizeof(TransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _is_default_instance_));
  TransformConfigList_descriptor_ = file->message_type(2);
  static const int TransformConfigList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfigList, transform_configs_),
  };
  TransformConfigList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransformConfigList_descriptor_,
      TransformConfigList::default_instance_,
      TransformConfigList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransformConfigList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfigList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfigList, _is_default_instance_));
  BaseTransformConfig_descriptor_ = file->message_type(3);
  static const int BaseTransformConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTransformConfig, input_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTransformConfig, output_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTransformConfig, output_store_type_),
  };
  BaseTransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseTransformConfig_descriptor_,
      BaseTransformConfig::default_instance_,
      BaseTransformConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaseTransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTransformConfig, _is_default_instance_));
  BucketizeTransformConfig_descriptor_ = file->message_type(4);
  static const int BucketizeTransformConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizeTransformConfig, buckets_),
  };
  BucketizeTransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BucketizeTransformConfig_descriptor_,
      BucketizeTransformConfig::default_instance_,
      BucketizeTransformConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(BucketizeTransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizeTransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizeTransformConfig, _is_default_instance_));
  OneHotTransformConfig_descriptor_ = file->message_type(5);
  static const int OneHotTransformConfig_offsets_[1] = {
  };
  OneHotTransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OneHotTransformConfig_descriptor_,
      OneHotTransformConfig::default_instance_,
      OneHotTransformConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(OneHotTransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneHotTransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneHotTransformConfig, _is_default_instance_));
  ConstantTransformConfig_descriptor_ = file->message_type(6);
  static const int ConstantTransformConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTransformConfig, constant_),
  };
  ConstantTransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConstantTransformConfig_descriptor_,
      ConstantTransformConfig::default_instance_,
      ConstantTransformConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConstantTransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTransformConfig, _is_default_instance_));
  NgramTransformConfig_descriptor_ = file->message_type(7);
  static const int NgramTransformConfig_offsets_[1] = {
  };
  NgramTransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NgramTransformConfig_descriptor_,
      NgramTransformConfig::default_instance_,
      NgramTransformConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(NgramTransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramTransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NgramTransformConfig, _is_default_instance_));
  LogitTransformConfig_descriptor_ = file->message_type(8);
  static const int LogitTransformConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogitTransformConfig, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogitTransformConfig, lower_bound_),
  };
  LogitTransformConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogitTransformConfig_descriptor_,
      LogitTransformConfig::default_instance_,
      LogitTransformConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogitTransformConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogitTransformConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogitTransformConfig, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformParamProto_descriptor_, &TransformParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformConfig_descriptor_, &TransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransformConfigList_descriptor_, &TransformConfigList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseTransformConfig_descriptor_, &BaseTransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BucketizeTransformConfig_descriptor_, &BucketizeTransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OneHotTransformConfig_descriptor_, &OneHotTransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConstantTransformConfig_descriptor_, &ConstantTransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NgramTransformConfig_descriptor_, &NgramTransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogitTransformConfig_descriptor_, &LogitTransformConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto() {
  delete TransformParamProto::default_instance_;
  delete TransformParamProto_reflection_;
  delete TransformConfig::default_instance_;
  delete TransformConfig_default_oneof_instance_;
  delete TransformConfig_reflection_;
  delete TransformConfigList::default_instance_;
  delete TransformConfigList_reflection_;
  delete BaseTransformConfig::default_instance_;
  delete BaseTransformConfig_reflection_;
  delete BucketizeTransformConfig::default_instance_;
  delete BucketizeTransformConfig_reflection_;
  delete OneHotTransformConfig::default_instance_;
  delete OneHotTransformConfig_reflection_;
  delete ConstantTransformConfig::default_instance_;
  delete ConstantTransformConfig_reflection_;
  delete NgramTransformConfig::default_instance_;
  delete NgramTransformConfig_reflection_;
  delete LogitTransformConfig::default_instance_;
  delete LogitTransformConfig_reflection_;
}

void protobuf_AddDesc_transform_2fproto_2ftransform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::hotbox::protobuf_AddDesc_schema_2fproto_2fschema_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037transform/proto/transform.proto\022\006hotbo"
    "x\032\031schema/proto/schema.proto\"\204\001\n\023Transfo"
    "rmParamProto\022\'\n\006config\030\001 \001(\0132\027.hotbox.Tr"
    "ansformConfig\022\'\n\016input_features\030\002 \003(\0132\017."
    "hotbox.Feature\022\033\n\023input_features_desc\030\003 "
    "\003(\t\"\373\002\n\017TransformConfig\0220\n\013base_config\030\001"
    " \001(\0132\033.hotbox.BaseTransformConfig\022:\n\021one"
    "_hot_transform\030\002 \001(\0132\035.hotbox.OneHotTran"
    "sformConfigH\000\022\?\n\023bucketize_transform\030\003 \001"
    "(\0132 .hotbox.BucketizeTransformConfigH\000\0227"
    "\n\017ngram_transform\030\004 \001(\0132\034.hotbox.NgramTr"
    "ansformConfigH\000\0227\n\017logit_transform\030\005 \001(\013"
    "2\034.hotbox.LogitTransformConfigH\000\022=\n\022cons"
    "tant_transform\030\006 \001(\0132\037.hotbox.ConstantTr"
    "ansformConfigH\000B\010\n\006config\"I\n\023TransformCo"
    "nfigList\0222\n\021transform_configs\030\001 \003(\0132\027.ho"
    "tbox.TransformConfig\"y\n\023BaseTransformCon"
    "fig\022\026\n\016input_features\030\001 \003(\t\022\025\n\routput_fa"
    "mily\030\002 \001(\t\0223\n\021output_store_type\030\005 \001(\0162\030."
    "hotbox.FeatureStoreType\"+\n\030BucketizeTran"
    "sformConfig\022\017\n\007buckets\030\001 \003(\002\"\027\n\025OneHotTr"
    "ansformConfig\"+\n\027ConstantTransformConfig"
    "\022\020\n\010constant\030\001 \001(\002\"\026\n\024NgramTransformConf"
    "ig\"@\n\024LogitTransformConfig\022\023\n\013upper_boun"
    "d\030\003 \001(\001\022\023\n\013lower_bound\030\004 \001(\001b\006proto3", 996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transform/proto/transform.proto", &protobuf_RegisterTypes);
  TransformParamProto::default_instance_ = new TransformParamProto();
  TransformConfig::default_instance_ = new TransformConfig();
  TransformConfig_default_oneof_instance_ = new TransformConfigOneofInstance();
  TransformConfigList::default_instance_ = new TransformConfigList();
  BaseTransformConfig::default_instance_ = new BaseTransformConfig();
  BucketizeTransformConfig::default_instance_ = new BucketizeTransformConfig();
  OneHotTransformConfig::default_instance_ = new OneHotTransformConfig();
  ConstantTransformConfig::default_instance_ = new ConstantTransformConfig();
  NgramTransformConfig::default_instance_ = new NgramTransformConfig();
  LogitTransformConfig::default_instance_ = new LogitTransformConfig();
  TransformParamProto::default_instance_->InitAsDefaultInstance();
  TransformConfig::default_instance_->InitAsDefaultInstance();
  TransformConfigList::default_instance_->InitAsDefaultInstance();
  BaseTransformConfig::default_instance_->InitAsDefaultInstance();
  BucketizeTransformConfig::default_instance_->InitAsDefaultInstance();
  OneHotTransformConfig::default_instance_->InitAsDefaultInstance();
  ConstantTransformConfig::default_instance_->InitAsDefaultInstance();
  NgramTransformConfig::default_instance_->InitAsDefaultInstance();
  LogitTransformConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transform_2fproto_2ftransform_2eproto {
  StaticDescriptorInitializer_transform_2fproto_2ftransform_2eproto() {
    protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  }
} static_descriptor_initializer_transform_2fproto_2ftransform_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int TransformParamProto::kConfigFieldNumber;
const int TransformParamProto::kInputFeaturesFieldNumber;
const int TransformParamProto::kInputFeaturesDescFieldNumber;
#endif  // !_MSC_VER

TransformParamProto::TransformParamProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.TransformParamProto)
}

void TransformParamProto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_ = const_cast< ::hotbox::TransformConfig*>(&::hotbox::TransformConfig::default_instance());
}

TransformParamProto::TransformParamProto(const TransformParamProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.TransformParamProto)
}

void TransformParamProto::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_ = NULL;
}

TransformParamProto::~TransformParamProto() {
  // @@protoc_insertion_point(destructor:hotbox.TransformParamProto)
  SharedDtor();
}

void TransformParamProto::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void TransformParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformParamProto_descriptor_;
}

const TransformParamProto& TransformParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

TransformParamProto* TransformParamProto::default_instance_ = NULL;

TransformParamProto* TransformParamProto::New(::google::protobuf::Arena* arena) const {
  TransformParamProto* n = new TransformParamProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformParamProto::Clear() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
  input_features_.Clear();
  input_features_desc_.Clear();
}

bool TransformParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.TransformParamProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.TransformConfig config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input_features;
        break;
      }

      // repeated .hotbox.Feature input_features = 2;
      case 2: {
        if (tag == 18) {
         parse_input_features:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_input_features;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_input_features_desc;
        break;
      }

      // repeated string input_features_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_input_features_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_features_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_features_desc(this->input_features_desc_size() - 1).data(),
            this->input_features_desc(this->input_features_desc_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.TransformParamProto.input_features_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_features_desc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.TransformParamProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.TransformParamProto)
  return false;
#undef DO_
}

void TransformParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.TransformParamProto)
  // optional .hotbox.TransformConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // repeated .hotbox.Feature input_features = 2;
  for (unsigned int i = 0, n = this->input_features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->input_features(i), output);
  }

  // repeated string input_features_desc = 3;
  for (int i = 0; i < this->input_features_desc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_features_desc(i).data(), this->input_features_desc(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.TransformParamProto.input_features_desc");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input_features_desc(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.TransformParamProto)
}

::google::protobuf::uint8* TransformParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.TransformParamProto)
  // optional .hotbox.TransformConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->config_, target);
  }

  // repeated .hotbox.Feature input_features = 2;
  for (unsigned int i = 0, n = this->input_features_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->input_features(i), target);
  }

  // repeated string input_features_desc = 3;
  for (int i = 0; i < this->input_features_desc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_features_desc(i).data(), this->input_features_desc(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.TransformParamProto.input_features_desc");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input_features_desc(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.TransformParamProto)
  return target;
}

int TransformParamProto::ByteSize() const {
  int total_size = 0;

  // optional .hotbox.TransformConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // repeated .hotbox.Feature input_features = 2;
  total_size += 1 * this->input_features_size();
  for (int i = 0; i < this->input_features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_features(i));
  }

  // repeated string input_features_desc = 3;
  total_size += 1 * this->input_features_desc_size();
  for (int i = 0; i < this->input_features_desc_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_features_desc(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransformParamProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformParamProto>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformParamProto::MergeFrom(const TransformParamProto& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  input_features_.MergeFrom(from.input_features_);
  input_features_desc_.MergeFrom(from.input_features_desc_);
  if (from.has_config()) {
    mutable_config()->::hotbox::TransformConfig::MergeFrom(from.config());
  }
}

void TransformParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformParamProto::CopyFrom(const TransformParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformParamProto::IsInitialized() const {

  return true;
}

void TransformParamProto::Swap(TransformParamProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformParamProto::InternalSwap(TransformParamProto* other) {
  std::swap(config_, other->config_);
  input_features_.UnsafeArenaSwap(&other->input_features_);
  input_features_desc_.UnsafeArenaSwap(&other->input_features_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformParamProto_descriptor_;
  metadata.reflection = TransformParamProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformParamProto

// optional .hotbox.TransformConfig config = 1;
bool TransformParamProto::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void TransformParamProto::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::hotbox::TransformConfig& TransformParamProto::config() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformParamProto.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::hotbox::TransformConfig* TransformParamProto::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::hotbox::TransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformParamProto.config)
  return config_;
}
::hotbox::TransformConfig* TransformParamProto::release_config() {
  
  ::hotbox::TransformConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void TransformParamProto::set_allocated_config(::hotbox::TransformConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformParamProto.config)
}

// repeated .hotbox.Feature input_features = 2;
int TransformParamProto::input_features_size() const {
  return input_features_.size();
}
void TransformParamProto::clear_input_features() {
  input_features_.Clear();
}
const ::hotbox::Feature& TransformParamProto::input_features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.TransformParamProto.input_features)
  return input_features_.Get(index);
}
::hotbox::Feature* TransformParamProto::mutable_input_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.TransformParamProto.input_features)
  return input_features_.Mutable(index);
}
::hotbox::Feature* TransformParamProto::add_input_features() {
  // @@protoc_insertion_point(field_add:hotbox.TransformParamProto.input_features)
  return input_features_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
TransformParamProto::mutable_input_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.TransformParamProto.input_features)
  return &input_features_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
TransformParamProto::input_features() const {
  // @@protoc_insertion_point(field_list:hotbox.TransformParamProto.input_features)
  return input_features_;
}

// repeated string input_features_desc = 3;
int TransformParamProto::input_features_desc_size() const {
  return input_features_desc_.size();
}
void TransformParamProto::clear_input_features_desc() {
  input_features_desc_.Clear();
}
 const ::std::string& TransformParamProto::input_features_desc(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.TransformParamProto.input_features_desc)
  return input_features_desc_.Get(index);
}
 ::std::string* TransformParamProto::mutable_input_features_desc(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.TransformParamProto.input_features_desc)
  return input_features_desc_.Mutable(index);
}
 void TransformParamProto::set_input_features_desc(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.TransformParamProto.input_features_desc)
  input_features_desc_.Mutable(index)->assign(value);
}
 void TransformParamProto::set_input_features_desc(int index, const char* value) {
  input_features_desc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.TransformParamProto.input_features_desc)
}
 void TransformParamProto::set_input_features_desc(int index, const char* value, size_t size) {
  input_features_desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.TransformParamProto.input_features_desc)
}
 ::std::string* TransformParamProto::add_input_features_desc() {
  return input_features_desc_.Add();
}
 void TransformParamProto::add_input_features_desc(const ::std::string& value) {
  input_features_desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.TransformParamProto.input_features_desc)
}
 void TransformParamProto::add_input_features_desc(const char* value) {
  input_features_desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.TransformParamProto.input_features_desc)
}
 void TransformParamProto::add_input_features_desc(const char* value, size_t size) {
  input_features_desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.TransformParamProto.input_features_desc)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformParamProto::input_features_desc() const {
  // @@protoc_insertion_point(field_list:hotbox.TransformParamProto.input_features_desc)
  return input_features_desc_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformParamProto::mutable_input_features_desc() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.TransformParamProto.input_features_desc)
  return &input_features_desc_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TransformConfig::kBaseConfigFieldNumber;
const int TransformConfig::kOneHotTransformFieldNumber;
const int TransformConfig::kBucketizeTransformFieldNumber;
const int TransformConfig::kNgramTransformFieldNumber;
const int TransformConfig::kLogitTransformFieldNumber;
const int TransformConfig::kConstantTransformFieldNumber;
#endif  // !_MSC_VER

TransformConfig::TransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.TransformConfig)
}

void TransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_config_ = const_cast< ::hotbox::BaseTransformConfig*>(&::hotbox::BaseTransformConfig::default_instance());
  TransformConfig_default_oneof_instance_->one_hot_transform_ = const_cast< ::hotbox::OneHotTransformConfig*>(&::hotbox::OneHotTransformConfig::default_instance());
  TransformConfig_default_oneof_instance_->bucketize_transform_ = const_cast< ::hotbox::BucketizeTransformConfig*>(&::hotbox::BucketizeTransformConfig::default_instance());
  TransformConfig_default_oneof_instance_->ngram_transform_ = const_cast< ::hotbox::NgramTransformConfig*>(&::hotbox::NgramTransformConfig::default_instance());
  TransformConfig_default_oneof_instance_->logit_transform_ = const_cast< ::hotbox::LogitTransformConfig*>(&::hotbox::LogitTransformConfig::default_instance());
  TransformConfig_default_oneof_instance_->constant_transform_ = const_cast< ::hotbox::ConstantTransformConfig*>(&::hotbox::ConstantTransformConfig::default_instance());
}

TransformConfig::TransformConfig(const TransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.TransformConfig)
}

void TransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_config_ = NULL;
  clear_has_config();
}

TransformConfig::~TransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.TransformConfig)
  SharedDtor();
}

void TransformConfig::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
  if (this != default_instance_) {
    delete base_config_;
  }
}

void TransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformConfig_descriptor_;
}

const TransformConfig& TransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

TransformConfig* TransformConfig::default_instance_ = NULL;

TransformConfig* TransformConfig::New(::google::protobuf::Arena* arena) const {
  TransformConfig* n = new TransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformConfig::clear_config() {
  switch(config_case()) {
    case kOneHotTransform: {
      delete config_.one_hot_transform_;
      break;
    }
    case kBucketizeTransform: {
      delete config_.bucketize_transform_;
      break;
    }
    case kNgramTransform: {
      delete config_.ngram_transform_;
      break;
    }
    case kLogitTransform: {
      delete config_.logit_transform_;
      break;
    }
    case kConstantTransform: {
      delete config_.constant_transform_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void TransformConfig::Clear() {
  if (GetArenaNoVirtual() == NULL && base_config_ != NULL) delete base_config_;
  base_config_ = NULL;
  clear_config();
}

bool TransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.TransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hotbox.BaseTransformConfig base_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_one_hot_transform;
        break;
      }

      // optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
      case 2: {
        if (tag == 18) {
         parse_one_hot_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_one_hot_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bucketize_transform;
        break;
      }

      // optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
      case 3: {
        if (tag == 26) {
         parse_bucketize_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bucketize_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ngram_transform;
        break;
      }

      // optional .hotbox.NgramTransformConfig ngram_transform = 4;
      case 4: {
        if (tag == 34) {
         parse_ngram_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ngram_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_logit_transform;
        break;
      }

      // optional .hotbox.LogitTransformConfig logit_transform = 5;
      case 5: {
        if (tag == 42) {
         parse_logit_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logit_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_constant_transform;
        break;
      }

      // optional .hotbox.ConstantTransformConfig constant_transform = 6;
      case 6: {
        if (tag == 50) {
         parse_constant_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.TransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.TransformConfig)
  return false;
#undef DO_
}

void TransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.TransformConfig)
  // optional .hotbox.BaseTransformConfig base_config = 1;
  if (this->has_base_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_config_, output);
  }

  // optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
  if (has_one_hot_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *config_.one_hot_transform_, output);
  }

  // optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
  if (has_bucketize_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *config_.bucketize_transform_, output);
  }

  // optional .hotbox.NgramTransformConfig ngram_transform = 4;
  if (has_ngram_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *config_.ngram_transform_, output);
  }

  // optional .hotbox.LogitTransformConfig logit_transform = 5;
  if (has_logit_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *config_.logit_transform_, output);
  }

  // optional .hotbox.ConstantTransformConfig constant_transform = 6;
  if (has_constant_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *config_.constant_transform_, output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.TransformConfig)
}

::google::protobuf::uint8* TransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.TransformConfig)
  // optional .hotbox.BaseTransformConfig base_config = 1;
  if (this->has_base_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_config_, target);
  }

  // optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
  if (has_one_hot_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *config_.one_hot_transform_, target);
  }

  // optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
  if (has_bucketize_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *config_.bucketize_transform_, target);
  }

  // optional .hotbox.NgramTransformConfig ngram_transform = 4;
  if (has_ngram_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *config_.ngram_transform_, target);
  }

  // optional .hotbox.LogitTransformConfig logit_transform = 5;
  if (has_logit_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *config_.logit_transform_, target);
  }

  // optional .hotbox.ConstantTransformConfig constant_transform = 6;
  if (has_constant_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *config_.constant_transform_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.TransformConfig)
  return target;
}

int TransformConfig::ByteSize() const {
  int total_size = 0;

  // optional .hotbox.BaseTransformConfig base_config = 1;
  if (this->has_base_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_config_);
  }

  switch (config_case()) {
    // optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
    case kOneHotTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.one_hot_transform_);
      break;
    }
    // optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
    case kBucketizeTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.bucketize_transform_);
      break;
    }
    // optional .hotbox.NgramTransformConfig ngram_transform = 4;
    case kNgramTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.ngram_transform_);
      break;
    }
    // optional .hotbox.LogitTransformConfig logit_transform = 5;
    case kLogitTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.logit_transform_);
      break;
    }
    // optional .hotbox.ConstantTransformConfig constant_transform = 6;
    case kConstantTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.constant_transform_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformConfig::MergeFrom(const TransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.config_case()) {
    case kOneHotTransform: {
      mutable_one_hot_transform()->::hotbox::OneHotTransformConfig::MergeFrom(from.one_hot_transform());
      break;
    }
    case kBucketizeTransform: {
      mutable_bucketize_transform()->::hotbox::BucketizeTransformConfig::MergeFrom(from.bucketize_transform());
      break;
    }
    case kNgramTransform: {
      mutable_ngram_transform()->::hotbox::NgramTransformConfig::MergeFrom(from.ngram_transform());
      break;
    }
    case kLogitTransform: {
      mutable_logit_transform()->::hotbox::LogitTransformConfig::MergeFrom(from.logit_transform());
      break;
    }
    case kConstantTransform: {
      mutable_constant_transform()->::hotbox::ConstantTransformConfig::MergeFrom(from.constant_transform());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  if (from.has_base_config()) {
    mutable_base_config()->::hotbox::BaseTransformConfig::MergeFrom(from.base_config());
  }
}

void TransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformConfig::CopyFrom(const TransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformConfig::IsInitialized() const {

  return true;
}

void TransformConfig::Swap(TransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformConfig::InternalSwap(TransformConfig* other) {
  std::swap(base_config_, other->base_config_);
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformConfig_descriptor_;
  metadata.reflection = TransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformConfig

// optional .hotbox.BaseTransformConfig base_config = 1;
bool TransformConfig::has_base_config() const {
  return !_is_default_instance_ && base_config_ != NULL;
}
void TransformConfig::clear_base_config() {
  if (GetArenaNoVirtual() == NULL && base_config_ != NULL) delete base_config_;
  base_config_ = NULL;
}
const ::hotbox::BaseTransformConfig& TransformConfig::base_config() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.base_config)
  return base_config_ != NULL ? *base_config_ : *default_instance_->base_config_;
}
::hotbox::BaseTransformConfig* TransformConfig::mutable_base_config() {
  
  if (base_config_ == NULL) {
    base_config_ = new ::hotbox::BaseTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.base_config)
  return base_config_;
}
::hotbox::BaseTransformConfig* TransformConfig::release_base_config() {
  
  ::hotbox::BaseTransformConfig* temp = base_config_;
  base_config_ = NULL;
  return temp;
}
void TransformConfig::set_allocated_base_config(::hotbox::BaseTransformConfig* base_config) {
  delete base_config_;
  base_config_ = base_config;
  if (base_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.base_config)
}

// optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
bool TransformConfig::has_one_hot_transform() const {
  return config_case() == kOneHotTransform;
}
void TransformConfig::set_has_one_hot_transform() {
  _oneof_case_[0] = kOneHotTransform;
}
void TransformConfig::clear_one_hot_transform() {
  if (has_one_hot_transform()) {
    delete config_.one_hot_transform_;
    clear_has_config();
  }
}
 const ::hotbox::OneHotTransformConfig& TransformConfig::one_hot_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.one_hot_transform)
  return has_one_hot_transform()
      ? *config_.one_hot_transform_
      : ::hotbox::OneHotTransformConfig::default_instance();
}
::hotbox::OneHotTransformConfig* TransformConfig::mutable_one_hot_transform() {
  if (!has_one_hot_transform()) {
    clear_config();
    set_has_one_hot_transform();
    config_.one_hot_transform_ = new ::hotbox::OneHotTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.one_hot_transform)
  return config_.one_hot_transform_;
}
::hotbox::OneHotTransformConfig* TransformConfig::release_one_hot_transform() {
  if (has_one_hot_transform()) {
    clear_has_config();
    ::hotbox::OneHotTransformConfig* temp = config_.one_hot_transform_;
    config_.one_hot_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransformConfig::set_allocated_one_hot_transform(::hotbox::OneHotTransformConfig* one_hot_transform) {
  clear_config();
  if (one_hot_transform) {
    set_has_one_hot_transform();
    config_.one_hot_transform_ = one_hot_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.one_hot_transform)
}

// optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
bool TransformConfig::has_bucketize_transform() const {
  return config_case() == kBucketizeTransform;
}
void TransformConfig::set_has_bucketize_transform() {
  _oneof_case_[0] = kBucketizeTransform;
}
void TransformConfig::clear_bucketize_transform() {
  if (has_bucketize_transform()) {
    delete config_.bucketize_transform_;
    clear_has_config();
  }
}
 const ::hotbox::BucketizeTransformConfig& TransformConfig::bucketize_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.bucketize_transform)
  return has_bucketize_transform()
      ? *config_.bucketize_transform_
      : ::hotbox::BucketizeTransformConfig::default_instance();
}
::hotbox::BucketizeTransformConfig* TransformConfig::mutable_bucketize_transform() {
  if (!has_bucketize_transform()) {
    clear_config();
    set_has_bucketize_transform();
    config_.bucketize_transform_ = new ::hotbox::BucketizeTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.bucketize_transform)
  return config_.bucketize_transform_;
}
::hotbox::BucketizeTransformConfig* TransformConfig::release_bucketize_transform() {
  if (has_bucketize_transform()) {
    clear_has_config();
    ::hotbox::BucketizeTransformConfig* temp = config_.bucketize_transform_;
    config_.bucketize_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransformConfig::set_allocated_bucketize_transform(::hotbox::BucketizeTransformConfig* bucketize_transform) {
  clear_config();
  if (bucketize_transform) {
    set_has_bucketize_transform();
    config_.bucketize_transform_ = bucketize_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.bucketize_transform)
}

// optional .hotbox.NgramTransformConfig ngram_transform = 4;
bool TransformConfig::has_ngram_transform() const {
  return config_case() == kNgramTransform;
}
void TransformConfig::set_has_ngram_transform() {
  _oneof_case_[0] = kNgramTransform;
}
void TransformConfig::clear_ngram_transform() {
  if (has_ngram_transform()) {
    delete config_.ngram_transform_;
    clear_has_config();
  }
}
 const ::hotbox::NgramTransformConfig& TransformConfig::ngram_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.ngram_transform)
  return has_ngram_transform()
      ? *config_.ngram_transform_
      : ::hotbox::NgramTransformConfig::default_instance();
}
::hotbox::NgramTransformConfig* TransformConfig::mutable_ngram_transform() {
  if (!has_ngram_transform()) {
    clear_config();
    set_has_ngram_transform();
    config_.ngram_transform_ = new ::hotbox::NgramTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.ngram_transform)
  return config_.ngram_transform_;
}
::hotbox::NgramTransformConfig* TransformConfig::release_ngram_transform() {
  if (has_ngram_transform()) {
    clear_has_config();
    ::hotbox::NgramTransformConfig* temp = config_.ngram_transform_;
    config_.ngram_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransformConfig::set_allocated_ngram_transform(::hotbox::NgramTransformConfig* ngram_transform) {
  clear_config();
  if (ngram_transform) {
    set_has_ngram_transform();
    config_.ngram_transform_ = ngram_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.ngram_transform)
}

// optional .hotbox.LogitTransformConfig logit_transform = 5;
bool TransformConfig::has_logit_transform() const {
  return config_case() == kLogitTransform;
}
void TransformConfig::set_has_logit_transform() {
  _oneof_case_[0] = kLogitTransform;
}
void TransformConfig::clear_logit_transform() {
  if (has_logit_transform()) {
    delete config_.logit_transform_;
    clear_has_config();
  }
}
 const ::hotbox::LogitTransformConfig& TransformConfig::logit_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.logit_transform)
  return has_logit_transform()
      ? *config_.logit_transform_
      : ::hotbox::LogitTransformConfig::default_instance();
}
::hotbox::LogitTransformConfig* TransformConfig::mutable_logit_transform() {
  if (!has_logit_transform()) {
    clear_config();
    set_has_logit_transform();
    config_.logit_transform_ = new ::hotbox::LogitTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.logit_transform)
  return config_.logit_transform_;
}
::hotbox::LogitTransformConfig* TransformConfig::release_logit_transform() {
  if (has_logit_transform()) {
    clear_has_config();
    ::hotbox::LogitTransformConfig* temp = config_.logit_transform_;
    config_.logit_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransformConfig::set_allocated_logit_transform(::hotbox::LogitTransformConfig* logit_transform) {
  clear_config();
  if (logit_transform) {
    set_has_logit_transform();
    config_.logit_transform_ = logit_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.logit_transform)
}

// optional .hotbox.ConstantTransformConfig constant_transform = 6;
bool TransformConfig::has_constant_transform() const {
  return config_case() == kConstantTransform;
}
void TransformConfig::set_has_constant_transform() {
  _oneof_case_[0] = kConstantTransform;
}
void TransformConfig::clear_constant_transform() {
  if (has_constant_transform()) {
    delete config_.constant_transform_;
    clear_has_config();
  }
}
 const ::hotbox::ConstantTransformConfig& TransformConfig::constant_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.constant_transform)
  return has_constant_transform()
      ? *config_.constant_transform_
      : ::hotbox::ConstantTransformConfig::default_instance();
}
::hotbox::ConstantTransformConfig* TransformConfig::mutable_constant_transform() {
  if (!has_constant_transform()) {
    clear_config();
    set_has_constant_transform();
    config_.constant_transform_ = new ::hotbox::ConstantTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.constant_transform)
  return config_.constant_transform_;
}
::hotbox::ConstantTransformConfig* TransformConfig::release_constant_transform() {
  if (has_constant_transform()) {
    clear_has_config();
    ::hotbox::ConstantTransformConfig* temp = config_.constant_transform_;
    config_.constant_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransformConfig::set_allocated_constant_transform(::hotbox::ConstantTransformConfig* constant_transform) {
  clear_config();
  if (constant_transform) {
    set_has_constant_transform();
    config_.constant_transform_ = constant_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.constant_transform)
}

bool TransformConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void TransformConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
TransformConfig::ConfigCase TransformConfig::config_case() const {
  return TransformConfig::ConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TransformConfigList::kTransformConfigsFieldNumber;
#endif  // !_MSC_VER

TransformConfigList::TransformConfigList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.TransformConfigList)
}

void TransformConfigList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransformConfigList::TransformConfigList(const TransformConfigList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.TransformConfigList)
}

void TransformConfigList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TransformConfigList::~TransformConfigList() {
  // @@protoc_insertion_point(destructor:hotbox.TransformConfigList)
  SharedDtor();
}

void TransformConfigList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransformConfigList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformConfigList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformConfigList_descriptor_;
}

const TransformConfigList& TransformConfigList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

TransformConfigList* TransformConfigList::default_instance_ = NULL;

TransformConfigList* TransformConfigList::New(::google::protobuf::Arena* arena) const {
  TransformConfigList* n = new TransformConfigList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformConfigList::Clear() {
  transform_configs_.Clear();
}

bool TransformConfigList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.TransformConfigList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hotbox.TransformConfig transform_configs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_transform_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transform_configs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_transform_configs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.TransformConfigList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.TransformConfigList)
  return false;
#undef DO_
}

void TransformConfigList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.TransformConfigList)
  // repeated .hotbox.TransformConfig transform_configs = 1;
  for (unsigned int i = 0, n = this->transform_configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transform_configs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.TransformConfigList)
}

::google::protobuf::uint8* TransformConfigList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.TransformConfigList)
  // repeated .hotbox.TransformConfig transform_configs = 1;
  for (unsigned int i = 0, n = this->transform_configs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transform_configs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.TransformConfigList)
  return target;
}

int TransformConfigList::ByteSize() const {
  int total_size = 0;

  // repeated .hotbox.TransformConfig transform_configs = 1;
  total_size += 1 * this->transform_configs_size();
  for (int i = 0; i < this->transform_configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transform_configs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformConfigList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransformConfigList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformConfigList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformConfigList::MergeFrom(const TransformConfigList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  transform_configs_.MergeFrom(from.transform_configs_);
}

void TransformConfigList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformConfigList::CopyFrom(const TransformConfigList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformConfigList::IsInitialized() const {

  return true;
}

void TransformConfigList::Swap(TransformConfigList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformConfigList::InternalSwap(TransformConfigList* other) {
  transform_configs_.UnsafeArenaSwap(&other->transform_configs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformConfigList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformConfigList_descriptor_;
  metadata.reflection = TransformConfigList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformConfigList

// repeated .hotbox.TransformConfig transform_configs = 1;
int TransformConfigList::transform_configs_size() const {
  return transform_configs_.size();
}
void TransformConfigList::clear_transform_configs() {
  transform_configs_.Clear();
}
const ::hotbox::TransformConfig& TransformConfigList::transform_configs(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfigList.transform_configs)
  return transform_configs_.Get(index);
}
::hotbox::TransformConfig* TransformConfigList::mutable_transform_configs(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfigList.transform_configs)
  return transform_configs_.Mutable(index);
}
::hotbox::TransformConfig* TransformConfigList::add_transform_configs() {
  // @@protoc_insertion_point(field_add:hotbox.TransformConfigList.transform_configs)
  return transform_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig >*
TransformConfigList::mutable_transform_configs() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.TransformConfigList.transform_configs)
  return &transform_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig >&
TransformConfigList::transform_configs() const {
  // @@protoc_insertion_point(field_list:hotbox.TransformConfigList.transform_configs)
  return transform_configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BaseTransformConfig::kInputFeaturesFieldNumber;
const int BaseTransformConfig::kOutputFamilyFieldNumber;
const int BaseTransformConfig::kOutputStoreTypeFieldNumber;
#endif  // !_MSC_VER

BaseTransformConfig::BaseTransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.BaseTransformConfig)
}

void BaseTransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BaseTransformConfig::BaseTransformConfig(const BaseTransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.BaseTransformConfig)
}

void BaseTransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  output_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_store_type_ = 0;
}

BaseTransformConfig::~BaseTransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.BaseTransformConfig)
  SharedDtor();
}

void BaseTransformConfig::SharedDtor() {
  output_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BaseTransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseTransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseTransformConfig_descriptor_;
}

const BaseTransformConfig& BaseTransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

BaseTransformConfig* BaseTransformConfig::default_instance_ = NULL;

BaseTransformConfig* BaseTransformConfig::New(::google::protobuf::Arena* arena) const {
  BaseTransformConfig* n = new BaseTransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseTransformConfig::Clear() {
  output_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_store_type_ = 0;
  input_features_.Clear();
}

bool BaseTransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.BaseTransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input_features = 1;
      case 1: {
        if (tag == 10) {
         parse_input_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_features()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_features(this->input_features_size() - 1).data(),
            this->input_features(this->input_features_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.BaseTransformConfig.input_features"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_input_features;
        if (input->ExpectTag(18)) goto parse_output_family;
        break;
      }

      // optional string output_family = 2;
      case 2: {
        if (tag == 18) {
         parse_output_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_family()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_family().data(), this->output_family().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hotbox.BaseTransformConfig.output_family"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_output_store_type;
        break;
      }

      // optional .hotbox.FeatureStoreType output_store_type = 5;
      case 5: {
        if (tag == 40) {
         parse_output_store_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_store_type(static_cast< ::hotbox::FeatureStoreType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.BaseTransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.BaseTransformConfig)
  return false;
#undef DO_
}

void BaseTransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.BaseTransformConfig)
  // repeated string input_features = 1;
  for (int i = 0; i < this->input_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_features(i).data(), this->input_features(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.BaseTransformConfig.input_features");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input_features(i), output);
  }

  // optional string output_family = 2;
  if (this->output_family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_family().data(), this->output_family().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.BaseTransformConfig.output_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output_family(), output);
  }

  // optional .hotbox.FeatureStoreType output_store_type = 5;
  if (this->output_store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->output_store_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.BaseTransformConfig)
}

::google::protobuf::uint8* BaseTransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.BaseTransformConfig)
  // repeated string input_features = 1;
  for (int i = 0; i < this->input_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_features(i).data(), this->input_features(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.BaseTransformConfig.input_features");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input_features(i), target);
  }

  // optional string output_family = 2;
  if (this->output_family().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_family().data(), this->output_family().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hotbox.BaseTransformConfig.output_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output_family(), target);
  }

  // optional .hotbox.FeatureStoreType output_store_type = 5;
  if (this->output_store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->output_store_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.BaseTransformConfig)
  return target;
}

int BaseTransformConfig::ByteSize() const {
  int total_size = 0;

  // optional string output_family = 2;
  if (this->output_family().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_family());
  }

  // optional .hotbox.FeatureStoreType output_store_type = 5;
  if (this->output_store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_store_type());
  }

  // repeated string input_features = 1;
  total_size += 1 * this->input_features_size();
  for (int i = 0; i < this->input_features_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_features(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseTransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BaseTransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseTransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseTransformConfig::MergeFrom(const BaseTransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  input_features_.MergeFrom(from.input_features_);
  if (from.output_family().size() > 0) {

    output_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_family_);
  }
  if (from.output_store_type() != 0) {
    set_output_store_type(from.output_store_type());
  }
}

void BaseTransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseTransformConfig::CopyFrom(const BaseTransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseTransformConfig::IsInitialized() const {

  return true;
}

void BaseTransformConfig::Swap(BaseTransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseTransformConfig::InternalSwap(BaseTransformConfig* other) {
  input_features_.UnsafeArenaSwap(&other->input_features_);
  output_family_.Swap(&other->output_family_);
  std::swap(output_store_type_, other->output_store_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseTransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseTransformConfig_descriptor_;
  metadata.reflection = BaseTransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseTransformConfig

// repeated string input_features = 1;
int BaseTransformConfig::input_features_size() const {
  return input_features_.size();
}
void BaseTransformConfig::clear_input_features() {
  input_features_.Clear();
}
 const ::std::string& BaseTransformConfig::input_features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.BaseTransformConfig.input_features)
  return input_features_.Get(index);
}
 ::std::string* BaseTransformConfig::mutable_input_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.BaseTransformConfig.input_features)
  return input_features_.Mutable(index);
}
 void BaseTransformConfig::set_input_features(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.BaseTransformConfig.input_features)
  input_features_.Mutable(index)->assign(value);
}
 void BaseTransformConfig::set_input_features(int index, const char* value) {
  input_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.BaseTransformConfig.input_features)
}
 void BaseTransformConfig::set_input_features(int index, const char* value, size_t size) {
  input_features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.BaseTransformConfig.input_features)
}
 ::std::string* BaseTransformConfig::add_input_features() {
  return input_features_.Add();
}
 void BaseTransformConfig::add_input_features(const ::std::string& value) {
  input_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.BaseTransformConfig.input_features)
}
 void BaseTransformConfig::add_input_features(const char* value) {
  input_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.BaseTransformConfig.input_features)
}
 void BaseTransformConfig::add_input_features(const char* value, size_t size) {
  input_features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.BaseTransformConfig.input_features)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseTransformConfig::input_features() const {
  // @@protoc_insertion_point(field_list:hotbox.BaseTransformConfig.input_features)
  return input_features_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseTransformConfig::mutable_input_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.BaseTransformConfig.input_features)
  return &input_features_;
}

// optional string output_family = 2;
void BaseTransformConfig::clear_output_family() {
  output_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BaseTransformConfig::output_family() const {
  // @@protoc_insertion_point(field_get:hotbox.BaseTransformConfig.output_family)
  return output_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaseTransformConfig::set_output_family(const ::std::string& value) {
  
  output_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.BaseTransformConfig.output_family)
}
 void BaseTransformConfig::set_output_family(const char* value) {
  
  output_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.BaseTransformConfig.output_family)
}
 void BaseTransformConfig::set_output_family(const char* value, size_t size) {
  
  output_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.BaseTransformConfig.output_family)
}
 ::std::string* BaseTransformConfig::mutable_output_family() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.BaseTransformConfig.output_family)
  return output_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BaseTransformConfig::release_output_family() {
  
  return output_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaseTransformConfig::set_allocated_output_family(::std::string* output_family) {
  if (output_family != NULL) {
    
  } else {
    
  }
  output_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_family);
  // @@protoc_insertion_point(field_set_allocated:hotbox.BaseTransformConfig.output_family)
}

// optional .hotbox.FeatureStoreType output_store_type = 5;
void BaseTransformConfig::clear_output_store_type() {
  output_store_type_ = 0;
}
 ::hotbox::FeatureStoreType BaseTransformConfig::output_store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.BaseTransformConfig.output_store_type)
  return static_cast< ::hotbox::FeatureStoreType >(output_store_type_);
}
 void BaseTransformConfig::set_output_store_type(::hotbox::FeatureStoreType value) {
  
  output_store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.BaseTransformConfig.output_store_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BucketizeTransformConfig::kBucketsFieldNumber;
#endif  // !_MSC_VER

BucketizeTransformConfig::BucketizeTransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.BucketizeTransformConfig)
}

void BucketizeTransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BucketizeTransformConfig::BucketizeTransformConfig(const BucketizeTransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.BucketizeTransformConfig)
}

void BucketizeTransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BucketizeTransformConfig::~BucketizeTransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.BucketizeTransformConfig)
  SharedDtor();
}

void BucketizeTransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BucketizeTransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BucketizeTransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BucketizeTransformConfig_descriptor_;
}

const BucketizeTransformConfig& BucketizeTransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

BucketizeTransformConfig* BucketizeTransformConfig::default_instance_ = NULL;

BucketizeTransformConfig* BucketizeTransformConfig::New(::google::protobuf::Arena* arena) const {
  BucketizeTransformConfig* n = new BucketizeTransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BucketizeTransformConfig::Clear() {
  buckets_.Clear();
}

bool BucketizeTransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.BucketizeTransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float buckets = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_buckets())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_buckets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.BucketizeTransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.BucketizeTransformConfig)
  return false;
#undef DO_
}

void BucketizeTransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.BucketizeTransformConfig)
  // repeated float buckets = 1;
  if (this->buckets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_buckets_cached_byte_size_);
  }
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->buckets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.BucketizeTransformConfig)
}

::google::protobuf::uint8* BucketizeTransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.BucketizeTransformConfig)
  // repeated float buckets = 1;
  if (this->buckets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _buckets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->buckets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.BucketizeTransformConfig)
  return target;
}

int BucketizeTransformConfig::ByteSize() const {
  int total_size = 0;

  // repeated float buckets = 1;
  {
    int data_size = 0;
    data_size = 4 * this->buckets_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _buckets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BucketizeTransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BucketizeTransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BucketizeTransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BucketizeTransformConfig::MergeFrom(const BucketizeTransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  buckets_.MergeFrom(from.buckets_);
}

void BucketizeTransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketizeTransformConfig::CopyFrom(const BucketizeTransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketizeTransformConfig::IsInitialized() const {

  return true;
}

void BucketizeTransformConfig::Swap(BucketizeTransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketizeTransformConfig::InternalSwap(BucketizeTransformConfig* other) {
  buckets_.UnsafeArenaSwap(&other->buckets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BucketizeTransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BucketizeTransformConfig_descriptor_;
  metadata.reflection = BucketizeTransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BucketizeTransformConfig

// repeated float buckets = 1;
int BucketizeTransformConfig::buckets_size() const {
  return buckets_.size();
}
void BucketizeTransformConfig::clear_buckets() {
  buckets_.Clear();
}
 float BucketizeTransformConfig::buckets(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.BucketizeTransformConfig.buckets)
  return buckets_.Get(index);
}
 void BucketizeTransformConfig::set_buckets(int index, float value) {
  buckets_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.BucketizeTransformConfig.buckets)
}
 void BucketizeTransformConfig::add_buckets(float value) {
  buckets_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.BucketizeTransformConfig.buckets)
}
 const ::google::protobuf::RepeatedField< float >&
BucketizeTransformConfig::buckets() const {
  // @@protoc_insertion_point(field_list:hotbox.BucketizeTransformConfig.buckets)
  return buckets_;
}
 ::google::protobuf::RepeatedField< float >*
BucketizeTransformConfig::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.BucketizeTransformConfig.buckets)
  return &buckets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OneHotTransformConfig::OneHotTransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.OneHotTransformConfig)
}

void OneHotTransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OneHotTransformConfig::OneHotTransformConfig(const OneHotTransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.OneHotTransformConfig)
}

void OneHotTransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

OneHotTransformConfig::~OneHotTransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.OneHotTransformConfig)
  SharedDtor();
}

void OneHotTransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneHotTransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneHotTransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneHotTransformConfig_descriptor_;
}

const OneHotTransformConfig& OneHotTransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

OneHotTransformConfig* OneHotTransformConfig::default_instance_ = NULL;

OneHotTransformConfig* OneHotTransformConfig::New(::google::protobuf::Arena* arena) const {
  OneHotTransformConfig* n = new OneHotTransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneHotTransformConfig::Clear() {
}

bool OneHotTransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.OneHotTransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.OneHotTransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.OneHotTransformConfig)
  return false;
#undef DO_
}

void OneHotTransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.OneHotTransformConfig)
  // @@protoc_insertion_point(serialize_end:hotbox.OneHotTransformConfig)
}

::google::protobuf::uint8* OneHotTransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.OneHotTransformConfig)
  // @@protoc_insertion_point(serialize_to_array_end:hotbox.OneHotTransformConfig)
  return target;
}

int OneHotTransformConfig::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneHotTransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OneHotTransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OneHotTransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneHotTransformConfig::MergeFrom(const OneHotTransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void OneHotTransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneHotTransformConfig::CopyFrom(const OneHotTransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneHotTransformConfig::IsInitialized() const {

  return true;
}

void OneHotTransformConfig::Swap(OneHotTransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneHotTransformConfig::InternalSwap(OneHotTransformConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneHotTransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneHotTransformConfig_descriptor_;
  metadata.reflection = OneHotTransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneHotTransformConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ConstantTransformConfig::kConstantFieldNumber;
#endif  // !_MSC_VER

ConstantTransformConfig::ConstantTransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.ConstantTransformConfig)
}

void ConstantTransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConstantTransformConfig::ConstantTransformConfig(const ConstantTransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.ConstantTransformConfig)
}

void ConstantTransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  constant_ = 0;
}

ConstantTransformConfig::~ConstantTransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.ConstantTransformConfig)
  SharedDtor();
}

void ConstantTransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConstantTransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstantTransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstantTransformConfig_descriptor_;
}

const ConstantTransformConfig& ConstantTransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

ConstantTransformConfig* ConstantTransformConfig::default_instance_ = NULL;

ConstantTransformConfig* ConstantTransformConfig::New(::google::protobuf::Arena* arena) const {
  ConstantTransformConfig* n = new ConstantTransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstantTransformConfig::Clear() {
  constant_ = 0;
}

bool ConstantTransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.ConstantTransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float constant = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.ConstantTransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.ConstantTransformConfig)
  return false;
#undef DO_
}

void ConstantTransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.ConstantTransformConfig)
  // optional float constant = 1;
  if (this->constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->constant(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.ConstantTransformConfig)
}

::google::protobuf::uint8* ConstantTransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.ConstantTransformConfig)
  // optional float constant = 1;
  if (this->constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->constant(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.ConstantTransformConfig)
  return target;
}

int ConstantTransformConfig::ByteSize() const {
  int total_size = 0;

  // optional float constant = 1;
  if (this->constant() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstantTransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConstantTransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstantTransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstantTransformConfig::MergeFrom(const ConstantTransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.constant() != 0) {
    set_constant(from.constant());
  }
}

void ConstantTransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantTransformConfig::CopyFrom(const ConstantTransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantTransformConfig::IsInitialized() const {

  return true;
}

void ConstantTransformConfig::Swap(ConstantTransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstantTransformConfig::InternalSwap(ConstantTransformConfig* other) {
  std::swap(constant_, other->constant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstantTransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstantTransformConfig_descriptor_;
  metadata.reflection = ConstantTransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstantTransformConfig

// optional float constant = 1;
void ConstantTransformConfig::clear_constant() {
  constant_ = 0;
}
 float ConstantTransformConfig::constant() const {
  // @@protoc_insertion_point(field_get:hotbox.ConstantTransformConfig.constant)
  return constant_;
}
 void ConstantTransformConfig::set_constant(float value) {
  
  constant_ = value;
  // @@protoc_insertion_point(field_set:hotbox.ConstantTransformConfig.constant)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NgramTransformConfig::NgramTransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.NgramTransformConfig)
}

void NgramTransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NgramTransformConfig::NgramTransformConfig(const NgramTransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.NgramTransformConfig)
}

void NgramTransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NgramTransformConfig::~NgramTransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.NgramTransformConfig)
  SharedDtor();
}

void NgramTransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NgramTransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NgramTransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NgramTransformConfig_descriptor_;
}

const NgramTransformConfig& NgramTransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

NgramTransformConfig* NgramTransformConfig::default_instance_ = NULL;

NgramTransformConfig* NgramTransformConfig::New(::google::protobuf::Arena* arena) const {
  NgramTransformConfig* n = new NgramTransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NgramTransformConfig::Clear() {
}

bool NgramTransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.NgramTransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.NgramTransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.NgramTransformConfig)
  return false;
#undef DO_
}

void NgramTransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.NgramTransformConfig)
  // @@protoc_insertion_point(serialize_end:hotbox.NgramTransformConfig)
}

::google::protobuf::uint8* NgramTransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.NgramTransformConfig)
  // @@protoc_insertion_point(serialize_to_array_end:hotbox.NgramTransformConfig)
  return target;
}

int NgramTransformConfig::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NgramTransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NgramTransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NgramTransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NgramTransformConfig::MergeFrom(const NgramTransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void NgramTransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NgramTransformConfig::CopyFrom(const NgramTransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NgramTransformConfig::IsInitialized() const {

  return true;
}

void NgramTransformConfig::Swap(NgramTransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NgramTransformConfig::InternalSwap(NgramTransformConfig* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NgramTransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NgramTransformConfig_descriptor_;
  metadata.reflection = NgramTransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NgramTransformConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LogitTransformConfig::kUpperBoundFieldNumber;
const int LogitTransformConfig::kLowerBoundFieldNumber;
#endif  // !_MSC_VER

LogitTransformConfig::LogitTransformConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hotbox.LogitTransformConfig)
}

void LogitTransformConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogitTransformConfig::LogitTransformConfig(const LogitTransformConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hotbox.LogitTransformConfig)
}

void LogitTransformConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  upper_bound_ = 0;
  lower_bound_ = 0;
}

LogitTransformConfig::~LogitTransformConfig() {
  // @@protoc_insertion_point(destructor:hotbox.LogitTransformConfig)
  SharedDtor();
}

void LogitTransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogitTransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogitTransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogitTransformConfig_descriptor_;
}

const LogitTransformConfig& LogitTransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  return *default_instance_;
}

LogitTransformConfig* LogitTransformConfig::default_instance_ = NULL;

LogitTransformConfig* LogitTransformConfig::New(::google::protobuf::Arena* arena) const {
  LogitTransformConfig* n = new LogitTransformConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogitTransformConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogitTransformConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(upper_bound_, lower_bound_);

#undef ZR_HELPER_
#undef ZR_

}

bool LogitTransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hotbox.LogitTransformConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double upper_bound = 3;
      case 3: {
        if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_bound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lower_bound;
        break;
      }

      // optional double lower_bound = 4;
      case 4: {
        if (tag == 33) {
         parse_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_bound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hotbox.LogitTransformConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hotbox.LogitTransformConfig)
  return false;
#undef DO_
}

void LogitTransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hotbox.LogitTransformConfig)
  // optional double upper_bound = 3;
  if (this->upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->upper_bound(), output);
  }

  // optional double lower_bound = 4;
  if (this->lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lower_bound(), output);
  }

  // @@protoc_insertion_point(serialize_end:hotbox.LogitTransformConfig)
}

::google::protobuf::uint8* LogitTransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hotbox.LogitTransformConfig)
  // optional double upper_bound = 3;
  if (this->upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->upper_bound(), target);
  }

  // optional double lower_bound = 4;
  if (this->lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lower_bound(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hotbox.LogitTransformConfig)
  return target;
}

int LogitTransformConfig::ByteSize() const {
  int total_size = 0;

  // optional double upper_bound = 3;
  if (this->upper_bound() != 0) {
    total_size += 1 + 8;
  }

  // optional double lower_bound = 4;
  if (this->lower_bound() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogitTransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogitTransformConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogitTransformConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogitTransformConfig::MergeFrom(const LogitTransformConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.upper_bound() != 0) {
    set_upper_bound(from.upper_bound());
  }
  if (from.lower_bound() != 0) {
    set_lower_bound(from.lower_bound());
  }
}

void LogitTransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogitTransformConfig::CopyFrom(const LogitTransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogitTransformConfig::IsInitialized() const {

  return true;
}

void LogitTransformConfig::Swap(LogitTransformConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogitTransformConfig::InternalSwap(LogitTransformConfig* other) {
  std::swap(upper_bound_, other->upper_bound_);
  std::swap(lower_bound_, other->lower_bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogitTransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogitTransformConfig_descriptor_;
  metadata.reflection = LogitTransformConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogitTransformConfig

// optional double upper_bound = 3;
void LogitTransformConfig::clear_upper_bound() {
  upper_bound_ = 0;
}
 double LogitTransformConfig::upper_bound() const {
  // @@protoc_insertion_point(field_get:hotbox.LogitTransformConfig.upper_bound)
  return upper_bound_;
}
 void LogitTransformConfig::set_upper_bound(double value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:hotbox.LogitTransformConfig.upper_bound)
}

// optional double lower_bound = 4;
void LogitTransformConfig::clear_lower_bound() {
  lower_bound_ = 0;
}
 double LogitTransformConfig::lower_bound() const {
  // @@protoc_insertion_point(field_get:hotbox.LogitTransformConfig.lower_bound)
  return lower_bound_;
}
 void LogitTransformConfig::set_lower_bound(double value) {
  
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:hotbox.LogitTransformConfig.lower_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)
