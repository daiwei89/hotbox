// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform/proto/transform.proto

#ifndef PROTOBUF_transform_2fproto_2ftransform_2eproto__INCLUDED
#define PROTOBUF_transform_2fproto_2ftransform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "schema/proto/schema.pb.h"
// @@protoc_insertion_point(includes)

namespace hotbox {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

class BaseTransformConfig;
class BucketizeTransformConfig;
class ConstantTransformConfig;
class LogitTransformConfig;
class NgramTransformConfig;
class OneHotTransformConfig;
class TransformConfig;
class TransformConfigList;
class TransformParamProto;

// ===================================================================

class TransformParamProto : public ::google::protobuf::Message {
 public:
  TransformParamProto();
  virtual ~TransformParamProto();

  TransformParamProto(const TransformParamProto& from);

  inline TransformParamProto& operator=(const TransformParamProto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformParamProto& default_instance();

  void Swap(TransformParamProto* other);

  // implements Message ----------------------------------------------

  inline TransformParamProto* New() const { return New(NULL); }

  TransformParamProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformParamProto& from);
  void MergeFrom(const TransformParamProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformParamProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hotbox.TransformConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::hotbox::TransformConfig& config() const;
  ::hotbox::TransformConfig* mutable_config();
  ::hotbox::TransformConfig* release_config();
  void set_allocated_config(::hotbox::TransformConfig* config);

  // repeated .hotbox.Feature input_features = 2;
  int input_features_size() const;
  void clear_input_features();
  static const int kInputFeaturesFieldNumber = 2;
  const ::hotbox::Feature& input_features(int index) const;
  ::hotbox::Feature* mutable_input_features(int index);
  ::hotbox::Feature* add_input_features();
  ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
      mutable_input_features();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
      input_features() const;

  // repeated string input_features_desc = 3;
  int input_features_desc_size() const;
  void clear_input_features_desc();
  static const int kInputFeaturesDescFieldNumber = 3;
  const ::std::string& input_features_desc(int index) const;
  ::std::string* mutable_input_features_desc(int index);
  void set_input_features_desc(int index, const ::std::string& value);
  void set_input_features_desc(int index, const char* value);
  void set_input_features_desc(int index, const char* value, size_t size);
  ::std::string* add_input_features_desc();
  void add_input_features_desc(const ::std::string& value);
  void add_input_features_desc(const char* value);
  void add_input_features_desc(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_features_desc() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_features_desc();

  // @@protoc_insertion_point(class_scope:hotbox.TransformParamProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::hotbox::TransformConfig* config_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::Feature > input_features_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_features_desc_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static TransformParamProto* default_instance_;
};
// -------------------------------------------------------------------

class TransformConfig : public ::google::protobuf::Message {
 public:
  TransformConfig();
  virtual ~TransformConfig();

  TransformConfig(const TransformConfig& from);

  inline TransformConfig& operator=(const TransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformConfig& default_instance();

  enum ConfigCase {
    kOneHotTransform = 2,
    kBucketizeTransform = 3,
    kNgramTransform = 4,
    kLogitTransform = 5,
    kConstantTransform = 6,
    CONFIG_NOT_SET = 0,
  };

  void Swap(TransformConfig* other);

  // implements Message ----------------------------------------------

  inline TransformConfig* New() const { return New(NULL); }

  TransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformConfig& from);
  void MergeFrom(const TransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hotbox.BaseTransformConfig base_config = 1;
  bool has_base_config() const;
  void clear_base_config();
  static const int kBaseConfigFieldNumber = 1;
  const ::hotbox::BaseTransformConfig& base_config() const;
  ::hotbox::BaseTransformConfig* mutable_base_config();
  ::hotbox::BaseTransformConfig* release_base_config();
  void set_allocated_base_config(::hotbox::BaseTransformConfig* base_config);

  // optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
  bool has_one_hot_transform() const;
  void clear_one_hot_transform();
  static const int kOneHotTransformFieldNumber = 2;
  const ::hotbox::OneHotTransformConfig& one_hot_transform() const;
  ::hotbox::OneHotTransformConfig* mutable_one_hot_transform();
  ::hotbox::OneHotTransformConfig* release_one_hot_transform();
  void set_allocated_one_hot_transform(::hotbox::OneHotTransformConfig* one_hot_transform);

  // optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
  bool has_bucketize_transform() const;
  void clear_bucketize_transform();
  static const int kBucketizeTransformFieldNumber = 3;
  const ::hotbox::BucketizeTransformConfig& bucketize_transform() const;
  ::hotbox::BucketizeTransformConfig* mutable_bucketize_transform();
  ::hotbox::BucketizeTransformConfig* release_bucketize_transform();
  void set_allocated_bucketize_transform(::hotbox::BucketizeTransformConfig* bucketize_transform);

  // optional .hotbox.NgramTransformConfig ngram_transform = 4;
  bool has_ngram_transform() const;
  void clear_ngram_transform();
  static const int kNgramTransformFieldNumber = 4;
  const ::hotbox::NgramTransformConfig& ngram_transform() const;
  ::hotbox::NgramTransformConfig* mutable_ngram_transform();
  ::hotbox::NgramTransformConfig* release_ngram_transform();
  void set_allocated_ngram_transform(::hotbox::NgramTransformConfig* ngram_transform);

  // optional .hotbox.LogitTransformConfig logit_transform = 5;
  bool has_logit_transform() const;
  void clear_logit_transform();
  static const int kLogitTransformFieldNumber = 5;
  const ::hotbox::LogitTransformConfig& logit_transform() const;
  ::hotbox::LogitTransformConfig* mutable_logit_transform();
  ::hotbox::LogitTransformConfig* release_logit_transform();
  void set_allocated_logit_transform(::hotbox::LogitTransformConfig* logit_transform);

  // optional .hotbox.ConstantTransformConfig constant_transform = 6;
  bool has_constant_transform() const;
  void clear_constant_transform();
  static const int kConstantTransformFieldNumber = 6;
  const ::hotbox::ConstantTransformConfig& constant_transform() const;
  ::hotbox::ConstantTransformConfig* mutable_constant_transform();
  ::hotbox::ConstantTransformConfig* release_constant_transform();
  void set_allocated_constant_transform(::hotbox::ConstantTransformConfig* constant_transform);

  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:hotbox.TransformConfig)
 private:
  inline void set_has_one_hot_transform();
  inline void set_has_bucketize_transform();
  inline void set_has_ngram_transform();
  inline void set_has_logit_transform();
  inline void set_has_constant_transform();

  inline bool has_config() const;
  void clear_config();
  inline void clear_has_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::hotbox::BaseTransformConfig* base_config_;
  union ConfigUnion {
    ConfigUnion() {}
    ::hotbox::OneHotTransformConfig* one_hot_transform_;
    ::hotbox::BucketizeTransformConfig* bucketize_transform_;
    ::hotbox::NgramTransformConfig* ngram_transform_;
    ::hotbox::LogitTransformConfig* logit_transform_;
    ::hotbox::ConstantTransformConfig* constant_transform_;
  } config_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static TransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class TransformConfigList : public ::google::protobuf::Message {
 public:
  TransformConfigList();
  virtual ~TransformConfigList();

  TransformConfigList(const TransformConfigList& from);

  inline TransformConfigList& operator=(const TransformConfigList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformConfigList& default_instance();

  void Swap(TransformConfigList* other);

  // implements Message ----------------------------------------------

  inline TransformConfigList* New() const { return New(NULL); }

  TransformConfigList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformConfigList& from);
  void MergeFrom(const TransformConfigList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformConfigList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hotbox.TransformConfig transform_configs = 1;
  int transform_configs_size() const;
  void clear_transform_configs();
  static const int kTransformConfigsFieldNumber = 1;
  const ::hotbox::TransformConfig& transform_configs(int index) const;
  ::hotbox::TransformConfig* mutable_transform_configs(int index);
  ::hotbox::TransformConfig* add_transform_configs();
  ::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig >*
      mutable_transform_configs();
  const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig >&
      transform_configs() const;

  // @@protoc_insertion_point(class_scope:hotbox.TransformConfigList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig > transform_configs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static TransformConfigList* default_instance_;
};
// -------------------------------------------------------------------

class BaseTransformConfig : public ::google::protobuf::Message {
 public:
  BaseTransformConfig();
  virtual ~BaseTransformConfig();

  BaseTransformConfig(const BaseTransformConfig& from);

  inline BaseTransformConfig& operator=(const BaseTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseTransformConfig& default_instance();

  void Swap(BaseTransformConfig* other);

  // implements Message ----------------------------------------------

  inline BaseTransformConfig* New() const { return New(NULL); }

  BaseTransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseTransformConfig& from);
  void MergeFrom(const BaseTransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseTransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input_features = 1;
  int input_features_size() const;
  void clear_input_features();
  static const int kInputFeaturesFieldNumber = 1;
  const ::std::string& input_features(int index) const;
  ::std::string* mutable_input_features(int index);
  void set_input_features(int index, const ::std::string& value);
  void set_input_features(int index, const char* value);
  void set_input_features(int index, const char* value, size_t size);
  ::std::string* add_input_features();
  void add_input_features(const ::std::string& value);
  void add_input_features(const char* value);
  void add_input_features(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_features() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_features();

  // optional string output_family = 2;
  void clear_output_family();
  static const int kOutputFamilyFieldNumber = 2;
  const ::std::string& output_family() const;
  void set_output_family(const ::std::string& value);
  void set_output_family(const char* value);
  void set_output_family(const char* value, size_t size);
  ::std::string* mutable_output_family();
  ::std::string* release_output_family();
  void set_allocated_output_family(::std::string* output_family);

  // optional .hotbox.FeatureStoreType output_store_type = 5;
  void clear_output_store_type();
  static const int kOutputStoreTypeFieldNumber = 5;
  ::hotbox::FeatureStoreType output_store_type() const;
  void set_output_store_type(::hotbox::FeatureStoreType value);

  // @@protoc_insertion_point(class_scope:hotbox.BaseTransformConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_features_;
  ::google::protobuf::internal::ArenaStringPtr output_family_;
  int output_store_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static BaseTransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class BucketizeTransformConfig : public ::google::protobuf::Message {
 public:
  BucketizeTransformConfig();
  virtual ~BucketizeTransformConfig();

  BucketizeTransformConfig(const BucketizeTransformConfig& from);

  inline BucketizeTransformConfig& operator=(const BucketizeTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketizeTransformConfig& default_instance();

  void Swap(BucketizeTransformConfig* other);

  // implements Message ----------------------------------------------

  inline BucketizeTransformConfig* New() const { return New(NULL); }

  BucketizeTransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BucketizeTransformConfig& from);
  void MergeFrom(const BucketizeTransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BucketizeTransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float buckets = 1;
  int buckets_size() const;
  void clear_buckets();
  static const int kBucketsFieldNumber = 1;
  float buckets(int index) const;
  void set_buckets(int index, float value);
  void add_buckets(float value);
  const ::google::protobuf::RepeatedField< float >&
      buckets() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_buckets();

  // @@protoc_insertion_point(class_scope:hotbox.BucketizeTransformConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > buckets_;
  mutable int _buckets_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static BucketizeTransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class OneHotTransformConfig : public ::google::protobuf::Message {
 public:
  OneHotTransformConfig();
  virtual ~OneHotTransformConfig();

  OneHotTransformConfig(const OneHotTransformConfig& from);

  inline OneHotTransformConfig& operator=(const OneHotTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneHotTransformConfig& default_instance();

  void Swap(OneHotTransformConfig* other);

  // implements Message ----------------------------------------------

  inline OneHotTransformConfig* New() const { return New(NULL); }

  OneHotTransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneHotTransformConfig& from);
  void MergeFrom(const OneHotTransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OneHotTransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hotbox.OneHotTransformConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static OneHotTransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class ConstantTransformConfig : public ::google::protobuf::Message {
 public:
  ConstantTransformConfig();
  virtual ~ConstantTransformConfig();

  ConstantTransformConfig(const ConstantTransformConfig& from);

  inline ConstantTransformConfig& operator=(const ConstantTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstantTransformConfig& default_instance();

  void Swap(ConstantTransformConfig* other);

  // implements Message ----------------------------------------------

  inline ConstantTransformConfig* New() const { return New(NULL); }

  ConstantTransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstantTransformConfig& from);
  void MergeFrom(const ConstantTransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConstantTransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float constant = 1;
  void clear_constant();
  static const int kConstantFieldNumber = 1;
  float constant() const;
  void set_constant(float value);

  // @@protoc_insertion_point(class_scope:hotbox.ConstantTransformConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float constant_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static ConstantTransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class NgramTransformConfig : public ::google::protobuf::Message {
 public:
  NgramTransformConfig();
  virtual ~NgramTransformConfig();

  NgramTransformConfig(const NgramTransformConfig& from);

  inline NgramTransformConfig& operator=(const NgramTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NgramTransformConfig& default_instance();

  void Swap(NgramTransformConfig* other);

  // implements Message ----------------------------------------------

  inline NgramTransformConfig* New() const { return New(NULL); }

  NgramTransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NgramTransformConfig& from);
  void MergeFrom(const NgramTransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NgramTransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hotbox.NgramTransformConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static NgramTransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class LogitTransformConfig : public ::google::protobuf::Message {
 public:
  LogitTransformConfig();
  virtual ~LogitTransformConfig();

  LogitTransformConfig(const LogitTransformConfig& from);

  inline LogitTransformConfig& operator=(const LogitTransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogitTransformConfig& default_instance();

  void Swap(LogitTransformConfig* other);

  // implements Message ----------------------------------------------

  inline LogitTransformConfig* New() const { return New(NULL); }

  LogitTransformConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogitTransformConfig& from);
  void MergeFrom(const LogitTransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogitTransformConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double upper_bound = 3;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 3;
  double upper_bound() const;
  void set_upper_bound(double value);

  // optional double lower_bound = 4;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 4;
  double lower_bound() const;
  void set_lower_bound(double value);

  // @@protoc_insertion_point(class_scope:hotbox.LogitTransformConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double upper_bound_;
  double lower_bound_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_AssignDesc_transform_2fproto_2ftransform_2eproto();
  friend void protobuf_ShutdownFile_transform_2fproto_2ftransform_2eproto();

  void InitAsDefaultInstance();
  static LogitTransformConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformParamProto

// optional .hotbox.TransformConfig config = 1;
inline bool TransformParamProto::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void TransformParamProto::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::hotbox::TransformConfig& TransformParamProto::config() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformParamProto.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::hotbox::TransformConfig* TransformParamProto::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::hotbox::TransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformParamProto.config)
  return config_;
}
inline ::hotbox::TransformConfig* TransformParamProto::release_config() {
  
  ::hotbox::TransformConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void TransformParamProto::set_allocated_config(::hotbox::TransformConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformParamProto.config)
}

// repeated .hotbox.Feature input_features = 2;
inline int TransformParamProto::input_features_size() const {
  return input_features_.size();
}
inline void TransformParamProto::clear_input_features() {
  input_features_.Clear();
}
inline const ::hotbox::Feature& TransformParamProto::input_features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.TransformParamProto.input_features)
  return input_features_.Get(index);
}
inline ::hotbox::Feature* TransformParamProto::mutable_input_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.TransformParamProto.input_features)
  return input_features_.Mutable(index);
}
inline ::hotbox::Feature* TransformParamProto::add_input_features() {
  // @@protoc_insertion_point(field_add:hotbox.TransformParamProto.input_features)
  return input_features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >*
TransformParamProto::mutable_input_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.TransformParamProto.input_features)
  return &input_features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::Feature >&
TransformParamProto::input_features() const {
  // @@protoc_insertion_point(field_list:hotbox.TransformParamProto.input_features)
  return input_features_;
}

// repeated string input_features_desc = 3;
inline int TransformParamProto::input_features_desc_size() const {
  return input_features_desc_.size();
}
inline void TransformParamProto::clear_input_features_desc() {
  input_features_desc_.Clear();
}
inline const ::std::string& TransformParamProto::input_features_desc(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.TransformParamProto.input_features_desc)
  return input_features_desc_.Get(index);
}
inline ::std::string* TransformParamProto::mutable_input_features_desc(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.TransformParamProto.input_features_desc)
  return input_features_desc_.Mutable(index);
}
inline void TransformParamProto::set_input_features_desc(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.TransformParamProto.input_features_desc)
  input_features_desc_.Mutable(index)->assign(value);
}
inline void TransformParamProto::set_input_features_desc(int index, const char* value) {
  input_features_desc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.TransformParamProto.input_features_desc)
}
inline void TransformParamProto::set_input_features_desc(int index, const char* value, size_t size) {
  input_features_desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.TransformParamProto.input_features_desc)
}
inline ::std::string* TransformParamProto::add_input_features_desc() {
  return input_features_desc_.Add();
}
inline void TransformParamProto::add_input_features_desc(const ::std::string& value) {
  input_features_desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.TransformParamProto.input_features_desc)
}
inline void TransformParamProto::add_input_features_desc(const char* value) {
  input_features_desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.TransformParamProto.input_features_desc)
}
inline void TransformParamProto::add_input_features_desc(const char* value, size_t size) {
  input_features_desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.TransformParamProto.input_features_desc)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformParamProto::input_features_desc() const {
  // @@protoc_insertion_point(field_list:hotbox.TransformParamProto.input_features_desc)
  return input_features_desc_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformParamProto::mutable_input_features_desc() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.TransformParamProto.input_features_desc)
  return &input_features_desc_;
}

// -------------------------------------------------------------------

// TransformConfig

// optional .hotbox.BaseTransformConfig base_config = 1;
inline bool TransformConfig::has_base_config() const {
  return !_is_default_instance_ && base_config_ != NULL;
}
inline void TransformConfig::clear_base_config() {
  if (GetArenaNoVirtual() == NULL && base_config_ != NULL) delete base_config_;
  base_config_ = NULL;
}
inline const ::hotbox::BaseTransformConfig& TransformConfig::base_config() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.base_config)
  return base_config_ != NULL ? *base_config_ : *default_instance_->base_config_;
}
inline ::hotbox::BaseTransformConfig* TransformConfig::mutable_base_config() {
  
  if (base_config_ == NULL) {
    base_config_ = new ::hotbox::BaseTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.base_config)
  return base_config_;
}
inline ::hotbox::BaseTransformConfig* TransformConfig::release_base_config() {
  
  ::hotbox::BaseTransformConfig* temp = base_config_;
  base_config_ = NULL;
  return temp;
}
inline void TransformConfig::set_allocated_base_config(::hotbox::BaseTransformConfig* base_config) {
  delete base_config_;
  base_config_ = base_config;
  if (base_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.base_config)
}

// optional .hotbox.OneHotTransformConfig one_hot_transform = 2;
inline bool TransformConfig::has_one_hot_transform() const {
  return config_case() == kOneHotTransform;
}
inline void TransformConfig::set_has_one_hot_transform() {
  _oneof_case_[0] = kOneHotTransform;
}
inline void TransformConfig::clear_one_hot_transform() {
  if (has_one_hot_transform()) {
    delete config_.one_hot_transform_;
    clear_has_config();
  }
}
inline  const ::hotbox::OneHotTransformConfig& TransformConfig::one_hot_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.one_hot_transform)
  return has_one_hot_transform()
      ? *config_.one_hot_transform_
      : ::hotbox::OneHotTransformConfig::default_instance();
}
inline ::hotbox::OneHotTransformConfig* TransformConfig::mutable_one_hot_transform() {
  if (!has_one_hot_transform()) {
    clear_config();
    set_has_one_hot_transform();
    config_.one_hot_transform_ = new ::hotbox::OneHotTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.one_hot_transform)
  return config_.one_hot_transform_;
}
inline ::hotbox::OneHotTransformConfig* TransformConfig::release_one_hot_transform() {
  if (has_one_hot_transform()) {
    clear_has_config();
    ::hotbox::OneHotTransformConfig* temp = config_.one_hot_transform_;
    config_.one_hot_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TransformConfig::set_allocated_one_hot_transform(::hotbox::OneHotTransformConfig* one_hot_transform) {
  clear_config();
  if (one_hot_transform) {
    set_has_one_hot_transform();
    config_.one_hot_transform_ = one_hot_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.one_hot_transform)
}

// optional .hotbox.BucketizeTransformConfig bucketize_transform = 3;
inline bool TransformConfig::has_bucketize_transform() const {
  return config_case() == kBucketizeTransform;
}
inline void TransformConfig::set_has_bucketize_transform() {
  _oneof_case_[0] = kBucketizeTransform;
}
inline void TransformConfig::clear_bucketize_transform() {
  if (has_bucketize_transform()) {
    delete config_.bucketize_transform_;
    clear_has_config();
  }
}
inline  const ::hotbox::BucketizeTransformConfig& TransformConfig::bucketize_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.bucketize_transform)
  return has_bucketize_transform()
      ? *config_.bucketize_transform_
      : ::hotbox::BucketizeTransformConfig::default_instance();
}
inline ::hotbox::BucketizeTransformConfig* TransformConfig::mutable_bucketize_transform() {
  if (!has_bucketize_transform()) {
    clear_config();
    set_has_bucketize_transform();
    config_.bucketize_transform_ = new ::hotbox::BucketizeTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.bucketize_transform)
  return config_.bucketize_transform_;
}
inline ::hotbox::BucketizeTransformConfig* TransformConfig::release_bucketize_transform() {
  if (has_bucketize_transform()) {
    clear_has_config();
    ::hotbox::BucketizeTransformConfig* temp = config_.bucketize_transform_;
    config_.bucketize_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TransformConfig::set_allocated_bucketize_transform(::hotbox::BucketizeTransformConfig* bucketize_transform) {
  clear_config();
  if (bucketize_transform) {
    set_has_bucketize_transform();
    config_.bucketize_transform_ = bucketize_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.bucketize_transform)
}

// optional .hotbox.NgramTransformConfig ngram_transform = 4;
inline bool TransformConfig::has_ngram_transform() const {
  return config_case() == kNgramTransform;
}
inline void TransformConfig::set_has_ngram_transform() {
  _oneof_case_[0] = kNgramTransform;
}
inline void TransformConfig::clear_ngram_transform() {
  if (has_ngram_transform()) {
    delete config_.ngram_transform_;
    clear_has_config();
  }
}
inline  const ::hotbox::NgramTransformConfig& TransformConfig::ngram_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.ngram_transform)
  return has_ngram_transform()
      ? *config_.ngram_transform_
      : ::hotbox::NgramTransformConfig::default_instance();
}
inline ::hotbox::NgramTransformConfig* TransformConfig::mutable_ngram_transform() {
  if (!has_ngram_transform()) {
    clear_config();
    set_has_ngram_transform();
    config_.ngram_transform_ = new ::hotbox::NgramTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.ngram_transform)
  return config_.ngram_transform_;
}
inline ::hotbox::NgramTransformConfig* TransformConfig::release_ngram_transform() {
  if (has_ngram_transform()) {
    clear_has_config();
    ::hotbox::NgramTransformConfig* temp = config_.ngram_transform_;
    config_.ngram_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TransformConfig::set_allocated_ngram_transform(::hotbox::NgramTransformConfig* ngram_transform) {
  clear_config();
  if (ngram_transform) {
    set_has_ngram_transform();
    config_.ngram_transform_ = ngram_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.ngram_transform)
}

// optional .hotbox.LogitTransformConfig logit_transform = 5;
inline bool TransformConfig::has_logit_transform() const {
  return config_case() == kLogitTransform;
}
inline void TransformConfig::set_has_logit_transform() {
  _oneof_case_[0] = kLogitTransform;
}
inline void TransformConfig::clear_logit_transform() {
  if (has_logit_transform()) {
    delete config_.logit_transform_;
    clear_has_config();
  }
}
inline  const ::hotbox::LogitTransformConfig& TransformConfig::logit_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.logit_transform)
  return has_logit_transform()
      ? *config_.logit_transform_
      : ::hotbox::LogitTransformConfig::default_instance();
}
inline ::hotbox::LogitTransformConfig* TransformConfig::mutable_logit_transform() {
  if (!has_logit_transform()) {
    clear_config();
    set_has_logit_transform();
    config_.logit_transform_ = new ::hotbox::LogitTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.logit_transform)
  return config_.logit_transform_;
}
inline ::hotbox::LogitTransformConfig* TransformConfig::release_logit_transform() {
  if (has_logit_transform()) {
    clear_has_config();
    ::hotbox::LogitTransformConfig* temp = config_.logit_transform_;
    config_.logit_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TransformConfig::set_allocated_logit_transform(::hotbox::LogitTransformConfig* logit_transform) {
  clear_config();
  if (logit_transform) {
    set_has_logit_transform();
    config_.logit_transform_ = logit_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.logit_transform)
}

// optional .hotbox.ConstantTransformConfig constant_transform = 6;
inline bool TransformConfig::has_constant_transform() const {
  return config_case() == kConstantTransform;
}
inline void TransformConfig::set_has_constant_transform() {
  _oneof_case_[0] = kConstantTransform;
}
inline void TransformConfig::clear_constant_transform() {
  if (has_constant_transform()) {
    delete config_.constant_transform_;
    clear_has_config();
  }
}
inline  const ::hotbox::ConstantTransformConfig& TransformConfig::constant_transform() const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfig.constant_transform)
  return has_constant_transform()
      ? *config_.constant_transform_
      : ::hotbox::ConstantTransformConfig::default_instance();
}
inline ::hotbox::ConstantTransformConfig* TransformConfig::mutable_constant_transform() {
  if (!has_constant_transform()) {
    clear_config();
    set_has_constant_transform();
    config_.constant_transform_ = new ::hotbox::ConstantTransformConfig;
  }
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfig.constant_transform)
  return config_.constant_transform_;
}
inline ::hotbox::ConstantTransformConfig* TransformConfig::release_constant_transform() {
  if (has_constant_transform()) {
    clear_has_config();
    ::hotbox::ConstantTransformConfig* temp = config_.constant_transform_;
    config_.constant_transform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TransformConfig::set_allocated_constant_transform(::hotbox::ConstantTransformConfig* constant_transform) {
  clear_config();
  if (constant_transform) {
    set_has_constant_transform();
    config_.constant_transform_ = constant_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:hotbox.TransformConfig.constant_transform)
}

inline bool TransformConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void TransformConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline TransformConfig::ConfigCase TransformConfig::config_case() const {
  return TransformConfig::ConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransformConfigList

// repeated .hotbox.TransformConfig transform_configs = 1;
inline int TransformConfigList::transform_configs_size() const {
  return transform_configs_.size();
}
inline void TransformConfigList::clear_transform_configs() {
  transform_configs_.Clear();
}
inline const ::hotbox::TransformConfig& TransformConfigList::transform_configs(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.TransformConfigList.transform_configs)
  return transform_configs_.Get(index);
}
inline ::hotbox::TransformConfig* TransformConfigList::mutable_transform_configs(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.TransformConfigList.transform_configs)
  return transform_configs_.Mutable(index);
}
inline ::hotbox::TransformConfig* TransformConfigList::add_transform_configs() {
  // @@protoc_insertion_point(field_add:hotbox.TransformConfigList.transform_configs)
  return transform_configs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig >*
TransformConfigList::mutable_transform_configs() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.TransformConfigList.transform_configs)
  return &transform_configs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hotbox::TransformConfig >&
TransformConfigList::transform_configs() const {
  // @@protoc_insertion_point(field_list:hotbox.TransformConfigList.transform_configs)
  return transform_configs_;
}

// -------------------------------------------------------------------

// BaseTransformConfig

// repeated string input_features = 1;
inline int BaseTransformConfig::input_features_size() const {
  return input_features_.size();
}
inline void BaseTransformConfig::clear_input_features() {
  input_features_.Clear();
}
inline const ::std::string& BaseTransformConfig::input_features(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.BaseTransformConfig.input_features)
  return input_features_.Get(index);
}
inline ::std::string* BaseTransformConfig::mutable_input_features(int index) {
  // @@protoc_insertion_point(field_mutable:hotbox.BaseTransformConfig.input_features)
  return input_features_.Mutable(index);
}
inline void BaseTransformConfig::set_input_features(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hotbox.BaseTransformConfig.input_features)
  input_features_.Mutable(index)->assign(value);
}
inline void BaseTransformConfig::set_input_features(int index, const char* value) {
  input_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hotbox.BaseTransformConfig.input_features)
}
inline void BaseTransformConfig::set_input_features(int index, const char* value, size_t size) {
  input_features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hotbox.BaseTransformConfig.input_features)
}
inline ::std::string* BaseTransformConfig::add_input_features() {
  return input_features_.Add();
}
inline void BaseTransformConfig::add_input_features(const ::std::string& value) {
  input_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hotbox.BaseTransformConfig.input_features)
}
inline void BaseTransformConfig::add_input_features(const char* value) {
  input_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hotbox.BaseTransformConfig.input_features)
}
inline void BaseTransformConfig::add_input_features(const char* value, size_t size) {
  input_features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hotbox.BaseTransformConfig.input_features)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BaseTransformConfig::input_features() const {
  // @@protoc_insertion_point(field_list:hotbox.BaseTransformConfig.input_features)
  return input_features_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BaseTransformConfig::mutable_input_features() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.BaseTransformConfig.input_features)
  return &input_features_;
}

// optional string output_family = 2;
inline void BaseTransformConfig::clear_output_family() {
  output_family_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseTransformConfig::output_family() const {
  // @@protoc_insertion_point(field_get:hotbox.BaseTransformConfig.output_family)
  return output_family_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseTransformConfig::set_output_family(const ::std::string& value) {
  
  output_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hotbox.BaseTransformConfig.output_family)
}
inline void BaseTransformConfig::set_output_family(const char* value) {
  
  output_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hotbox.BaseTransformConfig.output_family)
}
inline void BaseTransformConfig::set_output_family(const char* value, size_t size) {
  
  output_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hotbox.BaseTransformConfig.output_family)
}
inline ::std::string* BaseTransformConfig::mutable_output_family() {
  
  // @@protoc_insertion_point(field_mutable:hotbox.BaseTransformConfig.output_family)
  return output_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseTransformConfig::release_output_family() {
  
  return output_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseTransformConfig::set_allocated_output_family(::std::string* output_family) {
  if (output_family != NULL) {
    
  } else {
    
  }
  output_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_family);
  // @@protoc_insertion_point(field_set_allocated:hotbox.BaseTransformConfig.output_family)
}

// optional .hotbox.FeatureStoreType output_store_type = 5;
inline void BaseTransformConfig::clear_output_store_type() {
  output_store_type_ = 0;
}
inline ::hotbox::FeatureStoreType BaseTransformConfig::output_store_type() const {
  // @@protoc_insertion_point(field_get:hotbox.BaseTransformConfig.output_store_type)
  return static_cast< ::hotbox::FeatureStoreType >(output_store_type_);
}
inline void BaseTransformConfig::set_output_store_type(::hotbox::FeatureStoreType value) {
  
  output_store_type_ = value;
  // @@protoc_insertion_point(field_set:hotbox.BaseTransformConfig.output_store_type)
}

// -------------------------------------------------------------------

// BucketizeTransformConfig

// repeated float buckets = 1;
inline int BucketizeTransformConfig::buckets_size() const {
  return buckets_.size();
}
inline void BucketizeTransformConfig::clear_buckets() {
  buckets_.Clear();
}
inline float BucketizeTransformConfig::buckets(int index) const {
  // @@protoc_insertion_point(field_get:hotbox.BucketizeTransformConfig.buckets)
  return buckets_.Get(index);
}
inline void BucketizeTransformConfig::set_buckets(int index, float value) {
  buckets_.Set(index, value);
  // @@protoc_insertion_point(field_set:hotbox.BucketizeTransformConfig.buckets)
}
inline void BucketizeTransformConfig::add_buckets(float value) {
  buckets_.Add(value);
  // @@protoc_insertion_point(field_add:hotbox.BucketizeTransformConfig.buckets)
}
inline const ::google::protobuf::RepeatedField< float >&
BucketizeTransformConfig::buckets() const {
  // @@protoc_insertion_point(field_list:hotbox.BucketizeTransformConfig.buckets)
  return buckets_;
}
inline ::google::protobuf::RepeatedField< float >*
BucketizeTransformConfig::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:hotbox.BucketizeTransformConfig.buckets)
  return &buckets_;
}

// -------------------------------------------------------------------

// OneHotTransformConfig

// -------------------------------------------------------------------

// ConstantTransformConfig

// optional float constant = 1;
inline void ConstantTransformConfig::clear_constant() {
  constant_ = 0;
}
inline float ConstantTransformConfig::constant() const {
  // @@protoc_insertion_point(field_get:hotbox.ConstantTransformConfig.constant)
  return constant_;
}
inline void ConstantTransformConfig::set_constant(float value) {
  
  constant_ = value;
  // @@protoc_insertion_point(field_set:hotbox.ConstantTransformConfig.constant)
}

// -------------------------------------------------------------------

// NgramTransformConfig

// -------------------------------------------------------------------

// LogitTransformConfig

// optional double upper_bound = 3;
inline void LogitTransformConfig::clear_upper_bound() {
  upper_bound_ = 0;
}
inline double LogitTransformConfig::upper_bound() const {
  // @@protoc_insertion_point(field_get:hotbox.LogitTransformConfig.upper_bound)
  return upper_bound_;
}
inline void LogitTransformConfig::set_upper_bound(double value) {
  
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:hotbox.LogitTransformConfig.upper_bound)
}

// optional double lower_bound = 4;
inline void LogitTransformConfig::clear_lower_bound() {
  lower_bound_ = 0;
}
inline double LogitTransformConfig::lower_bound() const {
  // @@protoc_insertion_point(field_get:hotbox.LogitTransformConfig.lower_bound)
  return lower_bound_;
}
inline void LogitTransformConfig::set_lower_bound(double value) {
  
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:hotbox.LogitTransformConfig.lower_bound)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hotbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transform_2fproto_2ftransform_2eproto__INCLUDED
