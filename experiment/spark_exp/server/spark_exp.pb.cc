// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark_exp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spark_exp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spark_exp {

namespace {

const ::google::protobuf::Descriptor* Session_option_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Session_option_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_request_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_request_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Libsvm_data_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Libsvm_data_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spark_5fexp_2eproto() {
  protobuf_AddDesc_spark_5fexp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spark_exp.proto");
  GOOGLE_CHECK(file != NULL);
  Session_option_msg_descriptor_ = file->message_type(0);
  static const int Session_option_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session_option_msg, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session_option_msg, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session_option_msg, transform_config_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session_option_msg, is_dense_),
  };
  Session_option_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Session_option_msg_descriptor_,
      Session_option_msg::default_instance_,
      Session_option_msg_offsets_,
      -1,
      -1,
      -1,
      sizeof(Session_option_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session_option_msg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session_option_msg, _is_default_instance_));
  Data_request_msg_descriptor_ = file->message_type(1);
  static const int Data_request_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_request_msg, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_request_msg, end_),
  };
  Data_request_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_request_msg_descriptor_,
      Data_request_msg::default_instance_,
      Data_request_msg_offsets_,
      -1,
      -1,
      -1,
      sizeof(Data_request_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_request_msg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data_request_msg, _is_default_instance_));
  Libsvm_data_msg_descriptor_ = file->message_type(2);
  static const int Libsvm_data_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Libsvm_data_msg, data_),
  };
  Libsvm_data_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Libsvm_data_msg_descriptor_,
      Libsvm_data_msg::default_instance_,
      Libsvm_data_msg_offsets_,
      -1,
      -1,
      -1,
      sizeof(Libsvm_data_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Libsvm_data_msg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Libsvm_data_msg, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spark_5fexp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Session_option_msg_descriptor_, &Session_option_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_request_msg_descriptor_, &Data_request_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Libsvm_data_msg_descriptor_, &Libsvm_data_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spark_5fexp_2eproto() {
  delete Session_option_msg::default_instance_;
  delete Session_option_msg_reflection_;
  delete Data_request_msg::default_instance_;
  delete Data_request_msg_reflection_;
  delete Libsvm_data_msg::default_instance_;
  delete Libsvm_data_msg_reflection_;
}

void protobuf_AddDesc_spark_5fexp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017spark_exp.proto\022\tspark_exp\"j\n\022Session_"
    "option_msg\022\017\n\007db_name\030\001 \001(\t\022\022\n\nsession_i"
    "d\030\002 \001(\t\022\035\n\025transform_config_path\030\003 \001(\t\022\020"
    "\n\010is_dense\030\004 \001(\010\".\n\020Data_request_msg\022\r\n\005"
    "begin\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"\037\n\017Libsvm_data_"
    "msg\022\014\n\004data\030\001 \003(\tb\006proto3", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spark_exp.proto", &protobuf_RegisterTypes);
  Session_option_msg::default_instance_ = new Session_option_msg();
  Data_request_msg::default_instance_ = new Data_request_msg();
  Libsvm_data_msg::default_instance_ = new Libsvm_data_msg();
  Session_option_msg::default_instance_->InitAsDefaultInstance();
  Data_request_msg::default_instance_->InitAsDefaultInstance();
  Libsvm_data_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spark_5fexp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spark_5fexp_2eproto {
  StaticDescriptorInitializer_spark_5fexp_2eproto() {
    protobuf_AddDesc_spark_5fexp_2eproto();
  }
} static_descriptor_initializer_spark_5fexp_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Session_option_msg::kDbNameFieldNumber;
const int Session_option_msg::kSessionIdFieldNumber;
const int Session_option_msg::kTransformConfigPathFieldNumber;
const int Session_option_msg::kIsDenseFieldNumber;
#endif  // !_MSC_VER

Session_option_msg::Session_option_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spark_exp.Session_option_msg)
}

void Session_option_msg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Session_option_msg::Session_option_msg(const Session_option_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spark_exp.Session_option_msg)
}

void Session_option_msg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_config_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_dense_ = false;
}

Session_option_msg::~Session_option_msg() {
  // @@protoc_insertion_point(destructor:spark_exp.Session_option_msg)
  SharedDtor();
}

void Session_option_msg::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_config_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Session_option_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session_option_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Session_option_msg_descriptor_;
}

const Session_option_msg& Session_option_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_5fexp_2eproto();
  return *default_instance_;
}

Session_option_msg* Session_option_msg::default_instance_ = NULL;

Session_option_msg* Session_option_msg::New(::google::protobuf::Arena* arena) const {
  Session_option_msg* n = new Session_option_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session_option_msg::Clear() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_dense_ = false;
}

bool Session_option_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spark_exp.Session_option_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spark_exp.Session_option_msg.db_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spark_exp.Session_option_msg.session_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transform_config_path;
        break;
      }

      // optional string transform_config_path = 3;
      case 3: {
        if (tag == 26) {
         parse_transform_config_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transform_config_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transform_config_path().data(), this->transform_config_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spark_exp.Session_option_msg.transform_config_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_dense;
        break;
      }

      // optional bool is_dense = 4;
      case 4: {
        if (tag == 32) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spark_exp.Session_option_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spark_exp.Session_option_msg)
  return false;
#undef DO_
}

void Session_option_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spark_exp.Session_option_msg)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Session_option_msg.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Session_option_msg.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional string transform_config_path = 3;
  if (this->transform_config_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_config_path().data(), this->transform_config_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Session_option_msg.transform_config_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->transform_config_path(), output);
  }

  // optional bool is_dense = 4;
  if (this->is_dense() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dense(), output);
  }

  // @@protoc_insertion_point(serialize_end:spark_exp.Session_option_msg)
}

::google::protobuf::uint8* Session_option_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spark_exp.Session_option_msg)
  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Session_option_msg.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Session_option_msg.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // optional string transform_config_path = 3;
  if (this->transform_config_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transform_config_path().data(), this->transform_config_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Session_option_msg.transform_config_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transform_config_path(), target);
  }

  // optional bool is_dense = 4;
  if (this->is_dense() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dense(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spark_exp.Session_option_msg)
  return target;
}

int Session_option_msg::ByteSize() const {
  int total_size = 0;

  // optional string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // optional string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // optional string transform_config_path = 3;
  if (this->transform_config_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transform_config_path());
  }

  // optional bool is_dense = 4;
  if (this->is_dense() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session_option_msg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Session_option_msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Session_option_msg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Session_option_msg::MergeFrom(const Session_option_msg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.transform_config_path().size() > 0) {

    transform_config_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transform_config_path_);
  }
  if (from.is_dense() != 0) {
    set_is_dense(from.is_dense());
  }
}

void Session_option_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session_option_msg::CopyFrom(const Session_option_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session_option_msg::IsInitialized() const {

  return true;
}

void Session_option_msg::Swap(Session_option_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session_option_msg::InternalSwap(Session_option_msg* other) {
  db_name_.Swap(&other->db_name_);
  session_id_.Swap(&other->session_id_);
  transform_config_path_.Swap(&other->transform_config_path_);
  std::swap(is_dense_, other->is_dense_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session_option_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Session_option_msg_descriptor_;
  metadata.reflection = Session_option_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session_option_msg

// optional string db_name = 1;
void Session_option_msg::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Session_option_msg::db_name() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Session_option_msg::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.db_name)
}
 void Session_option_msg::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spark_exp.Session_option_msg.db_name)
}
 void Session_option_msg::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Session_option_msg.db_name)
}
 ::std::string* Session_option_msg::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:spark_exp.Session_option_msg.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Session_option_msg::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Session_option_msg::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:spark_exp.Session_option_msg.db_name)
}

// optional string session_id = 2;
void Session_option_msg::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Session_option_msg::session_id() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Session_option_msg::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.session_id)
}
 void Session_option_msg::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spark_exp.Session_option_msg.session_id)
}
 void Session_option_msg::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Session_option_msg.session_id)
}
 ::std::string* Session_option_msg::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:spark_exp.Session_option_msg.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Session_option_msg::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Session_option_msg::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:spark_exp.Session_option_msg.session_id)
}

// optional string transform_config_path = 3;
void Session_option_msg::clear_transform_config_path() {
  transform_config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Session_option_msg::transform_config_path() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.transform_config_path)
  return transform_config_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Session_option_msg::set_transform_config_path(const ::std::string& value) {
  
  transform_config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.transform_config_path)
}
 void Session_option_msg::set_transform_config_path(const char* value) {
  
  transform_config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spark_exp.Session_option_msg.transform_config_path)
}
 void Session_option_msg::set_transform_config_path(const char* value, size_t size) {
  
  transform_config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Session_option_msg.transform_config_path)
}
 ::std::string* Session_option_msg::mutable_transform_config_path() {
  
  // @@protoc_insertion_point(field_mutable:spark_exp.Session_option_msg.transform_config_path)
  return transform_config_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Session_option_msg::release_transform_config_path() {
  
  return transform_config_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Session_option_msg::set_allocated_transform_config_path(::std::string* transform_config_path) {
  if (transform_config_path != NULL) {
    
  } else {
    
  }
  transform_config_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_config_path);
  // @@protoc_insertion_point(field_set_allocated:spark_exp.Session_option_msg.transform_config_path)
}

// optional bool is_dense = 4;
void Session_option_msg::clear_is_dense() {
  is_dense_ = false;
}
 bool Session_option_msg::is_dense() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.is_dense)
  return is_dense_;
}
 void Session_option_msg::set_is_dense(bool value) {
  
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.is_dense)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Data_request_msg::kBeginFieldNumber;
const int Data_request_msg::kEndFieldNumber;
#endif  // !_MSC_VER

Data_request_msg::Data_request_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spark_exp.Data_request_msg)
}

void Data_request_msg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Data_request_msg::Data_request_msg(const Data_request_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spark_exp.Data_request_msg)
}

void Data_request_msg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  begin_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
}

Data_request_msg::~Data_request_msg() {
  // @@protoc_insertion_point(destructor:spark_exp.Data_request_msg)
  SharedDtor();
}

void Data_request_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data_request_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data_request_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_request_msg_descriptor_;
}

const Data_request_msg& Data_request_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_5fexp_2eproto();
  return *default_instance_;
}

Data_request_msg* Data_request_msg::default_instance_ = NULL;

Data_request_msg* Data_request_msg::New(::google::protobuf::Arena* arena) const {
  Data_request_msg* n = new Data_request_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data_request_msg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Data_request_msg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(begin_, end_);

#undef ZR_HELPER_
#undef ZR_

}

bool Data_request_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spark_exp.Data_request_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional int64 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spark_exp.Data_request_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spark_exp.Data_request_msg)
  return false;
#undef DO_
}

void Data_request_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spark_exp.Data_request_msg)
  // optional int64 begin = 1;
  if (this->begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:spark_exp.Data_request_msg)
}

::google::protobuf::uint8* Data_request_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spark_exp.Data_request_msg)
  // optional int64 begin = 1;
  if (this->begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spark_exp.Data_request_msg)
  return target;
}

int Data_request_msg::ByteSize() const {
  int total_size = 0;

  // optional int64 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data_request_msg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data_request_msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Data_request_msg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data_request_msg::MergeFrom(const Data_request_msg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.begin() != 0) {
    set_begin(from.begin());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Data_request_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_request_msg::CopyFrom(const Data_request_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_request_msg::IsInitialized() const {

  return true;
}

void Data_request_msg::Swap(Data_request_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data_request_msg::InternalSwap(Data_request_msg* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data_request_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_request_msg_descriptor_;
  metadata.reflection = Data_request_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data_request_msg

// optional int64 begin = 1;
void Data_request_msg::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Data_request_msg::begin() const {
  // @@protoc_insertion_point(field_get:spark_exp.Data_request_msg.begin)
  return begin_;
}
 void Data_request_msg::set_begin(::google::protobuf::int64 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:spark_exp.Data_request_msg.begin)
}

// optional int64 end = 2;
void Data_request_msg::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Data_request_msg::end() const {
  // @@protoc_insertion_point(field_get:spark_exp.Data_request_msg.end)
  return end_;
}
 void Data_request_msg::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:spark_exp.Data_request_msg.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Libsvm_data_msg::kDataFieldNumber;
#endif  // !_MSC_VER

Libsvm_data_msg::Libsvm_data_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spark_exp.Libsvm_data_msg)
}

void Libsvm_data_msg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Libsvm_data_msg::Libsvm_data_msg(const Libsvm_data_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:spark_exp.Libsvm_data_msg)
}

void Libsvm_data_msg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

Libsvm_data_msg::~Libsvm_data_msg() {
  // @@protoc_insertion_point(destructor:spark_exp.Libsvm_data_msg)
  SharedDtor();
}

void Libsvm_data_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Libsvm_data_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Libsvm_data_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Libsvm_data_msg_descriptor_;
}

const Libsvm_data_msg& Libsvm_data_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_5fexp_2eproto();
  return *default_instance_;
}

Libsvm_data_msg* Libsvm_data_msg::default_instance_ = NULL;

Libsvm_data_msg* Libsvm_data_msg::New(::google::protobuf::Arena* arena) const {
  Libsvm_data_msg* n = new Libsvm_data_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Libsvm_data_msg::Clear() {
  data_.Clear();
}

bool Libsvm_data_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spark_exp.Libsvm_data_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spark_exp.Libsvm_data_msg.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spark_exp.Libsvm_data_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spark_exp.Libsvm_data_msg)
  return false;
#undef DO_
}

void Libsvm_data_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spark_exp.Libsvm_data_msg)
  // repeated string data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Libsvm_data_msg.data");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:spark_exp.Libsvm_data_msg)
}

::google::protobuf::uint8* Libsvm_data_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:spark_exp.Libsvm_data_msg)
  // repeated string data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spark_exp.Libsvm_data_msg.data");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:spark_exp.Libsvm_data_msg)
  return target;
}

int Libsvm_data_msg::ByteSize() const {
  int total_size = 0;

  // repeated string data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Libsvm_data_msg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Libsvm_data_msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Libsvm_data_msg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Libsvm_data_msg::MergeFrom(const Libsvm_data_msg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
}

void Libsvm_data_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Libsvm_data_msg::CopyFrom(const Libsvm_data_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Libsvm_data_msg::IsInitialized() const {

  return true;
}

void Libsvm_data_msg::Swap(Libsvm_data_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Libsvm_data_msg::InternalSwap(Libsvm_data_msg* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Libsvm_data_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Libsvm_data_msg_descriptor_;
  metadata.reflection = Libsvm_data_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Libsvm_data_msg

// repeated string data = 1;
int Libsvm_data_msg::data_size() const {
  return data_.size();
}
void Libsvm_data_msg::clear_data() {
  data_.Clear();
}
 const ::std::string& Libsvm_data_msg::data(int index) const {
  // @@protoc_insertion_point(field_get:spark_exp.Libsvm_data_msg.data)
  return data_.Get(index);
}
 ::std::string* Libsvm_data_msg::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:spark_exp.Libsvm_data_msg.data)
  return data_.Mutable(index);
}
 void Libsvm_data_msg::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spark_exp.Libsvm_data_msg.data)
  data_.Mutable(index)->assign(value);
}
 void Libsvm_data_msg::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spark_exp.Libsvm_data_msg.data)
}
 void Libsvm_data_msg::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Libsvm_data_msg.data)
}
 ::std::string* Libsvm_data_msg::add_data() {
  return data_.Add();
}
 void Libsvm_data_msg::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spark_exp.Libsvm_data_msg.data)
}
 void Libsvm_data_msg::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spark_exp.Libsvm_data_msg.data)
}
 void Libsvm_data_msg::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spark_exp.Libsvm_data_msg.data)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Libsvm_data_msg::data() const {
  // @@protoc_insertion_point(field_list:spark_exp.Libsvm_data_msg.data)
  return data_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Libsvm_data_msg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:spark_exp.Libsvm_data_msg.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace spark_exp

// @@protoc_insertion_point(global_scope)
