// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark_exp.proto

#ifndef PROTOBUF_spark_5fexp_2eproto__INCLUDED
#define PROTOBUF_spark_5fexp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spark_exp {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_spark_5fexp_2eproto();
void protobuf_AssignDesc_spark_5fexp_2eproto();
void protobuf_ShutdownFile_spark_5fexp_2eproto();

class Data_request_msg;
class Libsvm_data_msg;
class Session_option_msg;

// ===================================================================

class Session_option_msg : public ::google::protobuf::Message {
 public:
  Session_option_msg();
  virtual ~Session_option_msg();

  Session_option_msg(const Session_option_msg& from);

  inline Session_option_msg& operator=(const Session_option_msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Session_option_msg& default_instance();

  void Swap(Session_option_msg* other);

  // implements Message ----------------------------------------------

  inline Session_option_msg* New() const { return New(NULL); }

  Session_option_msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session_option_msg& from);
  void MergeFrom(const Session_option_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Session_option_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_name = 1;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // optional string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional string transform_config_path = 3;
  void clear_transform_config_path();
  static const int kTransformConfigPathFieldNumber = 3;
  const ::std::string& transform_config_path() const;
  void set_transform_config_path(const ::std::string& value);
  void set_transform_config_path(const char* value);
  void set_transform_config_path(const char* value, size_t size);
  ::std::string* mutable_transform_config_path();
  ::std::string* release_transform_config_path();
  void set_allocated_transform_config_path(::std::string* transform_config_path);

  // optional bool is_dense = 4;
  void clear_is_dense();
  static const int kIsDenseFieldNumber = 4;
  bool is_dense() const;
  void set_is_dense(bool value);

  // @@protoc_insertion_point(class_scope:spark_exp.Session_option_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr transform_config_path_;
  bool is_dense_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_spark_5fexp_2eproto();
  friend void protobuf_AssignDesc_spark_5fexp_2eproto();
  friend void protobuf_ShutdownFile_spark_5fexp_2eproto();

  void InitAsDefaultInstance();
  static Session_option_msg* default_instance_;
};
// -------------------------------------------------------------------

class Data_request_msg : public ::google::protobuf::Message {
 public:
  Data_request_msg();
  virtual ~Data_request_msg();

  Data_request_msg(const Data_request_msg& from);

  inline Data_request_msg& operator=(const Data_request_msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data_request_msg& default_instance();

  void Swap(Data_request_msg* other);

  // implements Message ----------------------------------------------

  inline Data_request_msg* New() const { return New(NULL); }

  Data_request_msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data_request_msg& from);
  void MergeFrom(const Data_request_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data_request_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 begin = 1;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // optional int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:spark_exp.Data_request_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_spark_5fexp_2eproto();
  friend void protobuf_AssignDesc_spark_5fexp_2eproto();
  friend void protobuf_ShutdownFile_spark_5fexp_2eproto();

  void InitAsDefaultInstance();
  static Data_request_msg* default_instance_;
};
// -------------------------------------------------------------------

class Libsvm_data_msg : public ::google::protobuf::Message {
 public:
  Libsvm_data_msg();
  virtual ~Libsvm_data_msg();

  Libsvm_data_msg(const Libsvm_data_msg& from);

  inline Libsvm_data_msg& operator=(const Libsvm_data_msg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Libsvm_data_msg& default_instance();

  void Swap(Libsvm_data_msg* other);

  // implements Message ----------------------------------------------

  inline Libsvm_data_msg* New() const { return New(NULL); }

  Libsvm_data_msg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Libsvm_data_msg& from);
  void MergeFrom(const Libsvm_data_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Libsvm_data_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:spark_exp.Libsvm_data_msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_spark_5fexp_2eproto();
  friend void protobuf_AssignDesc_spark_5fexp_2eproto();
  friend void protobuf_ShutdownFile_spark_5fexp_2eproto();

  void InitAsDefaultInstance();
  static Libsvm_data_msg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Session_option_msg

// optional string db_name = 1;
inline void Session_option_msg::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_option_msg::db_name() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_option_msg::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.db_name)
}
inline void Session_option_msg::set_db_name(const char* value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spark_exp.Session_option_msg.db_name)
}
inline void Session_option_msg::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Session_option_msg.db_name)
}
inline ::std::string* Session_option_msg::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:spark_exp.Session_option_msg.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_option_msg::release_db_name() {
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_option_msg::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:spark_exp.Session_option_msg.db_name)
}

// optional string session_id = 2;
inline void Session_option_msg::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_option_msg::session_id() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_option_msg::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.session_id)
}
inline void Session_option_msg::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spark_exp.Session_option_msg.session_id)
}
inline void Session_option_msg::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Session_option_msg.session_id)
}
inline ::std::string* Session_option_msg::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:spark_exp.Session_option_msg.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_option_msg::release_session_id() {
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_option_msg::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:spark_exp.Session_option_msg.session_id)
}

// optional string transform_config_path = 3;
inline void Session_option_msg::clear_transform_config_path() {
  transform_config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session_option_msg::transform_config_path() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.transform_config_path)
  return transform_config_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_option_msg::set_transform_config_path(const ::std::string& value) {
  
  transform_config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.transform_config_path)
}
inline void Session_option_msg::set_transform_config_path(const char* value) {
  
  transform_config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spark_exp.Session_option_msg.transform_config_path)
}
inline void Session_option_msg::set_transform_config_path(const char* value, size_t size) {
  
  transform_config_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Session_option_msg.transform_config_path)
}
inline ::std::string* Session_option_msg::mutable_transform_config_path() {
  
  // @@protoc_insertion_point(field_mutable:spark_exp.Session_option_msg.transform_config_path)
  return transform_config_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session_option_msg::release_transform_config_path() {
  
  return transform_config_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session_option_msg::set_allocated_transform_config_path(::std::string* transform_config_path) {
  if (transform_config_path != NULL) {
    
  } else {
    
  }
  transform_config_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transform_config_path);
  // @@protoc_insertion_point(field_set_allocated:spark_exp.Session_option_msg.transform_config_path)
}

// optional bool is_dense = 4;
inline void Session_option_msg::clear_is_dense() {
  is_dense_ = false;
}
inline bool Session_option_msg::is_dense() const {
  // @@protoc_insertion_point(field_get:spark_exp.Session_option_msg.is_dense)
  return is_dense_;
}
inline void Session_option_msg::set_is_dense(bool value) {
  
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:spark_exp.Session_option_msg.is_dense)
}

// -------------------------------------------------------------------

// Data_request_msg

// optional int64 begin = 1;
inline void Data_request_msg::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Data_request_msg::begin() const {
  // @@protoc_insertion_point(field_get:spark_exp.Data_request_msg.begin)
  return begin_;
}
inline void Data_request_msg::set_begin(::google::protobuf::int64 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:spark_exp.Data_request_msg.begin)
}

// optional int64 end = 2;
inline void Data_request_msg::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Data_request_msg::end() const {
  // @@protoc_insertion_point(field_get:spark_exp.Data_request_msg.end)
  return end_;
}
inline void Data_request_msg::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:spark_exp.Data_request_msg.end)
}

// -------------------------------------------------------------------

// Libsvm_data_msg

// repeated string data = 1;
inline int Libsvm_data_msg::data_size() const {
  return data_.size();
}
inline void Libsvm_data_msg::clear_data() {
  data_.Clear();
}
inline const ::std::string& Libsvm_data_msg::data(int index) const {
  // @@protoc_insertion_point(field_get:spark_exp.Libsvm_data_msg.data)
  return data_.Get(index);
}
inline ::std::string* Libsvm_data_msg::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:spark_exp.Libsvm_data_msg.data)
  return data_.Mutable(index);
}
inline void Libsvm_data_msg::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:spark_exp.Libsvm_data_msg.data)
  data_.Mutable(index)->assign(value);
}
inline void Libsvm_data_msg::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:spark_exp.Libsvm_data_msg.data)
}
inline void Libsvm_data_msg::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:spark_exp.Libsvm_data_msg.data)
}
inline ::std::string* Libsvm_data_msg::add_data() {
  return data_.Add();
}
inline void Libsvm_data_msg::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:spark_exp.Libsvm_data_msg.data)
}
inline void Libsvm_data_msg::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:spark_exp.Libsvm_data_msg.data)
}
inline void Libsvm_data_msg::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:spark_exp.Libsvm_data_msg.data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Libsvm_data_msg::data() const {
  // @@protoc_insertion_point(field_list:spark_exp.Libsvm_data_msg.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Libsvm_data_msg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:spark_exp.Libsvm_data_msg.data)
  return &data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spark_exp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spark_5fexp_2eproto__INCLUDED
