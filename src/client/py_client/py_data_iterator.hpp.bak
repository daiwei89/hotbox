#pragma once
#include "db/proto/db.pb.h"
#include "schema/all.hpp"
#include "client/data_iterator.hpp"
#include "client/py_client/py_flexi_datum.hpp"

namespace hotbox {

class PYDataIterator {
public:
  inline bool HasNext() const {
    return next_ < data_end_;
  }

  inline void Next() {
    next_++;
  }

  inline void Restart() {
    next_ = data_begin_;
    chunk_begin_ = data_begin_;
    chunk_end_ = data_begin_;
  }

  PYFlexiDatum GetDatum();
  
private:
  // Can only be created by Session, and the parent Session needs to outlive
  // DataIterator.
  friend class Session;

  DataIterator(const SessionProto& session_proto,
      std::vector<std::function<void(TransDatum*)>> transforms,
      BigInt data_begin, BigInt data_end);

  // Read an atom file and perform transform.
  void ReadAtomAndTransform(int atom_id);

private:
  DataIterator&  
};

}  // namespace hotbox

