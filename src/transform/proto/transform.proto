syntax = "proto3";

import "schema/proto/schema.proto";

package hotbox;

// Config for TransformWriter.
message TransformWriterConfig {
  string output_family_name = 1;
  FeatureStoreType store_type = 2;
  bool output_simple_family = 3;
}

// Features in each family and their descriptor strings.
//
// Comment(wdai): TransformFamilyFeatureProto should be nested under
// TransformParamProto, but that'd create C++ class called
// TransformParamProto_TransformFamilyFeatureProto. Too ugly.
message TransformFamilyFeatureProto {
  repeated Feature input_features = 1;
  repeated string input_features_desc = 2;
}

// TransformParamProto contains the member of TransformParam.
message TransformParamProto {
  TransformConfig config = 1;

  // Keyed on family_name
  map<string, TransformFamilyFeatureProto> input_families = 2;

  // Wide families are families selected under family-wide selection
  // and uses only single store.
  message OffsetPair {
    string family_name = 1;
    StoreTypeAndOffset offset = 2;
  }
  repeated OffsetPair wide_family_offsets = 3;
}

message TransformConfig {

  // Configurations that are common to all transforms.
  BaseTransformConfig base_config = 1;

  oneof config {
    OneHotTransformConfig one_hot_transform = 2;
    BucketizeTransformConfig bucketize_transform = 3;
    NgramTransformConfig ngram_transform = 4;
    LogitTransformConfig logit_transform = 5;
    ConstantTransformConfig constant_transform = 6;
    SelectTransformConfig select_transform = 7;
  }
}

message TransformConfigList {
  repeated TransformConfig transform_configs = 1;
}

message BaseTransformConfig {
  // Required. input_features: E.g. "mobile:ctr" or "mobile:" for selecting all
  // features in a family.
  repeated string input_features = 1;

  // Optional. Has to be family specification, e.g., "mobile_onehot:". All
  // features created from a transform goes under 'output_family'.
  // Default name would be supplied if none is given.
  string output_family = 2;

  // Optional. Output of the transform, default to OUTPUT (in the output
  // store) otherwise set it to one of the FeatureStoreType (e.g.,
  // FeatureStoreType::DENSE_CAT) and the result won't be included in final
  // feature.
  FeatureStoreType output_store_type = 5;
}

// Unless otherwise specified, all transforms ignores BYTE features and print
// out warning messages.
//
// Common fields:
//
// input_features: E.g. "mobile:ctr" or "mobile:" for selecting all features
// in a family.
//
// input_features_list: vector of input_features.
//
// output_feature_family: E.g., "mobile_X_web:". Has to end with ":". If
// output features do not have one-to-one relationship with input_featues,
// then user is required to specify a new family.
// TODO(wdai): Consider making it and internally generate a family
// name if necessary. More convenience but less clear semantics.
// 
// TODO(wdai): Future work: automatically monitor which transform is most
// compute intensive.

// Creating buckets (-infinity, buckets[0]), [buckets[0], buckets[1]) ...  to
// ALL input_features.
//
// If 'output_family' is not specified, use "onehot_famX:" where X is nth
// transform. The # of fields in output_family is (# buckets) x (#
// input_features) if buckets is provided or, for categorical features, sum of
// distinct values for each features.
//
// Output features are stored in sparse format.
message BucketizeTransformConfig {
  // buckets must be sorted in ascending order and include both boundaries
  // (can be -inf or inf)
  repeated float buckets = 1;
}

// Only need BaseTransformConfig.
message OneHotTransformConfig {
}

// Add a constant feature as offset (usually a constant of 1).
message ConstantTransformConfig {
  float constant = 1;
}

// Take cartesian products between input_feature_list[0],
// input_feature_list[1], ...., each input_feature_set is a string, e.g.,
// "mobile:,web:counts". input_feature_list can be the results from other
// transforms or of the same sets (self-cartesian product). Run time error if
// input_feature_list.size() < 2.  Does not generate lower order terms (e.g.,
// only 3rd order terms are generated with three input_feature_list)
//
// Convension: "mobile_web-count_X_other:" if input_feature_list are
// ["mobile:,web:count", "other:"]
//
// Output features are stored in sparse format.
message NgramTransformConfig {
  
}

// f(p) = log(p/(1-p)) for p \in (0, 1) is very useful for transforming
// normalized count statistics (e.g. CTR). Run time error if input_features has
// value outside of (0, 1)
//
// Output features are stored in the same format as the input_features.
message LogitTransformConfig {
  // Truncate log range to [lower_bound, upper_bound].
  double upper_bound = 3;
  double lower_bound = 4;
}

// SelectTransform uses selected features from the BaseTransformConfig
message SelectTransformConfig {
}

/*
// Select raw features to include in the final output. Automatically drops
// BYTES features and multinomial categorical features. The selected feature
// is always not_in_final = false and appears in final output.
message SelectTransformConfig {
// By default we drop multinomial categorical features as well but only
// include binary categorical feature.
bool include_multi_categorical = 2;

// Standardize numeric features by default.
bool standardize_numeric = 3;
}

// Hash high dimensional (sparse) features to fixed low-dim.
message HashTransformConfig {
// # of hashed dimension.
int32 num_buckets = 3;

// Dynamic just means dense for now.
//
// TODO(wdai): decide based on the sparsity of, say, the first 1000 data
// points.
FeatureStoreType output_store_type = 4;

// TODO(wdai): Option for various hash functions.
}

// CustomTransformConfig calls a user-defined class for transform.
message CustomTransformConfig {
// TODO(wdai): Use class registry to build transform class from string.
// TODO(wdai): Given input_feature_list, transform class needs to return
// the output dimension and FeatureStoreType.
string transform_name = 3;
}

// TODO(wdai): define Model message and ModelTransformConfig.
message ModelTransformConfig {
// Full spec of model type and model configuration.
ModelSpec model = 1;
}
 */
