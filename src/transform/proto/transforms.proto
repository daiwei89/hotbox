syntax = "proto3";

import "transform/proto/schema.proto";

package mldb;

// Unless otherwise specified, all transforms ignores BYTE features and print
// out warning messages.
//
// Common fields:
//
// input_features: E.g. "mobile:ctr" or "mobile:" for selecting all features
// in a family.
//
// input_features_list: vector of input_features.
//
// output_feature_family: E.g., "mobile_X_web:". Has to end with ":". If
// output features do not have one-to-one relationship with input_featues,
// then user is required to specify a new family.
// TODO(wdai): Consider making it and internally generate a family
// name if necessary. More convenience but less clear semantics.
// 
// TODO(wdai): Future work: automatically monitor which transform is most
// compute intensive.

// Creating buckets (-infinity, buckets[0]), [buckets[0], buckets[1]) ...  to
// ALL input_features.
//
// Output features are stored in sparse format.
message OneHotTransform {
  string input_features = 1;

  // Convention: "mobile_onehot:" The # of fields in output_feature_family is
  // (# buckets) x (# input_features) if buckets is provided or, for
  // categorical features, sum of distinct values for each features.
  string output_feature_family = 2;

  // This field is for CATEGORICAL FeatureType
  // and default behavior creates one bucket for each CATEGORICAL value.
  repeated double buckets = 3;

  // True to not include output_feature_family in the final result. The
  // output_feature_family will only be input to other transforms.
  bool in_final = 4;
}

// Take cartesian products between input_feature_list[0],
// input_feature_list[1], ...., each input_feature_set is a string, e.g.,
// "mobile:,web:counts". input_feature_list can be the results from other
// transforms or of the same sets (self-cartesian product). Run time error if
// input_feature_list.size() < 2.  Does not generate lower order terms (e.g.,
// only 3rd order terms are generated with three input_feature_list)
//
// Output features are stored in sparse format.
message NgramTransform {
  repeated string input_feature_list = 1;

  // Convension: "mobile_web-count_X_other:" if input_feature_list are
  // ["mobile:,web:count", "other:"]
  string output_feature_family = 2;

  bool in_final = 3;
}

// f(p) = log(p/(1-p)) for p \in (0, 1) is very useful for transforming
// normalized count statistics (e.g. CTR). Run time error if input_features has
// value outside of (0, 1)
//
// Output features are stored in the same format as the input_features.
message LogitTransform {
  string input_features = 1;
  string output_feature_family = 2;

  // Truncate log range to [lower_bound, upper_bound].
  double upper_bound = 3;
  double lower_bound = 4;

  bool in_final = 5;
}

// Select raw features to include in the final output. Automatically drops
// BYTES features and multi-nomial categorical features. The selected feature
// is never in_final and appears in final output.
message SelectTransform {
  repeated string input_features = 1;

  // By default we drop multinomail categorical features as well but only
  // include binary categorical feature.
  bool include_multi_categorical = 2;

  // Standardize numeric features by default.
  bool standardize_numeric = 3;
}

// Hash high dimensional (sparse) features to fixed low-dim.
message HashTransform {
  repeated string input_features = 1;
  string output_feature_family = 2;

  // # of hashed dimension.
  int32 num_buckets = 3;

  // Dynamic just means dense for now.
  //
  // TODO(wdai): decide based on the sparsity of, say, the first 1000 data
  // points.
  FeatureStoreType output_storage_type = 4;

  // TODO(wdai): Option for various hash functions.
}

// CustomTransform calls a user-defined class for transform.
message CustomTransform {
  repeated string input_feature_list = 1;
  string output_feature_family = 2;

  // TODO(wdai): Use class registry to build transform class from string.
  // TODO(wdai): Given input_feature_list, transform class needs to return
  // the output dimension and FeatureStoreType.
  string transform_name = 3;
}

/*
// TODO(wdai): define Model message and ModelTransform.
message ModelTransform {
  // Full spec of model type and model configuration.
  ModelSpec model = 1;
}
*/
